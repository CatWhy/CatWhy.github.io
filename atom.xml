<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>独白</title>
    <link href="http://example.com" />
    <updated>2022-09-19T13:02:45.000Z</updated>
    <category term="javascript" />
    <category term="原型模式" />
    <category term="前端" />
    <category term="elementui" />
    <category term="vue.js" />
    <category term="开发语言" />
    <category term="react.js" />
    <category term="typescript" />
    <category term="Vue" />
    <category term="git" />
    <category term="npm" />
    <category term="node.js" />
    <category term="动画" />
    <category term="css3" />
    <entry>
        <id>http://example.com/2022/09/19/vue-shi-xian-word-wen-dang-zai-xian-yu-lan-gong-neng-nei-wang-wai-wang/</id>
        <title>Vue实现Word文档在线预览功能（内网、外网）！！！</title>
        <link rel="alternate" href="http://example.com/2022/09/19/vue-shi-xian-word-wen-dang-zai-xian-yu-lan-gong-neng-nei-wang-wai-wang/"/>
        <content type="html">&lt;h2 id=&#34;内网实现方法：&#34;&gt;&lt;a href=&#34;#内网实现方法：&#34; class=&#34;headerlink&#34; title=&#34;内网实现方法：&#34;&gt;&lt;/a&gt;&lt;strong&gt;内网实现方法：&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;需要下载两个插件，一定要注意！！&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm i docx-preview@0.1.4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm i jszip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;正文中引入&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;div ref=&#34;preview&#34;  id=&#34;preview&#34; &amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	let docx = require(&#34;docx-preview&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	window.JSZip = require(&#34;jszip&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 查看文档按钮&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    handleFile(row) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		this.getDocx() .then((response) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			console.log(response);  // response为流文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			docx.renderAsync(response.data, this.$refs.preview);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			// 渲染到页面（着重注意 this.$refs.preview要和&amp;lt;div ref=&#34;preview&#34;&amp;gt;&amp;lt;/div&amp;gt;保持一致）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		.catch(function (error) {});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;外网实现方法：&#34;&gt;&lt;a href=&#34;#外网实现方法：&#34; class=&#34;headerlink&#34; title=&#34;外网实现方法：&#34;&gt;&lt;/a&gt;&lt;strong&gt;外网实现方法：&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;可以用下面这种方式：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;iframe&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	:src=&#34;`https://view.officeapps.live.com/op/view.aspx?src=${downloadUrl}`&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	width=&#34;100%&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	:height=&#34;height&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	frameborder=&#34;1&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有时候使用这种方式会遇到下面提示：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/6a435d1088624d77b590b4b5e4d9e2a4.png#pic_center&#34;&gt;&lt;/p&gt;
&lt;p&gt;不要因此就直接放弃这种方式，好好找找原因。我这边遇到该情况的原因是因为本地DNS不解析该链接，后将DNS改为&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;dns: 101.198.198.198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     114.114.114.114&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完美的解决了该问题。&lt;br&gt;好了，可以轻松实现文档预览啦&lt;/p&gt;
</content>
        <category term="Vue" />
        <updated>2022-09-19T13:02:45.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/vue-zhong-shi-yong-el-data-picker-bao-cuo-avoid-mutating-a-prop-directly-since-the-value-will-be-overwrite/</id>
        <title>Vue中使用el-data-picker报错 Avoid mutating a prop directly since the value will be overwrite</title>
        <link rel="alternate" href="http://example.com/2022/09/19/vue-zhong-shi-yong-el-data-picker-bao-cuo-avoid-mutating-a-prop-directly-since-the-value-will-be-overwrite/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/0d3194fbdcfb40b9979505b291540af0.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;锁定组件，发现是 el-date-picker 组件抛出的警告。通过在 github 上搜索，最终找到了答案&lt;br&gt;问题出在了这个 PR #21806 增加了 props placement 用来适应位置，但是之前的代码 created 时有给 placement 赋值。&lt;br&gt;this.placement = PLACEMENT_MAP[this.align] || PLACEMENT_MAP.left;&lt;br&gt;说白了之前 placement 是 data 的对象，现在变成 props 了，然后修改就报错了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解决&#34;&gt;&lt;a href=&#34;#解决&#34; class=&#34;headerlink&#34; title=&#34;解决&#34;&gt;&lt;/a&gt;解决&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;想要解决这个问题，可以修改版本到 2.15.8&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm uninstall element-ui&lt;br&gt;npm install &lt;a href=&#34;mailto:element-ui@2.15.8&#34;&gt;element-ui@2.15.8&lt;/a&gt; -s&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/aab330da73bb4df2bd068434372343c1.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;br&gt;&lt;strong&gt;注意：这里不要【‘^’】,否则还会报错&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</content>
        <category term="Vue" />
        <updated>2022-09-19T13:02:04.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/vue-xiang-mu-zhong-shi-yong-dai-ti-src-bing-zai-vscode-zhong-kai-qi-lu-jing-zi-dong-ti-shi/</id>
        <title>Vue项目中使用@代替src——并在VScode中开启@路径自动提示</title>
        <link rel="alternate" href="http://example.com/2022/09/19/vue-xiang-mu-zhong-shi-yong-dai-ti-src-bing-zai-vscode-zhong-kai-qi-lu-jing-zi-dong-ti-shi/"/>
        <content type="html">&lt;p&gt;&lt;code&gt;配置引用路径（以“@”引用为项目的src目录为例）可拆分为如下两步操作&lt;/code&gt;&lt;br&gt; &lt;code&gt; - 配置webpack打包时将“@”解析为项目的src目录&lt;/code&gt;&lt;br&gt; &lt;code&gt; - 配置vsCode在路径中输入“@”时的路径提示&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;一般的 “路径别名” ：&lt;/code&gt;&lt;br&gt;&lt;code&gt;+ @ ——src&lt;/code&gt;&lt;br&gt;&lt;code&gt;+ components —— src/components&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一共分为3步。&lt;/p&gt;
&lt;h3 id=&#34;第一步：安装path模块&#34;&gt;&lt;a href=&#34;#第一步：安装path模块&#34; class=&#34;headerlink&#34; title=&#34;第一步：安装path模块&#34;&gt;&lt;/a&gt;第一步：安装path模块&lt;/h3&gt;&lt;p&gt;可以先看看自己的&lt;code&gt;node_modules&lt;/code&gt;文件里面能不能找到path模块。&lt;br&gt;如果没有，那就安装，终端运行：&lt;br&gt;&lt;code&gt;npm install path --save&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;第二步：设置路径别名&#34;&gt;&lt;a href=&#34;#第二步：设置路径别名&#34; class=&#34;headerlink&#34; title=&#34;第二步：设置路径别名&#34;&gt;&lt;/a&gt;第二步：设置路径别名&lt;/h3&gt;&lt;p&gt;我的项目使用的是 vue-cli 脚手架 搭建的。&lt;br&gt;首先在和 &lt;code&gt;src&lt;/code&gt;并齐的&lt;code&gt;vue.config.js&lt;/code&gt;[没有就新建]中，使用&lt;code&gt;path&lt;/code&gt;模块，设置一些路径的别名。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const path = require(&#34;path&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function resolve(dir) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return path.join(__dirname, dir);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;} &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  chainWebpack: config =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    config.resolve.alias&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .set(&#34;@&#34;, resolve(&#34;src&#34;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .set(&#34;assets&#34;, resolve(&#34;src/assets&#34;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .set(&#34;components&#34;, resolve(&#34;src/components&#34;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .set(&#34;base&#34;, resolve(&#34;baseConfig&#34;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .set(&#34;public&#34;, resolve(&#34;public&#34;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;第三步：VScode-设置路径自动补全&#34;&gt;&lt;a href=&#34;#第三步：VScode-设置路径自动补全&#34; class=&#34;headerlink&#34; title=&#34;第三步：VScode 设置路径自动补全&#34;&gt;&lt;/a&gt;第三步：&lt;a href=&#34;https://so.csdn.net/so/search?q=VScode&amp;amp;spm=1001.2101.3001.7020&#34;&gt;VScode&lt;/a&gt; 设置路径自动补全&lt;/h3&gt;&lt;p&gt;在我们进行上述两个步骤之后，我们的@/…是可以正常使用了，但是！我们在编辑器输入@/以后，编辑器不会自动给我们提示。&lt;/p&gt;
&lt;p&gt;那这样的话，我们还不如像以前那样的用./ ../这样式的路径，所以，这个时候，配置编辑器自动提示就十分必要了！&lt;/p&gt;
&lt;p&gt;接下来，我们可以进行下面的操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开VScode的设置&lt;/li&gt;
&lt;li&gt;点击下面的按钮，打开&lt;code&gt;setting.json&lt;/code&gt;&lt;br&gt;&lt;img src=&#34;%5B90bf54e322794829842bd7af7e18ee29.png%5D(https://img-blog.csdnimg.cn/90bf54e322794829842bd7af7e18ee29.png)&#34;&gt;&lt;/li&gt;
&lt;li&gt;第二步也可以通过使用快捷键 &lt;code&gt;ctrl + shift + p&lt;/code&gt;召唤搜索框，·搜索&lt;code&gt;setting.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加如下代码：&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &#34;path-intellisense.mappings&#34;: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   		&#34;@&#34;: &#34;${workspaceRoot}/src&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;以上的所有配置好了，代码确定没有错误之后，我们就可以正常使用@/…的方式来写路径了。不要忘记重启VScode哦！！！！&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="Vue" />
        <updated>2022-09-19T13:01:51.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/guan-yu-vue-xin-zeng-attrs-listeners-inheritattrs/</id>
        <title>关于vue新增 - inheritAttrs &amp; listeners &amp; attrs</title>
        <link rel="alternate" href="http://example.com/2022/09/19/guan-yu-vue-xin-zeng-attrs-listeners-inheritattrs/"/>
        <content type="html">&lt;h2 id=&#34;attrs&#34;&gt;&lt;a href=&#34;#attrs&#34; class=&#34;headerlink&#34; title=&#34;$attrs&#34;&gt;&lt;/a&gt;&lt;strong&gt;$attrs&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;只读属性&lt;/li&gt;
&lt;li&gt;包含了父作用域中不作为 props 被识别 (且获取) 的特性绑定 (class 和 style 除外)&lt;/li&gt;
&lt;li&gt;可以通过v-bind=”$attrs”传入内部组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;包含了父作用域中不作为 props 被识别 (且获取) 的特性绑定 (class 和 style 除外)&lt;/strong&gt;&lt;br&gt;父组件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 子组件上绑定了三个值 - happy、peter、attrs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;child :happy=&#34;happy&#34; :peter=&#34;peter&#34; **attrs=&#34;$attrs&#34;**&amp;gt;&amp;lt;/child&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import child from &#39;./child.vue&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#39;TestPage&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  data(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      happy: &#39;happy&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      peter: &#39;peter&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  components: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    child&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;子组件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#39;child&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 只将happy作为prop获取&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  props: [&#39;happy&#39;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  inheritAttrs: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mounted(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(this.$attrs) // {attrs: &#34;$attrs&#34;, peter: &#34;peter&#34;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;可以通过v-bind=”$attrs”传入内部组件&lt;/strong&gt;&lt;br&gt;例：向孙子组件传值&lt;/p&gt;
&lt;p&gt;父组件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 子组件上绑定了三个值 - happy、peter、attrs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;child :happy=&#34;happy&#34; :peter=&#34;peter&#34; attrs=&#34;$attrs&#34;&amp;gt;&amp;lt;/child&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import child from &#39;./child.vue&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#39;TestPage&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  data(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      happy: &#39;happy&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      peter: &#39;peter&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  components: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    child&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;子组件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;child-child **v-bind=&#34;$attrs&#34;**&amp;gt;&amp;lt;/child-child&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import childChild from &#39;./childChild.vue&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#39;child&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  props: [&#39;happy&#39;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  inheritAttrs: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  components: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    childChild&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;孙子组件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;div&amp;gt;peter：{{peter}}&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#39;childChild&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 子组件v-bind=&#34;$attrs&#34;后，孙子组件可以直接 props: [&#39;peter&#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // props只能获取$attrs中存在的值，如获取 happy，输出为undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  props: [&#39;peter&#39;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  inheritAttrs: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mounted(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(this.peter) // peter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;listeners&#34;&gt;&lt;a href=&#34;#listeners&#34; class=&#34;headerlink&#34; title=&#34;$listeners&#34;&gt;&lt;/a&gt;$listeners&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;只读属性&lt;/li&gt;
&lt;li&gt;包含了父作用域中（不含.native修饰器的）v-on时间监听器&lt;/li&gt;
&lt;li&gt;可以通过 v-on=”$listeners” 传入内部组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;strong&gt;包含了父作用域中（不含.native修饰器的）v-on时间监听器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;父组件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;child @editFather=&#34;editFather&#34; @click=&#34;testListeners&#34; @testNative.native=&#34;testNative&#34;&amp;gt;&amp;lt;/child&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import child from &#39;./child.vue&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#39;TestPage&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  components: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    child&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  methods: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    editFather(){},&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testListeners(){},&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testNative(){}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;子组件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#39;child&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  inheritAttrs: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mounted(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(this.$listeners) // { editFather: f, click: f }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;可以通过 v-on=”$listeners” 传入内部组件&lt;/strong&gt;&lt;br&gt;例：孙子组件修改父组件的值&lt;/p&gt;
&lt;p&gt;父组件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;child :peter=&#34;peter&#34; attrs=&#34;$attrs&#34; @editFather=&#34;editFather&#34;&amp;gt;&amp;lt;/child&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import child from &#39;./child.vue&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#39;TestPage&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  data(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      peter: &#39;peter&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  components: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    child&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  methods: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    editFather(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      this.peter = &#39;hello, peter&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;子组件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;child-child v-bind=&#34;$attrs&#34; v-on=&#34;$listeners&#34;&amp;gt;&amp;lt;/child-child&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import childChild from &#39;./childChild.vue&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#39;child&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  props: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  inheritAttrs: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  components: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    childChild&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;孙子组件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;div&amp;gt;peter： {{peter}}&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;button @click=&#34;editFather&#34;&amp;gt;改变peter&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#39;childChild&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  props: [&#39;peter&#39;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  inheritAttrs: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  methods: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    editFather(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      // 孙子组件调用父组件的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      this.$emit(&#34;editFather&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;inheritAttrs&#34;&gt;&lt;a href=&#34;#inheritAttrs&#34; class=&#34;headerlink&#34; title=&#34;inheritAttrs&#34;&gt;&lt;/a&gt;inheritAttrs&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;boolean类型&lt;/li&gt;
&lt;li&gt;默认值：true&lt;/li&gt;
&lt;li&gt;true：父作用域不作为 props 被识别 (且获取) 的特性将会被“回退”且作为普通的HTML特性应用在子组件的根元素上。&lt;/li&gt;
&lt;li&gt;false：去掉默认行为&lt;/li&gt;
&lt;li&gt;该属性不影响&lt;code&gt;class\style&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;该属性不影响&lt;code&gt;attr&lt;/code&gt; ， 无 论 设 置 为&lt;code&gt;true&lt;/code&gt;或&lt;code&gt; false&lt;/code&gt;， 子 组 件 都 可 以 通 过 attrs，无论设置为true或false，子组件都可以通过attrs，无论设置为true或false，子组件都可以通过attrs获取到父组件传过来的属性值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;inheritAttrs-true&#34;&gt;&lt;a href=&#34;#inheritAttrs-true&#34; class=&#34;headerlink&#34; title=&#34;inheritAttrs: true&#34;&gt;&lt;/a&gt;inheritAttrs: true&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 父组件引用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;customEvent&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @click=&#34;testEvent&#34; testAttr=&#39;testAttr_value&#39; testAttr2=&#39;testAttr2&#39; class=&#34;bushiba?&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @myEvent=&#34;emitFN&#34; ref=&#34;childtest&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/customEvent&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 子组件 customEvent&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;div&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    根节点这个 div 标签将继承非props的所有 attr 和 事件；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (vue内置的特殊attribute是不会继承的)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;div&amp;gt;单节点组件1&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;div&amp;gt;单节点组件2&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import { defineComponent } from &#39;vue&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default defineComponent({&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  inheritAttrs: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/ba2a102f1909472486d5167c744fb9db.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;inheritAttrs-false&#34;&gt;&lt;a href=&#34;#inheritAttrs-false&#34; class=&#34;headerlink&#34; title=&#34;inheritAttrs: false&#34;&gt;&lt;/a&gt;inheritAttrs: false&lt;/h3&gt;&lt;p&gt;设置为false后，不论单节点还是多节点的组件，都不会继承任何 attr 和 事件！&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/19be332b43104d9b8b6d0b7270a574b9.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
</content>
        <updated>2022-09-19T13:01:22.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/vue-shi-ji-yun-yong-chu-li-token-guo-qi/</id>
        <title>vue实际运用：处理token过期</title>
        <link rel="alternate" href="http://example.com/2022/09/19/vue-shi-ji-yun-yong-chu-li-token-guo-qi/"/>
        <content type="html">&lt;br&gt;

&lt;p&gt;&lt;strong&gt;后端为了安全，token一般存在有效时间，当token过期，所有请求失效&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;一、解决方案：&#34;&gt;&lt;a href=&#34;#一、解决方案：&#34; class=&#34;headerlink&#34; title=&#34;一、解决方案：&#34;&gt;&lt;/a&gt;&lt;strong&gt;一、解决方案：&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;1)在请求发起前拦截每个请求，判断token的有效时间是否已经过期，若已过期，则将请求挂起，先刷新token后再继续请求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点： 在请求前拦截，能节省请求，省流量&lt;/li&gt;
&lt;li&gt;缺点： 需要后端额外提供一个token过期时间的字段；使用了本地时间判断，若本地时间被篡改，特别是本地时间比服务器时间慢时，拦截会失败&lt;/li&gt;
&lt;li&gt;使用方法：axios.interceptors.request.use() 这个请求前拦截方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2)根据拦截返回后的数据判断，若token过期，先刷新token，再进行一次请求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：不需额外的token过期字段，不需判断时间&lt;/li&gt;
&lt;li&gt;缺点： 会消耗多一次请求，耗流量&lt;/li&gt;
&lt;li&gt;使用方法：axios.interceptors.response.use() 这个响应拦截方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;最简单方法：获取到过期code，直接跳到登录页&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;二、实现方法：&#34;&gt;&lt;a href=&#34;#二、实现方法：&#34; class=&#34;headerlink&#34; title=&#34;二、实现方法：&#34;&gt;&lt;/a&gt;&lt;strong&gt;二、实现方法：&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;1)封装axios基本结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;token是存在localStorage中&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//在request.js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import axios from &#39;axios&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 创建一个实例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const service = axios.create({&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    baseURL: process.env.VUE_APP_BASE_API, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    timeout: 5000 // request timeout&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 从localStorage中获取token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function getLocalToken () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const token = window.localStorage.getItem(&#39;token&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 给实例添加一个setToken方法，用于登录后将最新token动态添加到header，同时将token保存在localStorage中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;service.setToken = (token) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  instance.defaults.headers[&#39;X-Token&#39;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  window.localStorage.setItem(&#39;token&#39;, token)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 拦截返回的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;service.interceptors.response.use(response =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 接下来会在这里进行token过期的逻辑处理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return response&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}, error =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return Promise.reject(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//暴露&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default service&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;假如后端接口token过期返回的code是401&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//获取新的token请求&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function refreshToken () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return service.post(&#39;/refreshtoken&#39;).then(res =&amp;gt; res.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 拦截返回的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;service.interceptors.response.use(response =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 接下来会在这里进行token过期的逻辑处理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const { code } = response.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	-----------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	// 说明token过期了,获取新的token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 if (code === 401) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return refreshToken().then(res =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		// 刷新token成功，将最新的token更新到header中，同时保存在localStorage中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      const { token } = res.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      service.setToken(token)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      // 获取当前失败的请求&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      const config = response.config&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      //重置失败请求的配置&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      config.headers[&#39;X-Token&#39;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      config.baseURL = &#39;&#39; &#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      //重试当前请求并返回promise&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	      return service(config)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		}).catch( res=&amp;gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			//重新请求token失败，跳转到登录页&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			window.location.href = &#39;/login &#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		} )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 --------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return response&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}, error =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return Promise.reject(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2)问题和优化&lt;br&gt;如果token失效时，存在多个请求，这就会导致多次执行刷新token的接口&lt;br&gt;&lt;strong&gt;在request.js中用一个变量来标记当前是否正在刷新token的状态，如果正在刷新则不再调用刷新token的接口&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;在request.js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 是否正在刷新的标记&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let isRefreshing = false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-----------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 说明token过期了,获取新的token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if (code === 401) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	//判断一下状态&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	if( !isRefreshing ){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		//修改状态，进入更新token阶段&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		isRefreshing = true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return refreshToken().then(res =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		// 刷新token成功，将最新的token更新到header中，同时保存在localStorage中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			const { token } = res.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			service.setToken(token)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			// 获取当前失败的请求&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			const config = response.config&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			//重置失败请求的配置&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			config.headers[&#39;X-Token&#39;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			config.baseURL = &#39;&#39; &#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			//重试当前请求并返回promise&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return service(config)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		}).catch( res=&amp;gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			//重新请求token失败，跳转到登录页&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			window.location.href = &#39;/login &#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		} ).finally( ()=&amp;gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			//完成之后在关闭状态&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			isRefreshing = false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		} )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;同时发起两个或以上的请求时，其他接口如何重试&lt;br&gt;两个接口几乎同时发起和返回，第一个接口会进入刷新token后重试的流程，而第二个接口需要先存起来，然后等刷新token后再重试。同样，如果同时发起三个请求，此时需要缓存后两个接口，等刷新token后再重试；&lt;br&gt;当第二个过期的请求进来，token正在刷新，我们先将这个请求存到一个数组队列中，想办法让这个请求处于等待中，一直等到刷新token后再逐个重试清空请求队列。&lt;br&gt;将请求存进队列中后，同时返回一个Promise，让这个Promise一直处于Pending状态（即不调用resolve），此时这个请求就会一直等啊等，只要我们不执行resolve，这个请求就会一直在等待。当刷新请求的接口返回来后，我们再调用resolve，逐个重试。&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 是否正在刷新的标记&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let isRefreshing = false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 重试队列，每一项将是一个待执行的函数形式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let requests = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-----------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	// 说明token过期了,获取新的token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 if (code === 401) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 	const config = response.config&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 	//判断一下状态&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if( !isRefreshing ){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			//修改状态，进入更新token阶段&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			isRefreshing = true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			// 获取当前的请求&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return refreshToken().then(res =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			// 刷新token成功，将最新的token更新到header中，同时保存在localStorage中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      const { token } = res.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      service.setToken(token)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      //重置失败请求的配置&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      config.headers[&#39;X-Token&#39;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      config.baseURL = &#39;&#39; &#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      //已经刷新了token，将所有队列中的请求进行重试&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      requests.forEach(cb =&amp;gt; cb(token))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      // 重试完了别忘了清空这个队列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      requests = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		      return service(config)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			}).catch( res=&amp;gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				//重新请求token失败，跳转到登录页&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				window.location.href = &#39;/login &#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			} ).finally( ()=&amp;gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				//完成之后在关闭状态&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				isRefreshing = false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			} )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		} else{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			 // 正在刷新token，返回一个未执行resolve的promise&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			 return new Promise((resolve) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	         // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		         requests.push((token) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			          config.baseURL = &#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			          config.headers[&#39;X-Token&#39;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			          resolve(instance(config))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		       	 })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	     	 })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 --------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2022-09-19T13:01:06.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/vant-uploader-tu-pian-shang-chuan-gen-ju-hou-duan-url-hui-xian-wen-ti/</id>
        <title>Vant Uploader 图片上传，根据后端url回显问题</title>
        <link rel="alternate" href="http://example.com/2022/09/19/vant-uploader-tu-pian-shang-chuan-gen-ju-hou-duan-url-hui-xian-wen-ti/"/>
        <content type="html">&lt;p&gt;今天在开发中，用到van-uploader上传。在修改用户信息的时候，需要用到图片回显。&lt;/p&gt;
&lt;p&gt;当图片信息，后端返回的是一个url地址。如何在组件中进行回显呢。&lt;/p&gt;
&lt;p&gt;在官方文档中有提到，可以有自定义上传样式。那我们是不是可以把button换成img，src就用后端返回的url，就可以进行回显了呢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/4f0089fee79b468b9e1dd12c9ee8cd46.png&#34;&gt;&lt;br&gt;把 van-button换成van-image&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;van-uploader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :max-count=&#34;1&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :after-read=&#34;handleUpload&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;van-image  width=&#34;60&#34; height=&#34;60&#34; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             :src=&#34;formTenant.merchantHead?formTenant.merchantHead:require(&#39;@/assets/morentu.png&#39;)&#34; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/van-uploader&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; formTenant.merchantHead就是后端返回的url，以上用了三元表达式，如果后端有返回值，就渲染返回值，如果没有则渲染默认图片。&lt;/p&gt;
&lt;p&gt;以上就是Vant Uploader 图片回显，特此记录。&lt;/p&gt;
</content>
        <category term="javascript" />
        <category term="vue.js" />
        <updated>2022-09-19T13:00:45.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/react-sheng-ming-zhou-qi/</id>
        <title>React生命周期</title>
        <link rel="alternate" href="http://example.com/2022/09/19/react-sheng-ming-zhou-qi/"/>
        <content type="html">&lt;h1 id=&#34;组件的挂载：&#34;&gt;&lt;a href=&#34;#组件的挂载：&#34; class=&#34;headerlink&#34; title=&#34;组件的挂载：&#34;&gt;&lt;/a&gt;组件的挂载：&lt;/h1&gt;&lt;p&gt;组件在首次创建后，进行第一次的渲染为挂载期。挂载期有的一些方法会被依次触发，列举如下：&lt;/p&gt;
&lt;p&gt;constructor(构造函数，初始化状态值)&lt;br&gt;getInitialState(设置状态机)&lt;br&gt;getDefaultProps(获取默认的props)&lt;br&gt;UNSAFE_componentWillMount(首次渲染前执行)&lt;br&gt;render(渲染组件)&lt;br&gt;componentDidMount(render渲染之后执行的操作)&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//组件挂载&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import React from &#39;react&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import ReactDOM from &#39;react-dom&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class HelloWorld extends React.Component{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(props) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;1,构造函数&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.state={};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;2,设置状态机&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    static defaultProps={&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        name:&#34;React&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillMount(nextProps, nextState, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;3,完成首次渲染前调用&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    render() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;4,组件进行渲染&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;div&amp;gt;{this.props.name}&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentDidMount() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;5,componentDidMount render渲染后的操作&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ReactDOM.render(&amp;lt;HelloWorld /&amp;gt;, document.getElementById(&#39;root&#39;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/92c5df910cf6453698049a57fb6fd65c.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;组件的更新：&#34;&gt;&lt;a href=&#34;#组件的更新：&#34; class=&#34;headerlink&#34; title=&#34;组件的更新：&#34;&gt;&lt;/a&gt;组件的更新：&lt;/h1&gt;&lt;p&gt;组件更新，指的是在组件初次渲染后，进行了组件状态的改变。React在生命周期中的更新过程包括以下几个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNSAFE_componentWillReceiveProps :当父组件更新子组件state时，该方法会被调用。&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate ： 该方法决定组件state或props的改变是否需要重新渲染组件。&lt;/li&gt;
&lt;li&gt;UNSAFE_componentWillUpdate : 在组件接受新的state或者props时，即将进行重新渲染前调用该方法，和UNSAFE_componentWillMount方法类似。&lt;/li&gt;
&lt;li&gt;componentDidUpdate : 在组件重新渲染后调用该方法，和componentDidMount方法类似。&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; //组件更新&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class HelloWorldFather extends React.Component{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(props) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.updateChildProps=this.updateChildProps.bind(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.state={  //初始化父组件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name:&#34;React&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    updateChildProps(){  //更新父组件state&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.setState({&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name:&#34;Vue&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    render() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;HelloWorld name={this.state.name} /&amp;gt;  {/*父组件的state传递给子组件*/}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;button onClick={this.updateChildProps}&amp;gt;更新子组件props&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class HelloWorld extends React.Component{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(props) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;1,构造函数&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;2,设置状态机&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillMount() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;3,完成首次渲染前调用&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;6,父组件更新子组件时调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    shouldComponentUpdate(nextProps, nextState, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;7,决定组件props或者state的改变是否需要重新进行渲染&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;8,当接收到新的props或state时，调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    render() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;4,组件进行渲染&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;div&amp;gt;{this.props.name}&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentDidMount() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;5,componentDidMount render后的操作&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentDidUpdate(prevProps, prevState, snapshot) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;9,组件被重新选然后调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ReactDOM.render(&amp;lt;HelloWorldFather /&amp;gt;,document.getElementById(&#34;root&#34;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;https://img-blog.csdnimg.cn/1c84a48c41e94a228bfbac654801eb56.png&#34;&gt;&lt;br&gt;点击“更新子组件props”后：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/d9b73c3667b9415faffbe0df833139f2.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;组件的卸载：&#34;&gt;&lt;a href=&#34;#组件的卸载：&#34; class=&#34;headerlink&#34; title=&#34;组件的卸载：&#34;&gt;&lt;/a&gt;组件的卸载：&lt;/h1&gt;&lt;p&gt;生命周期的最后一个过程为组件卸载期，也称为组件销毁期。该过程主要涉及一个 方法，即componentWillUnmount，当组件从DOM树删除的时候调用该方法。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//组件卸载&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class HelloWorldFather extends React.Component{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(props) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.updateChildProps=this.updateChildProps.bind(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.state={  //初始化父组件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name:&#34;React&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    updateChildProps(){  //更新父组件state&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.setState({&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name:&#34;Vue&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    render() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;HelloWorld name={this.state.name} /&amp;gt;  {/*父组件的state传递给子组件*/}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;button onClick={this.updateChildProps}&amp;gt;更新子组件props&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class HelloWorld extends React.Component{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(props) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;1,构造函数&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;2,设置状态机&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillMount() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;3,完成首次渲染前调用&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;6,父组件更新子组件时调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    shouldComponentUpdate(nextProps, nextState, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;7,决定组件props或者state的改变是否需要重新进行渲染&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;8,当接收到新的props或state时，调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    delComponent(){  //添加卸载方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ReactDOM.unmountComponentAtNode(document.getElementById(&#34;root&#34;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    render() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;4,组件进行渲染&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;div&amp;gt;{this.props.name}&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;button onClick={this.delComponent}&amp;gt;卸载组件&amp;lt;/button&amp;gt;  {/*声明卸载按钮*/}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentDidMount() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;5,componentDidMount render后的操作&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentDidUpdate(prevProps, prevState, snapshot) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;9,组件被重新选然后调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentWillUnmount() {  //组件卸载后执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;10,组件已被卸载&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ReactDOM.render(&amp;lt;HelloWorldFather /&amp;gt;,document.getElementById(&#34;root&#34;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/3fc8a13384eb4a1eb5b6df0e6dd72c10.png&#34; alt=&#34;**加粗样式**&#34;&gt;&lt;br&gt;点击卸载按钮后：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2bd64f70a8e0438bb1f9e01ccb89e5e1.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;总览组件生命周期：&#34;&gt;&lt;a href=&#34;#总览组件生命周期：&#34; class=&#34;headerlink&#34; title=&#34;总览组件生命周期：&#34;&gt;&lt;/a&gt;总览组件生命周期：&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/7cd812539c5e4f6083bec0e3150d5dc6.png#pic_center&#34;&gt;&lt;/p&gt;
</content>
        <category term="前端" />
        <category term="react.js" />
        <updated>2022-09-19T13:00:31.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/npm-run-eject-bao-cuo-this-git-repository-has-untracked-files-or-uncommitted-changes-jie-jue-fang-an/</id>
        <title>npm run eject 报错This git repository has untracked files or uncommitted changes解决方案</title>
        <link rel="alternate" href="http://example.com/2022/09/19/npm-run-eject-bao-cuo-this-git-repository-has-untracked-files-or-uncommitted-changes-jie-jue-fang-an/"/>
        <content type="html">&lt;p&gt;在创建 React 项目之后，使用 npm run eject 命令会报错：This git repository has untracked files or uncommitted changes。这个的原因是因为初始化项目之后，该项目并没有本地 git 仓库，而此项目目录下又有 .gitignore 文件，所以此时会向上级寻找未提交的项目。&lt;/p&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;&lt;a href=&#34;#解决方法&#34; class=&#34;headerlink&#34; title=&#34;解决方法&#34;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;p&gt;1.初始化仓库&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.添加并提交&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git commit -m &#39;初始化项目&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.重新执行&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm run eject&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="git" />
        <category term="npm" />
        <category term="node.js" />
        <updated>2022-09-19T13:00:14.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/shi-yong-nvm-an-zhuang-nodejs-bing-jie-jue-npm-xia-zai-yi-lai-shi-xiao-wen-ti-zui-quan-liu-cheng/</id>
        <title>使用NVM安装NodeJS并解决npm下载依赖失效问题（最全流程）</title>
        <link rel="alternate" href="http://example.com/2022/09/19/shi-yong-nvm-an-zhuang-nodejs-bing-jie-jue-npm-xia-zai-yi-lai-shi-xiao-wen-ti-zui-quan-liu-cheng/"/>
        <content type="html">&lt;p&gt;本人因为刚学习react，需要创建项目。下载过react依赖后才发现黑窗口提示我因node版本过低无法创建项目，怎么办呢？我去网上看了很多node升级的文章，大多数说的是重新去官网下载更高版本，我就跟着他们一步步走，但是很快问题就出现了。先是文章中说应该更改node缓存地址，防止给C盘造成过大压力。这就涉及到更改环境变量，我一顿操作后忽然发现我新安装的node版本查不到。emmmmmm 这是为什么呢？我去看了我的文件夹，发现之前的NodeJs版本是由nvm管理的。哦~~~原来是这样。我立马改道又去搜了nvm管理nodejs怎么下载更高级别的node版本。就这样，我又按照nvm的方式一步步输入命令。OK！nodejs版本下载好了。npm版本也能查到。我终于可以开始我的react之旅了。  但是！！老话说得好，人不能高兴的太早。我发现我的npm失效了，没办法下载任何依赖。我又能怎么办呢，只能改道重新去查询npm失效的解决办法，我看了很多文章，各种方法全试了，最起码在我这他们都不行。具体报错及尝试我就不在这里一一记录了。&lt;br&gt;我说说我的解决办法吧。我最终是决定卸载Nodejs以及nvm，重新走一遍流程。&lt;br&gt;因记录了自己整个解决问题的过程，废话有点多。&lt;strong&gt;大家可直接跳跃至标题（一：NVM介绍）阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：本文编写的NVM+NodeJS安装步骤指引，是基于Windows10、64位操作系统进行的编写说明。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;一、NVM介绍&#34;&gt;&lt;a href=&#34;#一、NVM介绍&#34; class=&#34;headerlink&#34; title=&#34;一、NVM介绍&#34;&gt;&lt;/a&gt;一、NVM介绍&lt;/h1&gt;&lt;p&gt;NVM：Node Version Manage，即Node的版本管理工具。使用NVM，可以很方便地在多个NodeJS版本之间进行切换。&lt;/p&gt;
&lt;p&gt;由于项目开发当中，&lt;strong&gt;不同的项目可能依赖不同版本的NodeJS&lt;/strong&gt;，这种情况下，&lt;strong&gt;NodeJS版本的切换将会是一件非常麻烦的事情&lt;/strong&gt;。因此，&lt;strong&gt;使用NVM管理NodeJS版本就显得尤为重要&lt;/strong&gt;。 &lt;/p&gt;
&lt;h1 id=&#34;二、卸载电脑上现有的NodeJS-及nvm&#34;&gt;&lt;a href=&#34;#二、卸载电脑上现有的NodeJS-及nvm&#34; class=&#34;headerlink&#34; title=&#34;二、卸载电脑上现有的NodeJS 及nvm&#34;&gt;&lt;/a&gt;二、卸载电脑上现有的NodeJS 及nvm&lt;/h1&gt;&lt;h2 id=&#34;卸载nvm&#34;&gt;&lt;a href=&#34;#卸载nvm&#34; class=&#34;headerlink&#34; title=&#34;卸载nvm&#34;&gt;&lt;/a&gt;卸载nvm&lt;/h2&gt;&lt;p&gt;直接删除nvM所在文件夹就可以了。&lt;/p&gt;
&lt;h2 id=&#34;卸载NodeJS&#34;&gt;&lt;a href=&#34;#卸载NodeJS&#34; class=&#34;headerlink&#34; title=&#34;卸载NodeJS&#34;&gt;&lt;/a&gt;卸载NodeJS&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从卸载程序卸载程序和功能&lt;br&gt; a. 打开控制面板&lt;br&gt; b. 选择程序和功能&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/7b1d3cff85394f328fc1c685a0b559dd.png&#34;&gt;&lt;br&gt; c. 找到Node.js并卸载&lt;br&gt; &lt;img src=&#34;https://img-blog.csdnimg.cn/fac98ee374b84df2a749d43a9005c274.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查环境变量&lt;br&gt;将用户变量和系统变量中所有与node有关的全部删除。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：不要忘记检查path&lt;/strong&gt;&lt;br&gt;3. 检查系统盘，寻找这些文件并删除它们（根据您安装的版本，UAC设置和CPU架构，这些可能或可能不存在）：&lt;br&gt;C:\Users{User}\AppData\Roaming\npm（或%appdata%\npm）&lt;br&gt;C:\Users{User}\AppData\Roaming\npm-cache（或%appdata%\npm-cache）&lt;br&gt;4. 重启电脑&lt;br&gt;5. 黑窗口输入以下代码检查是否正确删除&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nvm -v&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;node -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;三、安装NVM和NodeJs&#34;&gt;&lt;a href=&#34;#三、安装NVM和NodeJs&#34; class=&#34;headerlink&#34; title=&#34;三、安装NVM和NodeJs&#34;&gt;&lt;/a&gt;三、安装NVM和NodeJs&lt;/h1&gt;&lt;h2 id=&#34;3-1-下载NVM安装包&#34;&gt;&lt;a href=&#34;#3-1-下载NVM安装包&#34; class=&#34;headerlink&#34; title=&#34;3.1 下载NVM安装包&#34;&gt;&lt;/a&gt;3.1 下载NVM安装包&lt;/h2&gt;&lt;p&gt;在GitHub上下载NVM的安装包。下载地址：&lt;a href=&#34;https://github.com/coreybutler/nvm-windows/releases%EF%BC%8C%E9%80%89%E6%8B%A9%E4%B8%8B%E8%BD%BDnvm-setup.zip%E3%80%82&#34;&gt;https://github.com/coreybutler/nvm-windows/releases，选择下载nvm-setup.zip。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注：本例中选用的是截至2022年4月12日最新版本的NVM安装包，版本号为1.1.9。 &lt;/p&gt;
&lt;h2 id=&#34;3-2-安装NVM&#34;&gt;&lt;a href=&#34;#3-2-安装NVM&#34; class=&#34;headerlink&#34; title=&#34;3.2 安装NVM&#34;&gt;&lt;/a&gt;3.2 安装NVM&lt;/h2&gt;&lt;p&gt;双击nvm-setup.exe文件，进行NVM的安装。&lt;br&gt;(1) 接受协议，下一步。&lt;br&gt;(2) 选择NVM的安装路径。可以按照个人习惯，自行选择安装路径。本例中，按照本人习惯，选择安装在D:\nvm\nvm下。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/40f0692c725e482ab9c1da5485a6671a.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;(3) 选择NodeJS的Symlink (符号链接)文件夹的位置，用于生成NodeJS的映射目录。本例中，按照本人习惯，选择D:\nodejs。&lt;/p&gt;
&lt;p&gt;注：&lt;strong&gt;安装前，需确保Symlink文件夹所在的路径不存在&lt;/strong&gt;，否则可能安装失败。&lt;/p&gt;
&lt;p&gt;(4) 点击安装，等待安装完成。&lt;/p&gt;
&lt;p&gt;(5) 配置环境变量。&lt;/p&gt;
&lt;p&gt;打开高级系统设置-&amp;gt;环境变量，可以发现，安装成功后，NVM已经自动帮我们配置了环境变量NVM_HOME和NVM_SYMLINK，并且配置了Path的值。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/183d4ee9c4ae4c07bb9bcac6b0cbe44a.png&#34;&gt;&lt;br&gt;因此，对于1.1.9版本的NVM，环境变量一般情况下无需手动配置。&lt;/p&gt;
&lt;p&gt;注：若使用的是免安装版的NVM，可以按照如下方式手动配置环境变量。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在用户变量(或系统变量)中，添加变量名NVM_HOME，变量的值为NVM所在的根路径(以本例为例，路径为：D:\Program Files\nvm)； 2. 在用户变量(或系统变量)中，添加变量名NVM_SYMLINK，变量的值为NodeJS的Symlink 文件夹的位置(以本例为例，路径为：D:\Program Files\nodejs)； 3. 在用户变量(或系统变量)的path当中添加两个值：%NVM_HOME%和%NVM_SYMLINK%。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(6) 配置NodeJS下载代理镜像（可选）&lt;/p&gt;
&lt;p&gt;安装完成后，可以在NVM安装根目录下的setting.txt文件中，配置NodeJS下载代理镜像，解决在线安装NodeJS时速度慢的问题。&lt;/p&gt;
&lt;p&gt;注：由于下载速度一般正常，并且可以使用离线安装的方式安装NodeJS，因此配置NodeJS下载镜像地址并不是必须的。由于篇幅有限，这里不再展开介绍。&lt;/p&gt;
&lt;p&gt;2.3 验证NVM是否安装成功&lt;/p&gt;
&lt;p&gt;安装完成后，打开命令行窗口，输入nvm -v，出现版本号即表示安装成功。&lt;/p&gt;
&lt;h2 id=&#34;3-3在NVM中安装NodeJS&#34;&gt;&lt;a href=&#34;#3-3在NVM中安装NodeJS&#34; class=&#34;headerlink&#34; title=&#34;3.3在NVM中安装NodeJS&#34;&gt;&lt;/a&gt;3.3在NVM中安装NodeJS&lt;/h2&gt;&lt;h3 id=&#34;3-3-1-nvm安装&#34;&gt;&lt;a href=&#34;#3-3-1-nvm安装&#34; class=&#34;headerlink&#34; title=&#34;3.3.1 nvm安装&#34;&gt;&lt;/a&gt;3.3.1 nvm安装&lt;/h3&gt;&lt;p&gt;首先，&lt;strong&gt;在使用NVM安装NodeJS前，需要以管理员身份打开命令行窗口。否则，将无法使用nvm use命令切换NPM版本&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(1) 首先，使用NVM命令 nvm list available，查看可安装的NodeJS版本。建议选择LTS中的版本进行安装（LTS，即Long Term Support，长期支持版本）&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/5328c8e473fb4d1e8aabf8dda996e2f7.png&#34;&gt;&lt;br&gt;注：若要查看完整的可安装版本列表，可访问官网：&lt;a href=&#34;https://nodejs.org/en/download/releases/&#34;&gt;https://nodejs.org/en/download/releases/&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;(2) 使用NVM命令nvm install，进行对应版本NodeJS的在线安装。&lt;/p&gt;
&lt;p&gt;示例 ：如需在线安装16.14.2版本的NodeJS，直接在命令行窗口输入：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nvm install 16.15.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;3-3-2离线安装NodeJs&#34;&gt;&lt;a href=&#34;#3-3-2离线安装NodeJs&#34; class=&#34;headerlink&#34; title=&#34;3.3.2离线安装NodeJs&#34;&gt;&lt;/a&gt;3.3.2离线安装NodeJs&lt;/h3&gt;&lt;p&gt;(1) 从官网下载指定版本NodeJS的免安装版离线安装包，下载地址：&lt;a href=&#34;https://nodejs.org/en/download/releases/&#34;&gt;https://nodejs.org/en/download/releases/&lt;/a&gt;。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/8b320edcd4704b52b69c44601d888c9b.png&#34;&gt;&lt;br&gt;上图中是Windows 10 64位操作系统，因此选择的是node-v17.6.0-win-x64.zip。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/07158792266645a7a36a6369e53a862c.png&#34;&gt;&lt;br&gt;(2) 将指定版本的NodeJS免安装版离线安装包，解压后放入到NVM安装路径的根目录下，即可完成离线安装。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/33c890bc335f4d729061879f8d380606.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-3-3-版本切换&#34;&gt;&lt;a href=&#34;#3-3-3-版本切换&#34; class=&#34;headerlink&#34; title=&#34;3.3.3 版本切换&#34;&gt;&lt;/a&gt;3.3.3 版本切换&lt;/h3&gt;&lt;p&gt;若已经成功安装了指定版本的NodeJS，只需要在命令行窗口执行npm use命令，切换对应版本的NodeJS即可。本例中，由于已经安装了16.14.2版本，因此可以执行以下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nvm use 17.6.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果执行之后是一串乱码，你需要用管理员身份打开窗口，重新输入上面的话。&lt;br&gt;若操作成功，将出现提示：Now using node v16.15.0 (64-bit)&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/9208dc58cda34afeba9e0daf03959913.png&#34;&gt;&lt;br&gt;如果能够以管理员身份，在命令行窗口成功执行以上命令，那么恭喜你，NVM+NodeJS已经成功安装完成！！！&lt;/p&gt;
&lt;h3 id=&#34;3-3-4-NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。&#34;&gt;&lt;a href=&#34;#3-3-4-NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。&#34; class=&#34;headerlink&#34; title=&#34;3.3.4 NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。&#34;&gt;&lt;/a&gt;3.3.4 NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。&lt;/h3&gt;&lt;h1 id=&#34;四、解决npm失效问题&#34;&gt;&lt;a href=&#34;#四、解决npm失效问题&#34; class=&#34;headerlink&#34; title=&#34;四、解决npm失效问题&#34;&gt;&lt;/a&gt;四、解决npm失效问题&lt;/h1&gt;&lt;p&gt;有的人可能到上一步为止问题就解决了。但是也会有一部分人像我一样，运行&lt;code&gt;npm -v&lt;/code&gt;报错&lt;code&gt;&#39;npm&#39; 不是内部或外部命令，也不是可运行的程序&lt;/code&gt;&lt;br&gt;我打开nvm文件夹去看了下，16.15.0里面这些都没有，node_modules文件夹也是空的。。。&lt;br&gt;正常应该是下图所示：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/0b378115b8b74c5998003b4e97a54bd5.png&#34;&gt;&lt;br&gt;&lt;strong&gt;解决办法是：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;从node官网找对应版本的zip压缩包下来，替换掉这个目录里的东西&lt;/strong&gt;，然后就完美解决了，node、npm都没问题，也可以自由切换版本。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;本文没有详写nodejs 如何指定全局安装路径和缓存路径。各位如果有需要，可自行查找。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;借阅大佬文章：&lt;a href=&#34;https://www.bilibili.com/read/cv16108420&#34;&gt;使用NVM安装NodeJS(原创 最全笔记)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="react.js" />
        <category term="npm" />
        <category term="node.js" />
        <updated>2022-09-19T12:59:57.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/zheng-que-li-jie-bi-bao-ji-bi-bao-shi-yong-chang-jing/</id>
        <title>正确理解闭包及闭包使用场景</title>
        <link rel="alternate" href="http://example.com/2022/09/19/zheng-que-li-jie-bi-bao-ji-bi-bao-shi-yong-chang-jing/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/00d7a66689c0458fbee6649a256abf82.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34; alt=&#34;请添加图片描述&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;一、闭包的特性&#34;&gt;&lt;a href=&#34;#一、闭包的特性&#34; class=&#34;headerlink&#34; title=&#34;一、闭包的特性&#34;&gt;&lt;/a&gt;一、闭包的特性&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;函数嵌套函数 &lt;/li&gt;
&lt;li&gt;函数内部可以引用外部的参数和变量 &lt;/li&gt;
&lt;li&gt;参数和变量不会被垃圾回收机制回收&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;二、闭包的定义及其优缺点&#34;&gt;&lt;a href=&#34;#二、闭包的定义及其优缺点&#34; class=&#34;headerlink&#34; title=&#34;二、闭包的定义及其优缺点&#34;&gt;&lt;/a&gt;二、闭包的定义及其优缺点&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;br&gt;闭包 是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;br&gt;闭包的缺点就是常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;存在闭包的原因：&lt;/strong&gt;&lt;br&gt;内部的函数存在外部作用域的引用就会导致闭包。&lt;/p&gt;
&lt;p&gt;闭包是javascript语言的一大特点，主要应用闭包场合主要是为了：设计私有的方法和变量。&lt;br&gt;一般函数执行完毕后，局部活动对象就被销毁，内存中仅仅保存全局作用域。但闭包的情况不同！&lt;/p&gt;
&lt;h1 id=&#34;三、嵌套函数的闭包&#34;&gt;&lt;a href=&#34;#三、嵌套函数的闭包&#34; class=&#34;headerlink&#34; title=&#34;三、嵌套函数的闭包&#34;&gt;&lt;/a&gt;三、嵌套函数的闭包&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function aaa() {  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var a = 1;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   alert(a++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  };  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}         &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var fun = aaa();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fun();// 1 执行后 a++，，然后a还在~  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fun();// 2   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fun = null;//a被回收！！ &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;闭包&lt;/strong&gt;会使变量始终保存在内存中，如果不当使用会增大内存消耗。&lt;/p&gt;
&lt;h1 id=&#34;四、javascript的垃圾回收原理&#34;&gt;&lt;a href=&#34;#四、javascript的垃圾回收原理&#34; class=&#34;headerlink&#34; title=&#34;四、javascript的垃圾回收原理&#34;&gt;&lt;/a&gt;四、javascript的垃圾回收原理&lt;/h1&gt;&lt;p&gt; 不同的编程语言管理内存的方式各不相同。一些高级编程语言的解释器或运行时嵌入了“垃圾回收器”，通过算法可自动的进行内存的分配与释放管理（比如 JavaScript、Java、C# 等）。另一些则寄希望于开发者自己手动地进行内存的分配与释放管理（比如 C/C++ 等）。&lt;br&gt;而JavaScript 是通过垃圾回收器来进行内存管理，其实现是基于标记-清除算法。而这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。其假定设置一个叫做根（root）的对象（在Javascript里，根是全局对象）。在标记过程，垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。标记完成后就进行清除过程。（可达内存被标记，其余的被当作垃圾回收。）&lt;/p&gt;
&lt;p&gt;（1）、在javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收；&lt;br&gt;（2）、如果两个对象互相引用，而不再被第3者所引用，那么这两个互相引用的对象也会被回收。&lt;/p&gt;
&lt;h1 id=&#34;五、使用闭包的好处&#34;&gt;&lt;a href=&#34;#五、使用闭包的好处&#34; class=&#34;headerlink&#34; title=&#34;五、使用闭包的好处&#34;&gt;&lt;/a&gt;五、使用闭包的好处&lt;/h1&gt;&lt;p&gt;那么使用闭包有什么好处呢？使用闭包的好处是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;希望一个变量长期驻扎在内存中 &lt;/li&gt;
&lt;li&gt;避免全局变量的污染 &lt;/li&gt;
&lt;li&gt;私有成员的存在&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;六、使用闭包的情况&#34;&gt;&lt;a href=&#34;#六、使用闭包的情况&#34; class=&#34;headerlink&#34; title=&#34;六、使用闭包的情况&#34;&gt;&lt;/a&gt;六、使用闭包的情况&lt;/h1&gt;&lt;p&gt;你只需要知道应用的两种情况即可——函数作为返回值，函数作为参数传递。&lt;/p&gt;
&lt;h2 id=&#34;6-1-return-函数作为返回值&#34;&gt;&lt;a href=&#34;#6-1-return-函数作为返回值&#34; class=&#34;headerlink&#34; title=&#34;6.1 return 函数作为返回值&#34;&gt;&lt;/a&gt;6.1 return 函数作为返回值&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function fn(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var max=10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return function bar(x) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(x&amp;gt; max){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var f1=fn();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f1(15);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上代码，bar函数作为返回值，赋值给f1变量。执行f1(15)时，用到了fn作用域下的max变量的值。至于如何跨作用域取值，可以参考上一节。&lt;/p&gt;
&lt;h2 id=&#34;6-2-函数作为参数被传递&#34;&gt;&lt;a href=&#34;#6-2-函数作为参数被传递&#34; class=&#34;headerlink&#34; title=&#34;6.2 函数作为参数被传递&#34;&gt;&lt;/a&gt;6.2 函数作为参数被传递&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var max =10,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fn = function(x){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	if(x &amp;gt; max){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(function (f) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var max =100;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  f(15);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})(fn);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上代码中，fn函数作为一个参数被传递进入另一个函数，赋值给f参数。执行f(15)时，max变量的取值是10，而不是100。&lt;/p&gt;
&lt;p&gt;讲自由变量跨作用域取值时，曾经强调过：要去创建这个函数的作用域取值，而不是“父作用域”。理解了这一点，以上两端代码中，自由变量如何取值应该比较简单。&lt;/p&gt;
&lt;h2 id=&#34;6-3-IIFE（自执行函数）&#34;&gt;&lt;a href=&#34;#6-3-IIFE（自执行函数）&#34; class=&#34;headerlink&#34; title=&#34;6.3 IIFE（自执行函数）&#34;&gt;&lt;/a&gt;6.3 IIFE（自执行函数）&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var n = &#39;林一一&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(function p(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* 输出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*   林一一&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;6-4-循环赋值&#34;&gt;&lt;a href=&#34;#6-4-循环赋值&#34; class=&#34;headerlink&#34; title=&#34;6.4 循环赋值&#34;&gt;&lt;/a&gt;6.4 循环赋值&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for(var i = 0; i&amp;lt;10; i++){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (function(j){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       setTimeout(function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(j)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }, 1000) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  })(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为存在闭包的原因上面能依次输出1~10，闭包形成了10个互不干扰的私有作用域。将外层的自执行函数去掉后就不存在外部作用域的引用了，输出的结果就是连续的 10。为什么会连续输出10，因为 JS 是单线程的遇到异步的代码不会先执行(会入栈)，等到同步的代码执行完 i++ 到 10时，异步代码才开始执行此时的 i=10 输出的都是 10。&lt;/p&gt;
&lt;h2 id=&#34;6-5-使用回调函数&#34;&gt;&lt;a href=&#34;#6-5-使用回调函数&#34; class=&#34;headerlink&#34; title=&#34;6.5 使用回调函数&#34;&gt;&lt;/a&gt;6.5 使用回调函数&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;window.name = &#39;林一一&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setTimeout(function timeHandler(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(window.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}, 100)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;七、内存泄露问题&#34;&gt;&lt;a href=&#34;#七、内存泄露问题&#34; class=&#34;headerlink&#34; title=&#34;七、内存泄露问题&#34;&gt;&lt;/a&gt;七、内存泄露问题&lt;/h1&gt;&lt;p&gt;什么是内存泄漏？&lt;br&gt;应用程序不再用到的内存，由于某些原因，没有及时释放，就叫做内存泄漏。&lt;/p&gt;
&lt;p&gt;由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁驻留在内存中的元素&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function closure(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var oDiv = document.getElementById(&#39;oDiv&#39;);//oDiv用完之后一直驻留在内存中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    oDiv.onclick = function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#39;oDiv.innerHTML&#39;);//这里用oDiv导致内存泄露&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;closure();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//最后应将oDiv解除引用来避免内存泄露&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function closure(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var oDiv = document.getElementById(&#39;oDiv&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var test = oDiv.innerHTML;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    oDiv.onclick = function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(test);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    oDiv = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;八、闭包的销毁&#34;&gt;&lt;a href=&#34;#八、闭包的销毁&#34; class=&#34;headerlink&#34; title=&#34;八、闭包的销毁&#34;&gt;&lt;/a&gt;八、闭包的销毁&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;const outerFn = () =&amp;gt; {
    let count = 0;
    const innerFn = () =&amp;gt; {
        console.log(&#39;count&#39;, ++count);
    }
    return innerFn;
}

let closure = outerFn(); // 创建第一个闭包
 closure();
closure();
closure = outerFn(); // 销毁第一个闭包，创建第二个闭包
closure();
closure();
closure = null; // 销毁闭包
// 输出结果：
// count 1
// count 2
// count 1
// count 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由上面的例子可以看出来，当第二次为closure赋值后，再次执行2次closure()时，count的结果并不会变成3，4，而是又变回了1，2。&lt;br&gt;这表示着，当第二次赋值的时候，第一个闭包就会被垃圾回收销毁掉，而第三次赋值为null时，则是把第二次的闭包也销毁了。&lt;/p&gt;
&lt;p&gt;简单的总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于闭包的销毁&lt;ul&gt;
&lt;li&gt;可在模块或应用结束后来进行空赋值处理，进行销毁，比如上面的：closure = null&lt;/li&gt;
&lt;li&gt;等待页面被关闭，才会被销毁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;至于为什么会要这么处理才会被销毁呢？具体的话可以网上找一下 javascript 回收机制，有兴趣的童鞋可以去了解了解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;九、新增&#34;&gt;&lt;a href=&#34;#九、新增&#34; class=&#34;headerlink&#34; title=&#34;九、新增&#34;&gt;&lt;/a&gt;九、新增&lt;/h1&gt;&lt;p&gt;很多初学者学了闭包后，可能也不懂到底在哪里才有用到，甚至不懂闭包到底有啥用。&lt;br&gt;其实你写的每一个js函数都是闭包，一个js函数的顶层作用域就是window对象，js的执行环境本身就是一个scope（浏览器的window/node的global），我们通常称之为全局作用域。每个函数，不论多深，都可以认为是全局scope的子作用域，可以理解为闭包。&lt;/p&gt;
&lt;h1 id=&#34;十、必刷题&#34;&gt;&lt;a href=&#34;#十、必刷题&#34; class=&#34;headerlink&#34; title=&#34;十、必刷题&#34;&gt;&lt;/a&gt;十、必刷题&lt;/h1&gt;&lt;p&gt;一、for 循环和闭包(号称必刷题)&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var data = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (var i = 0; i &amp;lt; 3; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  data[i] = function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[0]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[1]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[2]()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* 输出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 i 是全局下的 i，共用一个作用域，当函数被执行的时候这时的 i=3，导致输出的结构都是3。&lt;/p&gt;
&lt;p&gt;● 写法1：自执行函数和闭包(使用闭包改善上面的写法达到预期效果)&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var data = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (var i = 0; i &amp;lt; 3; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (function(j){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      setTimeout( data[j] = function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      }, 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    })(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[0]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[1]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[2]()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;● 写法2：使用 let&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var data = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (let i = 0; i &amp;lt; 3; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  data[i] = function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[0]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[1]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[2]()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="javascript" />
        <category term="前端" />
        <updated>2022-09-19T12:59:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/qian-hou-duan-fen-chi-kai-fa-zhi-quan-xian-pian-ji-vue-lu-you-shou-wei-next-next-to-replace-true-next-shuo-ming/</id>
        <title>前后端分离开发之权限篇及VUE路由守卫</title>
        <link rel="alternate" href="http://example.com/2022/09/19/qian-hou-duan-fen-chi-kai-fa-zhi-quan-xian-pian-ji-vue-lu-you-shou-wei-next-next-to-replace-true-next-shuo-ming/"/>
        <content type="html">&lt;p&gt;写项目过程中在权限部分遇到了不少有关&lt;code&gt;next()&lt;/code&gt;的问题，解决完之后发现对于权限篇的整体逻辑清晰不少，在这里记录一下。&lt;br&gt;首先是路由守卫，是不是感觉简简单单&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	to // 要去的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	from // 当前路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	next() // 放行的意思&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是在看别的项目时常常能看到&lt;code&gt;next(&#39;/logon&#39;)&lt;/code&gt;、&lt;code&gt;next(to)&lt;/code&gt; 或者 &lt;code&gt;next({ ...to, replace: true })&lt;/code&gt; 这又是啥意思呢&lt;/p&gt;
&lt;p&gt;其实在路由守卫中，只有&lt;code&gt;next()&lt;/code&gt;是放行，其他的诸如：&lt;code&gt;next(&#39;/logon&#39;)&lt;/code&gt;、&lt;code&gt;next(to) &lt;/code&gt;或者 &lt;code&gt;next({ ...to, replace: true })&lt;/code&gt;都不是放行，而是：中断当前导航，执行新的导航&lt;/p&gt;
&lt;h3 id=&#34;可以这么理解：&#34;&gt;&lt;a href=&#34;#可以这么理解：&#34; class=&#34;headerlink&#34; title=&#34;可以这么理解：&#34;&gt;&lt;/a&gt;&lt;strong&gt;可以这么理解：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;next()&lt;/code&gt;是放行，但是如果&lt;code&gt;next()&lt;/code&gt;里有参数的话，&lt;code&gt;next()&lt;/code&gt;就像被重载一样，就有了不同的功能。&lt;/p&gt;
&lt;p&gt;而对于上面说的中断当前导航，执行新的导航打个比方：&lt;/p&gt;
&lt;p&gt;现在我有一个守卫，在守卫中我使用&lt;code&gt;next(&#39;/logon&#39;)&lt;/code&gt;，肯定有同学认为是会直接跳转到&lt;code&gt;/logon&lt;/code&gt;路由：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  next(&#39;/logon&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而年轻人不讲武德，执行时需要这么看：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  beforeEach((&#39;/logon&#39;, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	 beforeEach((&#39;/logon&#39;, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	 	 beforeEach((&#39;/logon&#39;, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	 	 	beforeEac...  // 一直循环下去...... , 因为我们没有使用 next() 放行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	 }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果把这个守卫改一下，当我在地址栏输入&lt;code&gt;/home&lt;/code&gt;时&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if(to.path === &#39;/home&#39;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	next(&#39;/logon&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 如果要去的地方不是 /home ， 就放行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我本来要去&lt;code&gt;/home&lt;/code&gt;路由，因此执行了第一次 &lt;code&gt;beforeEach((to, from, next)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是这个路由守卫中判断了如果要去的地方是&lt;code&gt;&#39;/home&#39;&lt;/code&gt;，就执行&lt;code&gt;next(&#39;/logon&#39;)&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;所以想要访问&lt;code&gt;/home&lt;/code&gt;可以这么看&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   beforeEach((&#39;/logon&#39;, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next()  // 现在要去的地方不是 /home ， 因此放行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;正以为如此很多人在使用动态添加路由addRoutes-会遇到下面的情况：&#34;&gt;&lt;a href=&#34;#正以为如此很多人在使用动态添加路由addRoutes-会遇到下面的情况：&#34; class=&#34;headerlink&#34; title=&#34;正以为如此很多人在使用动态添加路由addRoutes()会遇到下面的情况：&#34;&gt;&lt;/a&gt;正以为如此很多人在使用动态添加路由addRoutes()会遇到下面的情况：&lt;/h4&gt;&lt;p&gt;在addRoutes()之后第一次访问被添加的路由会白屏，这是因为刚刚addRoutes()就立刻访问被添加的路由，然而此时addRoutes()没有执行结束，因而找不到刚刚被添加的路由导致白屏。因此需要从新访问一次路由才行。&lt;/p&gt;
&lt;p&gt;该如何解决这个问题 ?&lt;br&gt;此时就要使用&lt;code&gt;next({ ...to, replace: true })&lt;/code&gt;来确保&lt;code&gt;addRoutes()&lt;/code&gt;时动态添加的路由已经被完全加载上去。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;next({ ...to, replace: true })&lt;/code&gt;中的&lt;code&gt;replace: true&lt;/code&gt;只是一个设置信息，告诉VUE本次操作后，不能通过浏览器后退按钮，返回前一个路由。&lt;/p&gt;
&lt;p&gt;因此&lt;code&gt;next({ ...to, replace: true })&lt;/code&gt;可以写成&lt;code&gt;next({ ...to })&lt;/code&gt;，不过你应该不希望用户在&lt;code&gt;addRoutes()&lt;/code&gt;还没有完成的时候，可以点击浏览器回退按钮搞事情吧。&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;next({ ...to })&lt;/code&gt;的执行很简单，它会判断：&lt;/p&gt;
&lt;p&gt;如果参数to不能找到对应的路由的话，就再执行一次&lt;code&gt;beforeEach((to, from, next)&lt;/code&gt;直到其中的&lt;code&gt;next({ ...to})&lt;/code&gt;能找到对应的路由为止。&lt;/p&gt;
&lt;p&gt;也就是说此时&lt;code&gt;addRoutes()&lt;/code&gt;已经完成啦，找到对应的路由之后，接下来将执行前往对应路由的&lt;code&gt;beforeEach((to, from, next)&lt;/code&gt; ，因此需要用代码来判断这一次是否就是前往对应路由的&lt;code&gt;beforeEach((to, from, next)&lt;/code&gt;，如果是，就执行&lt;code&gt;next()&lt;/code&gt;放行。&lt;/p&gt;
&lt;p&gt;如果守卫中没有正确的放行出口的话，会一直&lt;code&gt;next({ ...to}&lt;/code&gt;)进入死循环 !!!&lt;/p&gt;
&lt;p&gt;因此你还需要确保在当&lt;code&gt;addRoutes()&lt;/code&gt;已经完成时，所执行到的这一次&lt;code&gt;beforeEach((to, from, next)&lt;/code&gt;中有一个正确的&lt;code&gt;next()&lt;/code&gt;方向出口。&lt;/p&gt;
&lt;h4 id=&#34;因此想实现动态添加路由的操作的话，代码应该是这样的：&#34;&gt;&lt;a href=&#34;#因此想实现动态添加路由的操作的话，代码应该是这样的：&#34; class=&#34;headerlink&#34; title=&#34;因此想实现动态添加路由的操作的话，代码应该是这样的：&#34;&gt;&lt;/a&gt;因此想实现动态添加路由的操作的话，代码应该是这样的：&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;router.beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; const token = sessionStorage.getItem(&#39;access_token&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; // 存在 token 说明已经登录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; if (token) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 登录过就不能访问登录界面，需要中断这一次路由守卫，执行下一次路由守卫，并且下一次守卫的to是主页&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if (to.path === &#39;/login&#39;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next({ path: &#39;/&#39; })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 保存在store中路由不为空则放行 (如果执行了刷新操作，则 store 里的路由为空，此时需要重新添加路由)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if (store.getters.getRoutes.length || to.name != null) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     //放行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     // 将路由添加到 store 中，用来标记已添加动态路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     store.commit(&#39;ADD_ROUTER&#39;, &#39;需要添加的路由&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     router.addRoutes(&#39;需要添加的路由&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     // 如果 addRoutes 并未完成，路由守卫会一层一层的执行执行，直到 addRoutes 完成，找到对应的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next({ ...to, replace: true })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 未登录时，注意 ：在这里也许你的项目不只有 logon 不需要登录 ，register 等其他不需要登录的页面也需要处理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if (to.path !== &#39;/logon&#39;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next({ path: &#39;/logon&#39; })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; }&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;核心的权限判断方法到这里就基本已经实现了。逻辑大致如此，至于源码，贴到下面~&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import router from &#39;./routers&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import store from &#39;@/store&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import NProgress from &#39;nprogress&#39;; // progress bar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &#39;nprogress/nprogress.css&#39;;// progress bar style&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import { getToken } from &#39;@/utils/auth&#39;; // getToken from cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import { buildMenus } from &#39;@api/menu&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import { filterAsyncRouter } from &#39;@/store/modules/permission&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NProgress.configure({ showSpinner: false });// NProgress Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const whiteList = [&#39;/login&#39;, &#39;/register&#39;, &#39;/about&#39;, &#39;/page/home&#39;];      // no redirect whitelist&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;router.beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    NProgress.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (getToken()) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 已登录且要跳转的页面是登录页&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (to.path === &#39;/login&#39;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next({ path: &#39;/&#39; });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            NProgress.done();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (judgeObj(store.getters.user)) { // 判断当前用户是否已拉取完user_info信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                store.dispatch(&#39;user/GetInfo&#39;).then(res =&amp;gt; { // 拉取user_info&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    // 动态路由，拉取菜单&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    loadMenus(next, to);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }).catch((err) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    console.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    store.dispatch(&#39;user/LogOut&#39;).then(() =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        location.reload(); // 为了重新实例化vue-router对象 避免bug&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                // 登录时未拉取 菜单，在此处拉取&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            } else if (store.getters.loadMenus) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                // 修改成false，防止死循环&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                store.dispatch(&#39;user/updateLoadMenus&#39;).then(res =&amp;gt; {});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                loadMenus(next, to);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                next();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /* has no token*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#39;no token&#39;, to.path);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next(`/page/home?redirect=${to.fullPath}`); // 否则全部重定向到首页&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            NProgress.done();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 判断是否为空对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * @param {*} obj&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * @returns&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function judgeObj(obj) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (obj &amp;amp;&amp;amp; Object.keys(obj).length === 0) return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export const loadMenus = (next, to) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 通过接口动态获取数据库保存的路由表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    buildMenus().then(res =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (res.data) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //filterAsyncRouter()  根据需求自己写的方法，遍历后台传来的路由字符串，转换为组件对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            const asyncRouter = filterAsyncRouter(res.data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            asyncRouter.push({ path: &#39;*&#39;, redirect: &#39;/404&#39;, hidden: true });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            store.dispatch(&#39;permission/GenerateRoutes&#39;, asyncRouter).then(() =&amp;gt; { // 存储路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                router.addRoutes(asyncRouter); // 动态添加可访问路由表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                next({ ...to, replace: true });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;router.afterEach(() =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    NProgress.done(); // finish progress bar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default router;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="javascript" />
        <category term="前端" />
        <category term="vue.js" />
        <updated>2022-09-19T12:59:28.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/vue3-zheng-he-mock-js-2022/</id>
        <title>vue3 整合 mock.js（2022）</title>
        <link rel="alternate" href="http://example.com/2022/09/19/vue3-zheng-he-mock-js-2022/"/>
        <content type="html">&lt;h2 id=&#34;第一步：安装&#34;&gt;&lt;a href=&#34;#第一步：安装&#34; class=&#34;headerlink&#34; title=&#34;第一步：安装&#34;&gt;&lt;/a&gt;第一步：安装&lt;/h2&gt;&lt;h3 id=&#34;1-安装mockjs&#34;&gt;&lt;a href=&#34;#1-安装mockjs&#34; class=&#34;headerlink&#34; title=&#34;1. 安装mockjs&#34;&gt;&lt;/a&gt;1. 安装mockjs&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 将mockjs 安装在 devDependencies 中，只能在生产环境中起作用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install mockjs -D&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-安装axios&#34;&gt;&lt;a href=&#34;#2-安装axios&#34; class=&#34;headerlink&#34; title=&#34;2. 安装axios&#34;&gt;&lt;/a&gt;2. 安装axios&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm i axios --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;第二步：编写请求文件user-ts&#34;&gt;&lt;a href=&#34;#第二步：编写请求文件user-ts&#34; class=&#34;headerlink&#34; title=&#34;第二步：编写请求文件user.ts&#34;&gt;&lt;/a&gt;第二步：编写请求文件user.ts&lt;/h2&gt;&lt;h3 id=&#34;1-在src下面新建mock文件夹，然后在其中创建-index-ts-文件&#34;&gt;&lt;a href=&#34;#1-在src下面新建mock文件夹，然后在其中创建-index-ts-文件&#34; class=&#34;headerlink&#34; title=&#34;1.在src下面新建mock文件夹，然后在其中创建 index.ts 文件&#34;&gt;&lt;/a&gt;1.在src下面新建mock文件夹，然后在其中创建 &lt;code&gt;index.ts&lt;/code&gt; 文件&lt;/h3&gt;&lt;p&gt;将所需的mock请求文件&lt;code&gt;home.ts&lt;/code&gt;引入，并在该页面做相关mock配置，具体配置可查看官网。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 首先引入Mock&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const Mock = require(&#39;mockjs&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 引入所有的mock文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;require(&#39;@/mock/api/home&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 设置拦截ajax请求的相应时间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// Mock.setup({&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//     timeout: &#39;200-600&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// });&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-在mock文件夹下建立api文件夹，mock请求文件在该页面写入。&#34;&gt;&lt;a href=&#34;#2-在mock文件夹下建立api文件夹，mock请求文件在该页面写入。&#34; class=&#34;headerlink&#34; title=&#34;2. 在mock文件夹下建立api文件夹，mock请求文件在该页面写入。&#34;&gt;&lt;/a&gt;2. 在mock文件夹下建立api文件夹，mock请求文件在该页面写入。&lt;/h3&gt;&lt;p&gt;以下示例文件为&lt;code&gt;home.ts&lt;/code&gt; 文件,包含增删改查操作，供大家参考。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const Mocks = require(&#34;mockjs&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const tipList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        id: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        title: &#34;冬&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        content: &#34;农历正月初五,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        id: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        title: &#34;每日计划&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        content: &#34;每日计划&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        id: 2,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        title: &#34;明日安排&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        content: &#34;明日安排&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        id: 3,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        title: &#34;会议总结&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        content: &#34;会议议题。出现了什么问题;信息分享&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        id: 4,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        title: &#34;电影清单&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        content: &#34;电影&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        id: 5,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        title: &#34;歌曲收藏&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        content: &#34;无感&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        id: 6,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        title: &#34;路程&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        content: &#34;路程&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }, {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        id: 7,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        title: &#34;联系电话&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        content: &#34;2343242342342343&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        id: 8,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        title: &#34;邮箱&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        content: &#34;24534534534@qq.com&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 获取所有便签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const article = Mocks.mock(&#34;/home/article&#34;, () =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return tipList&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 搜索便签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const selectA = Mocks.mock(&#34;/home/selectArticle&#34;, (ops: any) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const obj = eval(&#34;(&#34; + ops.body + &#34;)&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const list: any[] = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tipList.filter((item) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (item.title.indexOf(obj.val) &amp;gt;= 0) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            list.push(item)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return list;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 获取便签详情s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const details = Mocks.mock(&#34;/getDetail&#34;, (ops: any) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const obj = eval(&#34;(&#34; + ops.body + &#34;)&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (let i = 0; i &amp;lt; tipList.length; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (tipList[i].id == obj.id) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return tipList[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 修改便签内容&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const fex = Mocks.mock(&#34;/api/updateTip&#34;, (ops: any) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const obj = eval(&#34;(&#34; + ops.body + &#34;)&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tipList[obj.data.id].title = obj.data.title&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tipList[obj.data.id].content = obj.data.content&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 删除便签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const del = Mocks.mock(&#34;/api/deleteTip&#34;, (ops: any) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const obj = eval(&#34;(&#34; + ops.body + &#34;)&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (let i = 0; i &amp;lt; tipList.length; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (tipList[i].id == obj.id) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tipList.splice(i, 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 新增便签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const add = Mocks.mock(&#34;/api/addTip&#34;, (ops: any) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const obj = eval(&#34;(&#34; + ops.body + &#34;)&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    obj.data.id=tipList.length&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tipList.push(obj.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 返回模拟的数据及接口：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;module.exports = (router) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        router.get(&#39;/api/article&#39;, article),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        router.get(&#39;/home/selectArticle&#39;, selectA),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        router.get(&#39;/api/getDetail&#39;, details),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        router.post(&#39;/api/updateTip&#39;, fex),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        router.delete(&#39;/api/deleteTip&#39;, del),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        router.put(&#39;/api/addTip&#39;, add),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;3-写接口文件&#34;&gt;&lt;a href=&#34;#3-写接口文件&#34; class=&#34;headerlink&#34; title=&#34;3.写接口文件&#34;&gt;&lt;/a&gt;3.写接口文件&lt;/h3&gt;&lt;p&gt;在src 文件夹下新建 &lt;code&gt;api文件夹&lt;/code&gt; ，在文件夹下新建&lt;code&gt;home.ts 文件&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import axios from &#39;axios&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export function getArticles() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return axios.get(&#39;/home/article&#39;)  // mockjs返回的接口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 搜索便签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export function selectA(val) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return axios.get(&#39;/home/selectArticle&#39;, { data: val })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 详情&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export function getDetail(id) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return axios.get(&#39;/getDetail&#39;, { data: id })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 修改便签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export function fex(data) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return axios.post(&#39;/api/updateTip&#39;, { data: data })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 删除便签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export function del(id) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return axios.delete(&#39;/api/deleteTip&#39;, { data: id })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 新增便签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export function add(data) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return axios.put(&#39;/api/addTip&#39;, { data: data })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;4-在页面中引入&#34;&gt;&lt;a href=&#34;#4-在页面中引入&#34; class=&#34;headerlink&#34; title=&#34;4.在页面中引入&#34;&gt;&lt;/a&gt;4.在页面中引入&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import { getDetail } from &#34;../../api/home&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setup(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	getDetail(data).then((e) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (e != null) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          datas.title = e.data.title;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          datas.content = e.data.content;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          datas.title = &#34;&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          datas.content = &#34;&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;结果：&#34;&gt;&lt;a href=&#34;#结果：&#34; class=&#34;headerlink&#34; title=&#34;结果：&#34;&gt;&lt;/a&gt;结果：&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/35db179f75fa46e1a042fa8923ff8fbb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;/p&gt;
</content>
        <category term="前端" />
        <category term="vue.js" />
        <category term="开发语言" />
        <updated>2022-09-19T12:59:16.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/typescript-xue-xi-ri-ji/</id>
        <title>TypeScript学习日记</title>
        <link rel="alternate" href="http://example.com/2022/09/19/typescript-xue-xi-ri-ji/"/>
        <content type="html">&lt;p&gt;@[TOC]&lt;/p&gt;
&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://www.tslang.cn/docs/handbook/generics.html&#34;&gt;TypeScript&lt;/a&gt; 是微软开发的 JavaScript 的超集，TypeScript兼容JavaScript，可以载入JavaScript代码然后运行。TypeScript与JavaScript相比进步的地方 包括：加入注释，让编译器理解所支持的对象和函数，编译器会移除注释，不会增加开销；增加一个完整的类结构，使之更新是传统的面向对象语言&lt;/p&gt;
&lt;h1 id=&#34;为什么会有TypeScript？&#34;&gt;&lt;a href=&#34;#为什么会有TypeScript？&#34; class=&#34;headerlink&#34; title=&#34;为什么会有TypeScript？&#34;&gt;&lt;/a&gt;为什么会有TypeScript？&lt;/h1&gt;&lt;p&gt;JavaScript 只是一个脚本语言，并非设计用于开发大型 Web 应用，JavaScript 没有提供类和模块的概念，而 TypeScript 扩展了 JavaScript 实现了这些特性。TypeScript 主要特点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TypeScript 是微软推出的开源语言，使用 Apache 授权协议&lt;/li&gt;
&lt;li&gt;TypeScript 是 JavaScript 的超集.&lt;/li&gt;
&lt;li&gt;TypeScript 增加了可选类型、类和模块&lt;/li&gt;
&lt;li&gt;TypeScript 可编译成可读的、标准的 JavaScript&lt;/li&gt;
&lt;li&gt;TypeScript 支持开发大规模 JavaScript 应用&lt;/li&gt;
&lt;li&gt;TypeScript 设计用于开发大型应用，并保证编译后的 JavaScript 代码兼容性&lt;/li&gt;
&lt;li&gt;TypeScript 扩展了 JavaScript 的语法，因此已有的 JavaScript 代码可直接与 TypeScript 一起运行无需更改&lt;/li&gt;
&lt;li&gt;TypeScript 文件扩展名是 ts，而 TypeScript 编译器会编译成 js 文件&lt;/li&gt;
&lt;li&gt;TypeScript 语法与 JScript .NET 相同&lt;/li&gt;
&lt;li&gt;TypeScript 易学易于理解&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;JavaScript-与-TypeScript-的区别&#34;&gt;&lt;a href=&#34;#JavaScript-与-TypeScript-的区别&#34; class=&#34;headerlink&#34; title=&#34;JavaScript 与 TypeScript 的区别&#34;&gt;&lt;/a&gt;JavaScript 与 TypeScript 的区别&lt;/h1&gt;&lt;p&gt;TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改，TypeScript 通过类型注解提供编译时的静态类型检查。TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译。&lt;/p&gt;
&lt;h1 id=&#34;TypeScript优势&#34;&gt;&lt;a href=&#34;#TypeScript优势&#34; class=&#34;headerlink&#34; title=&#34;TypeScript优势&#34;&gt;&lt;/a&gt;TypeScript优势&lt;/h1&gt;&lt;p&gt;解决痛点&lt;br&gt;TypeScript的设计解决了JavaScript的“痛点”：弱类型和没有命名空间；这导致程序很难模块化，不适合开发大型程序。&lt;/p&gt;
&lt;p&gt;语法提示&lt;br&gt;编写程序时，编辑器将提供精准的语法提示，以帮助大家更方便地实践面向对象的编程。&lt;/p&gt;
&lt;p&gt;容易上手&lt;br&gt;TypeScript的一个设计亮点，是它并没有抛弃JavaScript的语法另起炉灶，而是做成了JavaScript的超集，任何合法的JavaScript的语句在TypeScript下都是合法的，且沿用了JavaScript的使用习惯和惯例，可以说学习成本很低。&lt;/p&gt;
&lt;h1 id=&#34;一、TypeScript安装、编译&#34;&gt;&lt;a href=&#34;#一、TypeScript安装、编译&#34; class=&#34;headerlink&#34; title=&#34;一、TypeScript安装、编译&#34;&gt;&lt;/a&gt;一、TypeScript安装、编译&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install -g typescript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cnpm install -g typescript &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;yarm global add typescript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看版本：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tsc -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tsc helloworld.ts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：如果电脑上没有安装过yarn,请记得先安装&lt;/p&gt;
&lt;h1 id=&#34;二、配置TS开发工具-Vscode自动编译-ts文件&#34;&gt;&lt;a href=&#34;#二、配置TS开发工具-Vscode自动编译-ts文件&#34; class=&#34;headerlink&#34; title=&#34;二、配置TS开发工具 Vscode自动编译 .ts文件&#34;&gt;&lt;/a&gt;二、配置TS开发工具 Vscode自动编译 .ts文件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;在目录所在位置打开终端cmd&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tsc --init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
生成配置文件&lt;/li&gt;
&lt;li&gt; 然后取消生成的 &lt;code&gt;tsconfig.json&lt;/code&gt; 中的  “outDir”，改为如下：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/7dc0af0fd25c44eca7a2fac0da69a343.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/li&gt;
&lt;li&gt;点击终端，选择typescript.选择监视选项&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/f818b0fee1794e97925f02dbaf391948.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/li&gt;
&lt;li&gt;可以开始正常敲代码&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;三、TypeScript数据类型及理解&#34;&gt;&lt;a href=&#34;#三、TypeScript数据类型及理解&#34; class=&#34;headerlink&#34; title=&#34;三、TypeScript数据类型及理解&#34;&gt;&lt;/a&gt;三、TypeScript数据类型及理解&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;布尔类型（boolean）&lt;/li&gt;
&lt;li&gt;数字类型（number）&lt;/li&gt;
&lt;li&gt;字符串类型（string）&lt;/li&gt;
&lt;li&gt;数组类型（array）&lt;/li&gt;
&lt;li&gt;元组类型（tuple）&lt;/li&gt;
&lt;li&gt;枚举类型（enum）&lt;/li&gt;
&lt;li&gt;任意类型（any）&lt;/li&gt;
&lt;li&gt;null 和 undefined（是never 数据类型的子类型）&lt;/li&gt;
&lt;li&gt;void 类型&lt;/li&gt;
&lt;li&gt;never 类型：&lt;br&gt;a. 表示的是那些永不存在的值的类型，never类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是never的子类型或可以赋值给never 类型（除了never本身之外）。 即使 any也不可以赋值给never。&lt;br&gt;b. 是其他类型（包括 null 和 undefined）的子类型，代表从不会出现的值。&lt;br&gt;c. 返回never的函数必须存在无法达到的终点 &lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;四、函数&#34;&gt;&lt;a href=&#34;#四、函数&#34; class=&#34;headerlink&#34; title=&#34;四、函数&#34;&gt;&lt;/a&gt;四、函数&lt;/h1&gt;&lt;h2 id=&#34;函数声明法&#34;&gt;&lt;a href=&#34;#函数声明法&#34; class=&#34;headerlink&#34; title=&#34;函数声明法&#34;&gt;&lt;/a&gt;函数声明法&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function run():string{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return &#39;run&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;匿名函数法&#34;&gt;&lt;a href=&#34;#匿名函数法&#34; class=&#34;headerlink&#34; title=&#34;匿名函数法&#34;&gt;&lt;/a&gt;匿名函数法&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let fun2=function():number{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(fun2());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let getInfo1=function (name:string,age:number):string {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return `${name}--${age}`&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(getInfo1(&#39;zhangdan&#39;,3434))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;没有返回值&#34;&gt;&lt;a href=&#34;#没有返回值&#34; class=&#34;headerlink&#34; title=&#34;没有返回值&#34;&gt;&lt;/a&gt;没有返回值&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function getInfo3(name:string,age:number):void {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(`${name}--${age}`) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;getInfo3(&#39;lixiaolong&#39;,3434)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;方法传参—可选参数&#34;&gt;&lt;a href=&#34;#方法传参—可选参数&#34; class=&#34;headerlink&#34; title=&#34;方法传参—可选参数&#34;&gt;&lt;/a&gt;方法传参—可选参数&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注意：可选参数必须放在必须参数的后面&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// es5中的实参和形参可以不一样，但是ts中必须一样，否则就需要配置可选参数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function getInfo4(name?:string,age?:number):string {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return `${name}--${age}`&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(getInfo4(&#39;3453&#39;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(getInfo4(&#39;&#39;,34))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;方法传参—设置默认参数&#34;&gt;&lt;a href=&#34;#方法传参—设置默认参数&#34; class=&#34;headerlink&#34; title=&#34;方法传参—设置默认参数&#34;&gt;&lt;/a&gt;方法传参—设置默认参数&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;用户可以不传递这个参数或传递的值是undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;注意：与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined值来获得默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function getInfo5(name?:string,age:number=20):string {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return `${name}--${age}`&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(getInfo5(&#39;3453453&#39;,))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;剩余传参—即-es6-中的-…-语法&#34;&gt;&lt;a href=&#34;#剩余传参—即-es6-中的-…-语法&#34; class=&#34;headerlink&#34; title=&#34;剩余传参—即 es6 中的 … 语法&#34;&gt;&lt;/a&gt;剩余传参—即 es6 中的 … 语法&lt;/h2&gt;&lt;h2 id=&#34;函数重载&#34;&gt;&lt;a href=&#34;#函数重载&#34; class=&#34;headerlink&#34; title=&#34;函数重载&#34;&gt;&lt;/a&gt;函数重载&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// Java中的重载是指两个或两个以上同名函数，但是他们的参数不一样，这时会出现函数重载的情况&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// ts为了兼容es5 es6,重载方法和Java有区别&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 在es5中，如果出现同名函数，则下面的会替换上面的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// function name(params:any):any {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// function name(params:any,config:any) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// ts中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function getInfo6(names:string):string;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function getInfo6(age:number):string;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function getInfo6(str:any):any{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (typeof str===&#39;string&#39;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return names&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }else{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return str&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(getInfo6(20))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;箭头函数—和-es6-一样&#34;&gt;&lt;a href=&#34;#箭头函数—和-es6-一样&#34; class=&#34;headerlink&#34; title=&#34;箭头函数—和 es6 一样&#34;&gt;&lt;/a&gt;箭头函数—和 es6 一样&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;setTimeout(() =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    alert(3333)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}, 1000);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;五、类&#34;&gt;&lt;a href=&#34;#五、类&#34; class=&#34;headerlink&#34; title=&#34;五、类&#34;&gt;&lt;/a&gt;五、类&lt;/h1&gt;&lt;h2 id=&#34;基本语法&#34;&gt;&lt;a href=&#34;#基本语法&#34; class=&#34;headerlink&#34; title=&#34;基本语法&#34;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 通过class创建类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Animal {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 类的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    name: string;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 类的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(name: string) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 类的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sayHello():void{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#34;hello animal:&#34;+this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 实例化类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var tom = new Animal(&#34;tom&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tom.sayHello();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;类的继承&#34;&gt;&lt;a href=&#34;#类的继承&#34; class=&#34;headerlink&#34; title=&#34;类的继承&#34;&gt;&lt;/a&gt;类的继承&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 通过class创建类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Animal {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 类的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    name: string;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 类的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(name: string) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 类的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sayHello(): void {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#34;hello animal:&#34; + this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 继承Animal&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Cat extends Animal {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 重写方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sayHello(): void {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#34;hello cat:&#34; + this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Dog extends Animal {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sayHello(): void {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#34;hello dog:&#34; + this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;修饰符&#34;&gt;&lt;a href=&#34;#修饰符&#34; class=&#34;headerlink&#34; title=&#34;修饰符&#34;&gt;&lt;/a&gt;修饰符&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Animal {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    private name: string; // 这里把name修饰符改为private&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(name: string) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sayHello(): void {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#34;hello animal:&#34; + this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Cat extends Animal {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sayHello(): void {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#34;hello cat:&#34; + this.name); //这里会报错，因为无法引用父类private修饰的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Dog extends Animal {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sayHello(): void {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#34;hello dog:&#34; + this.name); //这里会报错，因为无法引用父类private修饰的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Get-Set访问器&#34;&gt;&lt;a href=&#34;#Get-Set访问器&#34; class=&#34;headerlink&#34; title=&#34;Get/Set访问器&#34;&gt;&lt;/a&gt;Get/Set访问器&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Animal {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    private name: string;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    get name(): string { //通过get和set解决子类不能引用父类private修饰的属性的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return this.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    set name(name: string) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(name: string) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sayHello(): void {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#34;hello animal:&#34; + this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Cat extends Animal {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sayHello(): void {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#34;hello cat:&#34; + this.name); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Dog extends Animal {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sayHello(): void {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#34;hello dog:&#34; + this.name); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;静态属性&#34;&gt;&lt;a href=&#34;#静态属性&#34; class=&#34;headerlink&#34; title=&#34;静态属性&#34;&gt;&lt;/a&gt;静态属性&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Table {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    static width: Number = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    static height: Number = 50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var width: Number = Table.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;六、接口&#34;&gt;&lt;a href=&#34;#六、接口&#34; class=&#34;headerlink&#34; title=&#34;六、接口&#34;&gt;&lt;/a&gt;六、接口&lt;/h1&gt;&lt;h2 id=&#34;基本语法-1&#34;&gt;&lt;a href=&#34;#基本语法-1&#34; class=&#34;headerlink&#34; title=&#34;基本语法&#34;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;interface Graphic {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    width: Number;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    height: Number;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Square implements Graphic {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    width: Number;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    height: Number;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.width = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.height = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(width: Number, height: Number) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.height = height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.width = width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;继承接口&#34;&gt;&lt;a href=&#34;#继承接口&#34; class=&#34;headerlink&#34; title=&#34;继承接口&#34;&gt;&lt;/a&gt;继承接口&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;interface Graphic {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    width: Number;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    height: Number;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;interface PenStroke {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    penWidth: Number;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;interface Square extends Graphic, PenStroke {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sideLength: number;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;七、泛型&#34;&gt;&lt;a href=&#34;#七、泛型&#34; class=&#34;headerlink&#34; title=&#34;七、泛型&#34;&gt;&lt;/a&gt;七、泛型&lt;/h1&gt;&lt;h2 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。&lt;br&gt;在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。&lt;br&gt;通俗理解：泛型就是解决类、接口、方法的复用性以及对不特定数据类型的支持&lt;/p&gt;
&lt;h2 id=&#34;泛型函数&#34;&gt;&lt;a href=&#34;#泛型函数&#34; class=&#34;headerlink&#34; title=&#34;泛型函数&#34;&gt;&lt;/a&gt;泛型函数&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function getDate&amp;lt;T&amp;gt;(value: T): T {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(&#39;3453453453&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;getDate&amp;lt;number&amp;gt;(345345);   // 3453453453&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;getDate&amp;lt;string&amp;gt;(&#39;String&#39;)  // 3453453453&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function getDate1&amp;lt;T&amp;gt;(value: T): any {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(value);  // 345345&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return value + &#39;345345345&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(getDate1&amp;lt;number&amp;gt;(345345));   // 345345345345345&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;泛型类&#34;&gt;&lt;a href=&#34;#泛型类&#34; class=&#34;headerlink&#34; title=&#34;泛型类&#34;&gt;&lt;/a&gt;泛型类&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Minclass&amp;lt;T&amp;gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public list: T[] = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    add(value: T) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.list.push(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    min(): T {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let minest = this.list[0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (let i = 0; i &amp;lt; this.list.length; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (minest &amp;gt; this.list[i]) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                minest = this.list[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return minest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let ert = new Minclass&amp;lt;number&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ert.add(34)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ert.add(89)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ert.add(56)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ert.add(67)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ert.add(23)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ert.add(16)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ert.add(79)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(ert.min())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let strs = new Minclass&amp;lt;string&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;strs.add(&#39;bc&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;strs.add(&#39;dfgd&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;strs.add(&#39;erf&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;strs.add(&#39;zdf&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;strs.add(&#39;abcd&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(strs.min())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;泛型接口&#34;&gt;&lt;a href=&#34;#泛型接口&#34; class=&#34;headerlink&#34; title=&#34;泛型接口&#34;&gt;&lt;/a&gt;泛型接口&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 写法一&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;interface configFn {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;T&amp;gt;(confg: T): T&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let getData: configFn = function &amp;lt;T&amp;gt;(value: T): T {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;getData&amp;lt;number&amp;gt;(34)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 写法二&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;interface config4&amp;lt;T&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (config: T): T&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function getData2&amp;lt;T&amp;gt;(value: T): T {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let test: config4&amp;lt;string&amp;gt; = getData2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;test(&#39;sdfsdf&#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <category term="前端" />
        <category term="typescript" />
        <updated>2022-09-19T12:59:02.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/javascript-chang-yong-ba-chong-ji-cheng-fang-shi/</id>
        <title>JavaScript常用八种继承方式</title>
        <link rel="alternate" href="http://example.com/2022/09/19/javascript-chang-yong-ba-chong-ji-cheng-fang-shi/"/>
        <content type="html">&lt;h1 id=&#34;原型链继承&#34;&gt;&lt;a href=&#34;#原型链继承&#34; class=&#34;headerlink&#34; title=&#34;原型链继承&#34;&gt;&lt;/a&gt;原型链继承&lt;/h1&gt;&lt;p&gt;构造函数、原型和实例之间的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个原型对象的指针。&lt;br&gt;继承的本质就是复制，即重写原型对象，代之以一个新类型的实例。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function SuperType() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.property = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SuperType.prototype.getSuperValue = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.property;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.subproperty = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 这里是关键，创建SuperType的实例，并将该实例赋值给SubType.prototype&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype = new SuperType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.getSubValue = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.subproperty;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(instance.getSuperValue()); // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型链方案存在的缺点：多个实例对引用类型的操作会被篡改。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function SuperType(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.colors = [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType(){}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype = new SuperType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.colors.push(&#34;black&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance1.colors); //&#34;red,blue,green,black&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance2.colors); //&#34;red,blue,green,black&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;借用构造函数继承-借调）&#34;&gt;&lt;a href=&#34;#借用构造函数继承-借调）&#34; class=&#34;headerlink&#34; title=&#34;借用构造函数继承(借调）&#34;&gt;&lt;/a&gt;借用构造函数继承(借调）&lt;/h1&gt;&lt;p&gt;借调：借用构造函数调用冒充继承，借调实现的继承，不是真正的继承，只是借用构造函数中的属性或方法。&lt;br&gt;即：使用父类的构造函数来增强子类实例，等同于复制父类的实例给子类（不使用原型）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function  SuperType(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.color=[&#34;red&#34;,&#34;green&#34;,&#34;blue&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function  SubType(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //继承自SuperType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SuperType.call(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.color.push(&#34;black&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance1.color);//&#34;red,green,blue,black&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance2.color);//&#34;red,green,blue&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;核心代码是&lt;code&gt;SuperType.call(this)&lt;/code&gt;，创建子类实例时调用&lt;code&gt;SuperType&lt;/code&gt;构造函数，于是&lt;code&gt;SubType&lt;/code&gt;的每个实例都会将SuperType中的属性复制一份。&lt;br&gt;缺点：&lt;br&gt;● 只能继承父类的实例属性和方法，不能继承原型属性/方法&lt;br&gt;● 无法实现复用，每个子类都有父类实例函数的副本，影响性能&lt;/p&gt;
&lt;h1 id=&#34;组合继承&#34;&gt;&lt;a href=&#34;#组合继承&#34; class=&#34;headerlink&#34; title=&#34;组合继承&#34;&gt;&lt;/a&gt;组合继承&lt;/h1&gt;&lt;p&gt;组合上述两种方法就是组合继承。用原型链实现对原型属性和方法的继承，用借用构造函数技术来实现实例属性的继承。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function SuperType(name){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.colors = [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SuperType.prototype.sayName = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType(name, age){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 继承属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 第二次调用SuperType()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  SuperType.call(this, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 继承方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 构建原型链&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 第一次调用SuperType()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype = new SuperType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 重写SubType.prototype的constructor属性，指向自己的构造函数SubType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.constructor = SubType; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.sayAge = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    alert(this.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType(&#34;Nicholas&#34;, 29);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.colors.push(&#34;black&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance1.colors); //&#34;red,blue,green,black&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.sayName(); //&#34;Nicholas&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.sayAge(); //29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType(&#34;Greg&#34;, 27);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance2.colors); //&#34;red,blue,green&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance2.sayName(); //&#34;Greg&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance2.sayAge(); //27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;缺点：&lt;br&gt;● 第一次调用&lt;code&gt;SuperType()&lt;/code&gt;：给&lt;code&gt;SubType.prototype&lt;/code&gt;写入两个属性name，color。&lt;br&gt;● 第二次调用&lt;code&gt;SuperType()&lt;/code&gt;：给&lt;code&gt;instance1&lt;/code&gt;写入两个属性name，color。&lt;br&gt;实例对象&lt;code&gt;instance1&lt;/code&gt;上的两个属性就屏蔽了其原型对象SubType.prototype的两个同名属性。所以，组合模式的缺点就是在使用子类创建实例对象时，其原型中会存在两份相同的属性/方法。&lt;/p&gt;
&lt;h1 id=&#34;原型式继承&#34;&gt;&lt;a href=&#34;#原型式继承&#34; class=&#34;headerlink&#34; title=&#34;原型式继承&#34;&gt;&lt;/a&gt;原型式继承&lt;/h1&gt;&lt;p&gt;原理：类似Object.create，用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象，结果是将子对象的__proto__指向父对象&lt;br&gt;1.利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function object(obj){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  function F(){}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  F.prototype = obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return new F();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;object()对传入其中的对象执行了一次&lt;code&gt;浅复制&lt;/code&gt;，将构造函数F的原型直接指向传入的对象。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var person = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#34;Nicholas&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  friends: [&#34;Shelby&#34;, &#34;Court&#34;, &#34;Van&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var anotherPerson = object(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.name = &#34;Greg&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.friends.push(&#34;Rob&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var yetAnotherPerson = object(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.name = &#34;Linda&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.friends.push(&#34;Barbie&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(person.friends);   //&#34;Shelby,Court,Van,Rob,Barbie&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.或者直接利用Object.create():&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let person = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#34;Nicholas&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  friends: [&#34;Shelby&#34;, &#34;Court&#34;, &#34;Van&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let anotherPerson = Object.create(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.name = &#34;Greg&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.friends.push(&#34;Rob&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let yetAnotherPerson = Object.create(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.name = &#34;Linda&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.friends.push(&#34;Barbie&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(person.friends);   //&#34;Shelby,Court,Van,Rob,Barbie&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;优点：&lt;br&gt;● 父类方法可以复用&lt;br&gt;缺点：&lt;br&gt;● 原型链继承多个实例的引用类型属性指向相同，存在篡改的可能&lt;br&gt;● 子类构建实例时不能向父类传递参数&lt;/p&gt;
&lt;h1 id=&#34;寄生式继承&#34;&gt;&lt;a href=&#34;#寄生式继承&#34; class=&#34;headerlink&#34; title=&#34;寄生式继承&#34;&gt;&lt;/a&gt;寄生式继承&lt;/h1&gt;&lt;p&gt;核心：在原型式继承的基础上，增强对象，返回构造函数&lt;br&gt;即：使用原型式继承获得一份目标对象的浅拷贝，然后增强了这个浅拷贝的能力。&lt;br&gt;优缺点其实和原型式继承一样，寄生式继承说白了就是能在拷贝来的对象上加点方法，也就是所谓增强能力。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function object(obj) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  function F() { }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  F.prototype = obj&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return new F()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function createAnother(original){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var clone = object(original); // 通过调用 object() 函数创建一个新对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  clone.sayHi = function(){  // 以某种方式来增强对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    alert(&#34;hi&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return clone; // 返回这个对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数的主要作用是为构造函数新增属性和方法，以增强函数&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var person = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#34;Nicholas&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  friends: [&#34;Shelby&#34;, &#34;Court&#34;, &#34;Van&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var anotherPerson = createAnother(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.sayHi(); //&#34;hi&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;缺点（同原型式继承）：&lt;br&gt;● 原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。&lt;br&gt;● 无法传递参数&lt;/p&gt;
&lt;h1 id=&#34;寄生组合式继承&#34;&gt;&lt;a href=&#34;#寄生组合式继承&#34; class=&#34;headerlink&#34; title=&#34;寄生组合式继承&#34;&gt;&lt;/a&gt;寄生组合式继承&lt;/h1&gt;&lt;p&gt;结合借用构造函数传递参数和寄生模式实现继承&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function inheritPrototype(subType, superType){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 创建对象，创建父类原型的一个副本&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var prototype = Object.create(superType.prototype); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 增强对象，弥补因重写原型而失去的默认的constructor 属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  prototype.constructor = subType;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 指定对象，将新创建的对象赋值给子类的原型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  subType.prototype = prototype;                      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 父类初始化实例属性和原型属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SuperType(name){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.colors = [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SuperType.prototype.sayName = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 借用构造函数传递增强子类实例属性（支持传参和避免篡改）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType(name, age){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  SuperType.call(this, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 将父类原型指向子类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;inheritPrototype(SubType, SuperType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 新增子类原型属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.sayAge = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  alert(this.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType(&#34;xyc&#34;, 23);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType(&#34;lxy&#34;, 23);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.colors.push(&#34;2&#34;); // [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;, &#34;2&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance2.colors.push(&#34;3&#34;); // [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;, &#34;3&#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子的高效率体现在它只调用了一次&lt;code&gt;SuperType&lt;/code&gt; 构造函数，并且因此避免了在&lt;code&gt;SubType.prototype&lt;/code&gt; 上创建不必要的、多余的属性。于此同时，原型链还能保持不变；因此，还能够正常使用&lt;code&gt;instanceof &lt;/code&gt;和&lt;code&gt;isPrototypeOf()&lt;/code&gt;&lt;br&gt;这是最成熟的方法，也是现在库实现的方法&lt;/p&gt;
&lt;h1 id=&#34;混入方式继承多个对象&#34;&gt;&lt;a href=&#34;#混入方式继承多个对象&#34; class=&#34;headerlink&#34; title=&#34;混入方式继承多个对象&#34;&gt;&lt;/a&gt;混入方式继承多个对象&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function MyClass() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     SuperClass.call(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     OtherSuperClass.call(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 继承一个类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyClass.prototype = Object.create(SuperClass.prototype);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 混合其它&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Object.assign(MyClass.prototype, OtherSuperClass.prototype);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 重新指定constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyClass.prototype.constructor = MyClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyClass.prototype.myMethod = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     // do something&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Object.assign&lt;/code&gt;会把 &lt;code&gt;OtherSuperClass&lt;/code&gt;原型上的函数拷贝到 &lt;code&gt;MyClass&lt;/code&gt;原型上，使 MyClass 的所有实例都可用 OtherSuperClass 的方法。&lt;/p&gt;
&lt;h1 id=&#34;ES6类继承extends&#34;&gt;&lt;a href=&#34;#ES6类继承extends&#34; class=&#34;headerlink&#34; title=&#34;ES6类继承extends&#34;&gt;&lt;/a&gt;ES6类继承extends&lt;/h1&gt;&lt;p&gt;&lt;code&gt;extends&lt;/code&gt;关键字主要用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。其中&lt;code&gt;constructor&lt;/code&gt;表示构造函数，一个类中只能有一个构造函数，有多个会报出&lt;code&gt;SyntaxError&lt;/code&gt;错误,如果没有显式指定构造方法，则会添加默认的&lt;br&gt;&lt;code&gt;constructor&lt;/code&gt;方法，使用例子如下。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Rectangle {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(height, width) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.height = height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.width = width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // Getter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    get area() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return this.calcArea()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // Method&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    calcArea() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return this.height * this.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const rectangle = new Rectangle(10, 20);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(rectangle.area);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 输出 200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-----------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 继承&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Square extends Rectangle {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  constructor(length) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    super(length, length);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 如果子类中存在构造函数，则需要在使用“this”之前首先调用 super()。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.name = &#39;Square&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  get area() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.height * this.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const square = new Square(10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(square.area);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 输出 100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;extends&lt;/code&gt;继承的核心代码如下，其实现和上述的寄生组合式继承方式一样&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function _inherits(subType, superType) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 创建对象，创建父类原型的一个副本&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 增强对象，弥补因重写原型而失去的默认的constructor 属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 指定对象，将新创建的对象赋值给子类的原型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    subType.prototype = Object.create(superType &amp;amp;&amp;amp; superType.prototype, {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        constructor: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            value: subType,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            enumerable: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            writable: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            configurable: true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (superType) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Object.setPrototypeOf &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ? Object.setPrototypeOf(subType, superType) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            : subType.__proto__ = superType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="javascript" />
        <category term="原型模式" />
        <category term="前端" />
        <updated>2022-09-19T12:58:50.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/javascript-yuan-xing-yuan-xing-lian-ji-cheng/</id>
        <title>javaScript 原型、原型链、继承</title>
        <link rel="alternate" href="http://example.com/2022/09/19/javascript-yuan-xing-yuan-xing-lian-ji-cheng/"/>
        <content type="html">&lt;h1 id=&#34;一、prototype&#34;&gt;&lt;a href=&#34;#一、prototype&#34; class=&#34;headerlink&#34; title=&#34;一、prototype&#34;&gt;&lt;/a&gt;一、prototype&lt;/h1&gt;&lt;p&gt;在JavaScript中，每一个函数都有一个prototype属性，这个属性指向函数的原型对象。&lt;br&gt;例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person(age){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.age=age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Person.prototype.name=&#39;张三&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;val per1= new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;val per2= new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(per1.name); //张三&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(per2.name); //张三&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述例子中，函数Person的prototype指向了一个对象，而这个对象正是调用构造函数时创建的原型实例，即per1和 per2的原型。&lt;/p&gt;
&lt;p&gt;原型的概念：每一个JavaScript对象（除null外）在创建的时候，就会与之关联另一个对象，这个对象就是我们所说的原型。每一个对象都会从原型中”继承”属性。&lt;/p&gt;
&lt;p&gt;用一张图来表示构造函数与实例原型之间的关系：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/42579455dc1d4a6d95f43c2222ad7393.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;二、proto&#34;&gt;&lt;a href=&#34;#二、proto&#34; class=&#34;headerlink&#34; title=&#34;二、proto&#34;&gt;&lt;/a&gt;二、&lt;em&gt;proto&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;这是每个对象（除null外）都会有的属性。这个属性指向该对象的原型。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;val per=new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(per._proto_ === Person.prototype); //true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/d63129ac691e455b9c2776dc1f463c49.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;三、constructor&#34;&gt;&lt;a href=&#34;#三、constructor&#34; class=&#34;headerlink&#34; title=&#34;三、constructor&#34;&gt;&lt;/a&gt;三、constructor&lt;/h1&gt;&lt;p&gt;每个原型都有一个constructor属性，指向该关联的构造函数。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(Person===Person.prototype.constructor)  //true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/68d6c22595e645269f2a4cce95ccde12.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var person = new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(person.__proto__ == Person.prototype) // true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(Person.prototype.constructor == Person) // true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 顺便学习一个ES5的方法,可以获得对象的原型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(Object.getPrototypeOf(person) === Person.prototype) // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var person = new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;person.constructor=Person;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解释：当获取person.constructor时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;person.constructor=Person.prototype.constructor;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;四：实例与原型&#34;&gt;&lt;a href=&#34;#四：实例与原型&#34; class=&#34;headerlink&#34; title=&#34;四：实例与原型&#34;&gt;&lt;/a&gt;四：实例与原型&lt;/h1&gt;&lt;p&gt;当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Person.prototype.name = &#39;Kevin&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var person = new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;person.name = &#39;Daisy&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(person.name) // Daisy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;delete person.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(person.name) // Kevin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。&lt;br&gt;但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person.&lt;strong&gt;proto&lt;/strong&gt; ，也就是 Person.prototype中查找，幸运的是我们找到了 name 属性，结果为 Kevin。&lt;/p&gt;
&lt;p&gt;但是万一还没有找到呢？原型的原型又是什么呢？&lt;/p&gt;
&lt;h1 id=&#34;五、原型的原型&#34;&gt;&lt;a href=&#34;#五、原型的原型&#34; class=&#34;headerlink&#34; title=&#34;五、原型的原型&#34;&gt;&lt;/a&gt;五、原型的原型&lt;/h1&gt;&lt;p&gt;在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var obj = new Object();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;obj.name = &#39;Kevin&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(obj.name) // Kevin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 &lt;strong&gt;proto&lt;/strong&gt; 指向构造函数的 prototype ，所以我们再更新下关系图：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/b962c76a68984903b6e87fc4572ee115.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;六、原型链&#34;&gt;&lt;a href=&#34;#六、原型链&#34; class=&#34;headerlink&#34; title=&#34;六、原型链&#34;&gt;&lt;/a&gt;六、原型链&lt;/h1&gt;&lt;p&gt; 简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》&lt;/p&gt;
&lt;p&gt;其实简单来说，就是上述四-五的过程。&lt;br&gt;继上述五中所说，那 Object.prototype 的原型呢？&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;console.log(Object.prototype.__proto__ === null) // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;引用阮一峰老师的 《undefined与null的区别》 就是：&lt;br&gt;null 表示“没有对象”，即该处不应该有值。&lt;br&gt;所以 Object.prototype.&lt;strong&gt;proto&lt;/strong&gt; 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。&lt;br&gt;所以查找属性的时候查到 Object.prototype 就可以停止查找了。&lt;/p&gt;
&lt;p&gt;最后一张关系图也可以更新为：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/701fac7dbea84c6880515236c4af4c64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;br&gt;图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原型链继承方案有以下缺点：&lt;/strong&gt;&lt;br&gt;● 1、多个实例对引用类型的操作会被篡改&lt;br&gt;● 2、子类型的原型上的 constructor 属性被重写了&lt;br&gt;● 3、给子类型原型添加属性和方法必须在替换原型之后&lt;br&gt;● 4、创建子类型实例时无法向父类型的构造函数传参&lt;/p&gt;
&lt;p&gt;问题1：&lt;br&gt;原型链继承方案中，原型实际上会变成另一个类型的实例，如下代码，&lt;code&gt;Cat.prototype&lt;/code&gt; 变成了 &lt;code&gt;Animal &lt;/code&gt;的一个实例，所以 &lt;code&gt;Animal&lt;/code&gt; 的实例属性 names 就变成了 &lt;code&gt;Cat.prototype&lt;/code&gt; 的属性。&lt;br&gt;而原型属性上的引用类型值会被所有实例共享，所以多个实例对引用类型的操作会被篡改。如下代码，改变了 &lt;code&gt;instance1.names&lt;/code&gt; 后影响了 &lt;code&gt;instance2&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 木易杨&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Animal(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.names = [&#34;cat&#34;, &#34;dog&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Cat(){}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype = new Animal();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new Cat();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.names.push(&#34;tiger&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(instance1.names); // [&#34;cat&#34;, &#34;dog&#34;, &#34;tiger&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new Cat(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(instance2.names); // [&#34;cat&#34;, &#34;dog&#34;, &#34;tiger&#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;问题2：&lt;br&gt;子类型原型上的 &lt;code&gt;constructor &lt;/code&gt;属性被重写了，执行&lt;code&gt; Cat.prototype = new Animal()&lt;/code&gt; 后原型被覆盖，&lt;code&gt;Cat.prototype&lt;/code&gt; 上丢失了 &lt;code&gt;constructor&lt;/code&gt; 属性， &lt;code&gt;Cat.prototype&lt;/code&gt; 指向了 &lt;code&gt;Animal.prototype&lt;/code&gt;，而 &lt;code&gt;Animal.prototype.constructor&lt;/code&gt; 指向了&lt;code&gt; Animal&lt;/code&gt;，所以 &lt;code&gt;Cat.prototype.constructor&lt;/code&gt; 指向了 &lt;code&gt;Animal&lt;/code&gt;。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/b9cbc47af0c743499dc6980ddb37580e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_9,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;br&gt;解决办法就是重写 Cat.prototype.constructor 属性，指向自己的构造函数 Cat。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 木易杨&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Animal() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.value = &#39;animal&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Animal.prototype.run = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.value + &#39; is runing&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Cat() {}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype = new Animal(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 新增，重写 Cat.prototype 的 constructor 属性，指向自己的构造函数 Cat&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype.constructor = Cat; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/58bb808425c74db6b9c9a13ae5a83dae.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;br&gt;问题3：&lt;br&gt;给子类型原型添加属性和方法必须在替换原型之后，原因在第二点已经解释过了，因为子类型的原型会被覆盖。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 木易杨&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Animal() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.value = &#39;animal&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Animal.prototype.run = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.value + &#39; is runing&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Cat() {}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype = new Animal(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype.constructor = Cat; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 新增&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype.getValue = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return this.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance = new Cat();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.value = &#39;cat&#39;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(instance.getValue()); // cat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;七、属性遮蔽&#34;&gt;&lt;a href=&#34;#七、属性遮蔽&#34; class=&#34;headerlink&#34; title=&#34;七、属性遮蔽&#34;&gt;&lt;/a&gt;七、属性遮蔽&lt;/h1&gt;&lt;p&gt;改造上面的代码，在 &lt;code&gt;Cat.prototype&lt;/code&gt; 上添加&lt;code&gt;run&lt;/code&gt; 方法，但是 &lt;code&gt;Animal.prototype&lt;/code&gt; 上也有一个 &lt;code&gt;run&lt;/code&gt; 方法，不过它不会被访问到，这种情况称为属性遮蔽 (property shadowing)。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 木易杨&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Animal() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.value = &#39;animal&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Animal.prototype.run = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.value + &#39; is runing&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Cat() {}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype = new Animal(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype.constructor = Cat; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 新增&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype.run = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return &#39;cat cat cat&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance = new Cat();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.value = &#39;cat&#39;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(instance.run()); // cat cat cat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那如何访问被遮蔽的属性呢？通过&lt;code&gt; __proto__&lt;/code&gt; 调用原型链上的属性即可。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;conlole.log(instance.__proto__.__proto__.run()); // undefined is runing&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/e810ed71d3b6417092fa50b3fc37562b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_13,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;八、JS常用八种继承方式&#34;&gt;&lt;a href=&#34;#八、JS常用八种继承方式&#34; class=&#34;headerlink&#34; title=&#34;八、JS常用八种继承方式&#34;&gt;&lt;/a&gt;八、JS常用八种继承方式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;原型链继承&lt;/li&gt;
&lt;li&gt;借用构造函数继承&lt;/li&gt;
&lt;li&gt;组合继承&lt;/li&gt;
&lt;li&gt;原型式继承&lt;/li&gt;
&lt;li&gt;寄生式继承&lt;/li&gt;
&lt;li&gt;寄生组合式继承&lt;/li&gt;
&lt;li&gt;混入方式继承多个对象&lt;/li&gt;
&lt;li&gt;ES6类继承extends&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 具体有关分析请看下章。如果写得不够清晰或者不够全面还望理解哈！随着不断学习，会将文章补充的更好哒。&lt;/p&gt;
</content>
        <category term="javascript" />
        <category term="前端" />
        <updated>2022-09-19T12:58:36.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/vue-de-kuo-zhan-yun-suan-fu/</id>
        <title>VUE的扩展运算符</title>
        <link rel="alternate" href="http://example.com/2022/09/19/vue-de-kuo-zhan-yun-suan-fu/"/>
        <content type="html">&lt;p&gt;含义：&lt;br&gt;扩展运算符（ spread ）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。&lt;br&gt;操作数组：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//里面放自己定义的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    methods: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 把数组中的元素孤立起来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let iArray = [&lt;span class=&#34;string&#34;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;3&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(...iArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印结果  1 2 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 在数组中添加元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick3&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let iArray = [&lt;span class=&#34;string&#34;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;3&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&#39;0&#39;&lt;/span&gt;, ...iArray, &lt;span class=&#34;string&#34;&gt;&#39;4&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印结果  [&#34;0&#34;, &#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 在数组中删除元素（取出一个元素）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 与结构赋值的结合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick8&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; [first, ...rest] = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(first);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印结果 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([...rest]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印结果 [2, 3, 4, 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; [one, ...last] = [&lt;span class=&#34;string&#34;&gt;&#34;foo&#34;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(one);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//打印结果 foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([...last]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//打印结果 []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 数组的合并&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick6&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ES6 的写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        var arr1 = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        var arr2 = [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        arr1.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(...arr2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(arr1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 [0, 1, 2, 3, 4, 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 数组的合并（推荐使用）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick7&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        var arr1 = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        var arr2 = [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([...arr1, ...arr2]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 [0, 1, 2, 3, 4, 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 将字符串转成数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick9&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let iString = &lt;span class=&#34;string&#34;&gt;&#39;woshizhongguoren&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([...iString]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 [&#34;w&#34;, &#34;o&#34;, &#34;s&#34;, &#34;h&#34;, &#34;i&#34;, &#34;z&#34;, &#34;h&#34;, &#34;o&#34;, &#34;n&#34;, &#34;g&#34;, &#34;g&#34;, &#34;u&#34;, &#34;o&#34;, &#34;r&#34;, &#34;e&#34;, &#34;n&#34;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * Map 和 Set 结构， Generator 函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick10&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let map = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt;([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;one&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;two&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;three&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let arr = [...map.&lt;span class=&#34;built_in&#34;&gt;keys&lt;/span&gt;()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 [1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 当做参数传递&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 和直接传数组的区别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick4&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let iArray = [&lt;span class=&#34;string&#34;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;3&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//注意传的时候，就要三个点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;hanshu&lt;/span&gt;(...iArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;hanshu&lt;/span&gt;(...iArray) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let ooo = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(...iArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 1 2 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 求出最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick5&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let iArray = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;99&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;66&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;85&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;77&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let ooo = Math.&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(...iArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(ooo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 99&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 如果对没有iterator接口的对象，使用扩展运算符，将会报错。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick11&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let obj = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          name: &lt;span class=&#34;string&#34;&gt;&#39;zhh&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          age: &lt;span class=&#34;string&#34;&gt;&#39;20&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([...obj]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;操作对象：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; methods: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 添加一个属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;method3&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let a = {age: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, id: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 把 name 属性，放到对象中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let c = {name: &lt;span class=&#34;string&#34;&gt;&#39;zhh&#39;&lt;/span&gt;, ...a};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果  {name: &#34;zhh&#34;, age: 18, id: 10}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 修改一个属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;method2&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let a = {name: &lt;span class=&#34;string&#34;&gt;&#39;zhh&#39;&lt;/span&gt;, age: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, id: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//先拿到a, 后面的name:zhh1,把 a 中name 的值替换掉了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let c = {...a, name: &lt;span class=&#34;string&#34;&gt;&#39;zhh1&#39;&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印结果  {name: &#34;zhh1&#34;, age: 18, id: 10}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 删除一个属性（拿出属性或者对象）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;method1&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let a = {name: &lt;span class=&#34;string&#34;&gt;&#39;zhh&#39;&lt;/span&gt;, age: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, id: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let {name, ...c} = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(name, c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 zhh {age: 18, id: 10}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="javascript" />
        <category term="前端" />
        <category term="vue.js" />
        <updated>2022-09-19T12:58:24.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/javascript-zhong-de-nei-cun-yi-chu-he-nei-cun-xie-lu/</id>
        <title>JavaScript中的内存溢出和内存泄露</title>
        <link rel="alternate" href="http://example.com/2022/09/19/javascript-zhong-de-nei-cun-yi-chu-he-nei-cun-xie-lu/"/>
        <content type="html">&lt;h2 id=&#34;内存溢出&#34;&gt;&lt;a href=&#34;#内存溢出&#34; class=&#34;headerlink&#34; title=&#34;内存溢出&#34;&gt;&lt;/a&gt;内存溢出&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;概念：一种程序运行出现的错误，当程序运行需要的内存超过了剩余的内存时，就出抛出内存溢出的错误。&lt;/li&gt;
&lt;li&gt;举例：&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var obj = {}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (var i = 0; i &amp;lt; 10000; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	obj[i] = new Array(1000000000)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;https://img-blog.csdnimg.cn/2a7712a5634d4d2e9a9380eef6f28115.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内存泄露&#34;&gt;&lt;a href=&#34;#内存泄露&#34; class=&#34;headerlink&#34; title=&#34;内存泄露&#34;&gt;&lt;/a&gt;内存泄露&lt;/h2&gt;&lt;p&gt;概念：占用的内存没有及时释放，内存泄露积累多了就容易导致内存溢出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见的内存泄露:&lt;br&gt;（1）意外的全局变量&lt;br&gt;（2）没有及时清理的计时器或回调函数*闭包&lt;/li&gt;
&lt;li&gt;举例：&lt;br&gt;（1）意外的全局变量&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function fn() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	a= 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	console.log(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fn()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// fn() = null&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
（2）启动循环定时器后不清理&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var intervalId = setInterval(function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	console.log( &#39;----&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}, 1000)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// cLearInterval(intervaLId)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
（3）闭包，不及时释放&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function fn1() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	var a = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	function fn2() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		console.log(++a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return fn2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var f = fn1()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// f = nulL&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="javascript" />
        <category term="前端" />
        <category term="开发语言" />
        <updated>2022-09-19T12:58:07.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/vue-qing-chu-form-biao-dan-er-ci-dan-chu-biao-dan-shi-shang-ci-de-ti-shi-xin-xi/</id>
        <title>Vue 清除Form 表单二次弹出表单时上次的提示信息</title>
        <link rel="alternate" href="http://example.com/2022/09/19/vue-qing-chu-form-biao-dan-er-ci-dan-chu-biao-dan-shi-shang-ci-de-ti-shi-xin-xi/"/>
        <content type="html">&lt;p&gt;二次打开表单，验证提示信息还在，如何解决呢？&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/912b4eb3c3954c43a43d49cdcc2d8ba6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_14,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;br&gt;话不多说，直接上代码&lt;br&gt;在弹出表单方法内加入下面代码即可&lt;br&gt;&lt;strong&gt;①清除表单内容和清除表单验证消息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;this.$nextTick(()=&amp;gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	this.$refs.form.resetFields();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;②只清除表单验证消息、不清楚表单内容&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;this.$nextTick(()=&amp;gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.$refs[&#39;form&#39;].clearValidate() // 只清除清除验证&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="前端" />
        <category term="vue.js" />
        <updated>2022-09-19T12:57:49.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/elementui-zhi-cascader-ji-lian-xuan-ze-qi-zhi-ding-value-label/</id>
        <title>ElementUI 之 Cascader 级联选择器指定 value label</title>
        <link rel="alternate" href="http://example.com/2022/09/19/elementui-zhi-cascader-ji-lian-xuan-ze-qi-zhi-ding-value-label/"/>
        <content type="html">&lt;p&gt;ElementUI 的 Cascader 级联选择器对 :options=”options” 里的数据格式是有特定要求的：input 框显示的值是 options 里的 label 值。如果 options 的键值对不是 value label ，就需要 props 来配置。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;el-cascader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ref=&#34;cascader&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v-model=&#34;companyForm.industry&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    style=&#34;width: 500px; &#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :options=&#34;belongIndustry&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :props=&#34;{ multiple: true, emitPath:false }&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :clearable=&#34;true&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @change=&#34;nodeValue&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default { &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　data() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　belongIndustry:[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　　　{ id: 1, name: &#39;第一层&#39;, children: [ id: 11, name: &#39;水果&#39;]},&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　　　{ id: 2, name: &#39;第二层&#39;, children: [ id: 22, name: &#39;蔬菜&#39;] },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/bbb2df70a4a2492e9fa2f83901c8405a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;/p&gt;
</content>
        <category term="javascript" />
        <category term="elementui" />
        <category term="vue.js" />
        <updated>2022-09-19T12:57:25.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/qu-xiao-el-upload-zi-dai-dong-hua-xiao-guo-ji-tu-pian-bu-cai-jian-gong-neng/</id>
        <title>取消el-upload自带动画效果及图片不裁剪功能</title>
        <link rel="alternate" href="http://example.com/2022/09/19/qu-xiao-el-upload-zi-dai-dong-hua-xiao-guo-ji-tu-pian-bu-cai-jian-gong-neng/"/>
        <content type="html">&lt;p&gt;在应用el-upload所在页面加上如下代码，可以取消过渡效果，并且更改图片显示方式&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*去除upload组件过渡效果*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;span class=&#34;property&#34;&gt;el&lt;/span&gt;-upload-list__item {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;transition&lt;/span&gt;: none !important;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; .&lt;span class=&#34;property&#34;&gt;el&lt;/span&gt;-upload-list__item-thumbnail {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 图片在方框内显示长边 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    object-&lt;span class=&#34;attr&#34;&gt;fit&lt;/span&gt;: scale-down !important;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果加上后仍然没有效果，可以加上::v-deep深度选择器&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*去除upload组件过渡效果*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;::v-deep .&lt;span class=&#34;property&#34;&gt;el&lt;/span&gt;-upload-list__item {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;transition&lt;/span&gt;: none !important;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;::v-deep .&lt;span class=&#34;property&#34;&gt;el&lt;/span&gt;-upload-list__item-thumbnail {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 图片在方框内显示长边 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    object-&lt;span class=&#34;attr&#34;&gt;fit&lt;/span&gt;: scale-down !important;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一起试试吧！！&lt;/p&gt;
</content>
        <category term="vue.js" />
        <category term="动画" />
        <category term="css3" />
        <updated>2022-09-19T12:51:55.000Z</updated>
    </entry>
</feed>
