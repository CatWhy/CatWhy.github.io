<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>独白 • Posts by &#34;原型模式&#34; tag</title>
        <link>http://example.com</link>
        <description>博客</description>
        <language>zh-CN</language>
        <pubDate>Mon, 19 Sep 2022 20:58:50 +0800</pubDate>
        <lastBuildDate>Mon, 19 Sep 2022 20:58:50 +0800</lastBuildDate>
        <category>javascript</category>
        <category>原型模式</category>
        <category>前端</category>
        <category>elementui</category>
        <category>vue.js</category>
        <category>开发语言</category>
        <category>react.js</category>
        <category>typescript</category>
        <category>Vue</category>
        <category>git</category>
        <category>npm</category>
        <category>node.js</category>
        <category>动画</category>
        <category>css3</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/09/19/javascript-chang-yong-ba-chong-ji-cheng-fang-shi/</guid>
            <title>JavaScript常用八种继承方式</title>
            <link>http://example.com/2022/09/19/javascript-chang-yong-ba-chong-ji-cheng-fang-shi/</link>
            <category>javascript</category>
            <category>原型模式</category>
            <category>前端</category>
            <pubDate>Mon, 19 Sep 2022 20:58:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;原型链继承&#34;&gt;&lt;a href=&#34;#原型链继承&#34; class=&#34;headerlink&#34; title=&#34;原型链继承&#34;&gt;&lt;/a&gt;原型链继承&lt;/h1&gt;&lt;p&gt;构造函数、原型和实例之间的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个原型对象的指针。&lt;br&gt;继承的本质就是复制，即重写原型对象，代之以一个新类型的实例。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function SuperType() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.property = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SuperType.prototype.getSuperValue = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.property;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.subproperty = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 这里是关键，创建SuperType的实例，并将该实例赋值给SubType.prototype&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype = new SuperType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.getSubValue = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.subproperty;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(instance.getSuperValue()); // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型链方案存在的缺点：多个实例对引用类型的操作会被篡改。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function SuperType(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.colors = [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType(){}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype = new SuperType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.colors.push(&#34;black&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance1.colors); //&#34;red,blue,green,black&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance2.colors); //&#34;red,blue,green,black&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;借用构造函数继承-借调）&#34;&gt;&lt;a href=&#34;#借用构造函数继承-借调）&#34; class=&#34;headerlink&#34; title=&#34;借用构造函数继承(借调）&#34;&gt;&lt;/a&gt;借用构造函数继承(借调）&lt;/h1&gt;&lt;p&gt;借调：借用构造函数调用冒充继承，借调实现的继承，不是真正的继承，只是借用构造函数中的属性或方法。&lt;br&gt;即：使用父类的构造函数来增强子类实例，等同于复制父类的实例给子类（不使用原型）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function  SuperType(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.color=[&#34;red&#34;,&#34;green&#34;,&#34;blue&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function  SubType(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //继承自SuperType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SuperType.call(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.color.push(&#34;black&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance1.color);//&#34;red,green,blue,black&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance2.color);//&#34;red,green,blue&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;核心代码是&lt;code&gt;SuperType.call(this)&lt;/code&gt;，创建子类实例时调用&lt;code&gt;SuperType&lt;/code&gt;构造函数，于是&lt;code&gt;SubType&lt;/code&gt;的每个实例都会将SuperType中的属性复制一份。&lt;br&gt;缺点：&lt;br&gt;● 只能继承父类的实例属性和方法，不能继承原型属性/方法&lt;br&gt;● 无法实现复用，每个子类都有父类实例函数的副本，影响性能&lt;/p&gt;
&lt;h1 id=&#34;组合继承&#34;&gt;&lt;a href=&#34;#组合继承&#34; class=&#34;headerlink&#34; title=&#34;组合继承&#34;&gt;&lt;/a&gt;组合继承&lt;/h1&gt;&lt;p&gt;组合上述两种方法就是组合继承。用原型链实现对原型属性和方法的继承，用借用构造函数技术来实现实例属性的继承。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function SuperType(name){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.colors = [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SuperType.prototype.sayName = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType(name, age){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 继承属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 第二次调用SuperType()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  SuperType.call(this, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 继承方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 构建原型链&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 第一次调用SuperType()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype = new SuperType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 重写SubType.prototype的constructor属性，指向自己的构造函数SubType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.constructor = SubType; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.sayAge = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    alert(this.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType(&#34;Nicholas&#34;, 29);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.colors.push(&#34;black&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance1.colors); //&#34;red,blue,green,black&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.sayName(); //&#34;Nicholas&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.sayAge(); //29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType(&#34;Greg&#34;, 27);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance2.colors); //&#34;red,blue,green&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance2.sayName(); //&#34;Greg&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance2.sayAge(); //27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;缺点：&lt;br&gt;● 第一次调用&lt;code&gt;SuperType()&lt;/code&gt;：给&lt;code&gt;SubType.prototype&lt;/code&gt;写入两个属性name，color。&lt;br&gt;● 第二次调用&lt;code&gt;SuperType()&lt;/code&gt;：给&lt;code&gt;instance1&lt;/code&gt;写入两个属性name，color。&lt;br&gt;实例对象&lt;code&gt;instance1&lt;/code&gt;上的两个属性就屏蔽了其原型对象SubType.prototype的两个同名属性。所以，组合模式的缺点就是在使用子类创建实例对象时，其原型中会存在两份相同的属性/方法。&lt;/p&gt;
&lt;h1 id=&#34;原型式继承&#34;&gt;&lt;a href=&#34;#原型式继承&#34; class=&#34;headerlink&#34; title=&#34;原型式继承&#34;&gt;&lt;/a&gt;原型式继承&lt;/h1&gt;&lt;p&gt;原理：类似Object.create，用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象，结果是将子对象的__proto__指向父对象&lt;br&gt;1.利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function object(obj){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  function F(){}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  F.prototype = obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return new F();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;object()对传入其中的对象执行了一次&lt;code&gt;浅复制&lt;/code&gt;，将构造函数F的原型直接指向传入的对象。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var person = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#34;Nicholas&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  friends: [&#34;Shelby&#34;, &#34;Court&#34;, &#34;Van&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var anotherPerson = object(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.name = &#34;Greg&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.friends.push(&#34;Rob&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var yetAnotherPerson = object(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.name = &#34;Linda&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.friends.push(&#34;Barbie&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(person.friends);   //&#34;Shelby,Court,Van,Rob,Barbie&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.或者直接利用Object.create():&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let person = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#34;Nicholas&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  friends: [&#34;Shelby&#34;, &#34;Court&#34;, &#34;Van&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let anotherPerson = Object.create(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.name = &#34;Greg&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.friends.push(&#34;Rob&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let yetAnotherPerson = Object.create(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.name = &#34;Linda&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.friends.push(&#34;Barbie&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(person.friends);   //&#34;Shelby,Court,Van,Rob,Barbie&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;优点：&lt;br&gt;● 父类方法可以复用&lt;br&gt;缺点：&lt;br&gt;● 原型链继承多个实例的引用类型属性指向相同，存在篡改的可能&lt;br&gt;● 子类构建实例时不能向父类传递参数&lt;/p&gt;
&lt;h1 id=&#34;寄生式继承&#34;&gt;&lt;a href=&#34;#寄生式继承&#34; class=&#34;headerlink&#34; title=&#34;寄生式继承&#34;&gt;&lt;/a&gt;寄生式继承&lt;/h1&gt;&lt;p&gt;核心：在原型式继承的基础上，增强对象，返回构造函数&lt;br&gt;即：使用原型式继承获得一份目标对象的浅拷贝，然后增强了这个浅拷贝的能力。&lt;br&gt;优缺点其实和原型式继承一样，寄生式继承说白了就是能在拷贝来的对象上加点方法，也就是所谓增强能力。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function object(obj) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  function F() { }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  F.prototype = obj&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return new F()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function createAnother(original){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var clone = object(original); // 通过调用 object() 函数创建一个新对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  clone.sayHi = function(){  // 以某种方式来增强对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    alert(&#34;hi&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return clone; // 返回这个对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数的主要作用是为构造函数新增属性和方法，以增强函数&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var person = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#34;Nicholas&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  friends: [&#34;Shelby&#34;, &#34;Court&#34;, &#34;Van&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var anotherPerson = createAnother(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.sayHi(); //&#34;hi&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;缺点（同原型式继承）：&lt;br&gt;● 原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。&lt;br&gt;● 无法传递参数&lt;/p&gt;
&lt;h1 id=&#34;寄生组合式继承&#34;&gt;&lt;a href=&#34;#寄生组合式继承&#34; class=&#34;headerlink&#34; title=&#34;寄生组合式继承&#34;&gt;&lt;/a&gt;寄生组合式继承&lt;/h1&gt;&lt;p&gt;结合借用构造函数传递参数和寄生模式实现继承&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function inheritPrototype(subType, superType){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 创建对象，创建父类原型的一个副本&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var prototype = Object.create(superType.prototype); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 增强对象，弥补因重写原型而失去的默认的constructor 属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  prototype.constructor = subType;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 指定对象，将新创建的对象赋值给子类的原型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  subType.prototype = prototype;                      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 父类初始化实例属性和原型属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SuperType(name){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.colors = [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SuperType.prototype.sayName = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 借用构造函数传递增强子类实例属性（支持传参和避免篡改）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType(name, age){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  SuperType.call(this, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 将父类原型指向子类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;inheritPrototype(SubType, SuperType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 新增子类原型属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.sayAge = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  alert(this.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType(&#34;xyc&#34;, 23);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType(&#34;lxy&#34;, 23);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.colors.push(&#34;2&#34;); // [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;, &#34;2&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance2.colors.push(&#34;3&#34;); // [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;, &#34;3&#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子的高效率体现在它只调用了一次&lt;code&gt;SuperType&lt;/code&gt; 构造函数，并且因此避免了在&lt;code&gt;SubType.prototype&lt;/code&gt; 上创建不必要的、多余的属性。于此同时，原型链还能保持不变；因此，还能够正常使用&lt;code&gt;instanceof &lt;/code&gt;和&lt;code&gt;isPrototypeOf()&lt;/code&gt;&lt;br&gt;这是最成熟的方法，也是现在库实现的方法&lt;/p&gt;
&lt;h1 id=&#34;混入方式继承多个对象&#34;&gt;&lt;a href=&#34;#混入方式继承多个对象&#34; class=&#34;headerlink&#34; title=&#34;混入方式继承多个对象&#34;&gt;&lt;/a&gt;混入方式继承多个对象&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function MyClass() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     SuperClass.call(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     OtherSuperClass.call(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 继承一个类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyClass.prototype = Object.create(SuperClass.prototype);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 混合其它&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Object.assign(MyClass.prototype, OtherSuperClass.prototype);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 重新指定constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyClass.prototype.constructor = MyClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyClass.prototype.myMethod = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     // do something&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Object.assign&lt;/code&gt;会把 &lt;code&gt;OtherSuperClass&lt;/code&gt;原型上的函数拷贝到 &lt;code&gt;MyClass&lt;/code&gt;原型上，使 MyClass 的所有实例都可用 OtherSuperClass 的方法。&lt;/p&gt;
&lt;h1 id=&#34;ES6类继承extends&#34;&gt;&lt;a href=&#34;#ES6类继承extends&#34; class=&#34;headerlink&#34; title=&#34;ES6类继承extends&#34;&gt;&lt;/a&gt;ES6类继承extends&lt;/h1&gt;&lt;p&gt;&lt;code&gt;extends&lt;/code&gt;关键字主要用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。其中&lt;code&gt;constructor&lt;/code&gt;表示构造函数，一个类中只能有一个构造函数，有多个会报出&lt;code&gt;SyntaxError&lt;/code&gt;错误,如果没有显式指定构造方法，则会添加默认的&lt;br&gt;&lt;code&gt;constructor&lt;/code&gt;方法，使用例子如下。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Rectangle {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(height, width) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.height = height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.width = width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // Getter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    get area() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return this.calcArea()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // Method&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    calcArea() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return this.height * this.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const rectangle = new Rectangle(10, 20);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(rectangle.area);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 输出 200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-----------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 继承&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Square extends Rectangle {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  constructor(length) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    super(length, length);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 如果子类中存在构造函数，则需要在使用“this”之前首先调用 super()。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.name = &#39;Square&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  get area() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.height * this.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const square = new Square(10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(square.area);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 输出 100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;extends&lt;/code&gt;继承的核心代码如下，其实现和上述的寄生组合式继承方式一样&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function _inherits(subType, superType) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 创建对象，创建父类原型的一个副本&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 增强对象，弥补因重写原型而失去的默认的constructor 属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 指定对象，将新创建的对象赋值给子类的原型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    subType.prototype = Object.create(superType &amp;amp;&amp;amp; superType.prototype, {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        constructor: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            value: subType,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            enumerable: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            writable: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            configurable: true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (superType) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Object.setPrototypeOf &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ? Object.setPrototypeOf(subType, superType) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            : subType.__proto__ = superType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
    </channel>
</rss>
