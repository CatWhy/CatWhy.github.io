{
    "version": "https://jsonfeed.org/version/1",
    "title": "独白 • All posts by \"typescript\" tag",
    "description": "博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/09/19/typescript-xue-xi-ri-ji/",
            "url": "http://example.com/2022/09/19/typescript-xue-xi-ri-ji/",
            "title": "TypeScript学习日记",
            "date_published": "2022-09-19T12:59:02.000Z",
            "content_html": "<p>@[TOC]</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><a href=\"https://www.tslang.cn/docs/handbook/generics.html\">TypeScript</a> 是微软开发的 JavaScript 的超集，TypeScript兼容JavaScript，可以载入JavaScript代码然后运行。TypeScript与JavaScript相比进步的地方 包括：加入注释，让编译器理解所支持的对象和函数，编译器会移除注释，不会增加开销；增加一个完整的类结构，使之更新是传统的面向对象语言</p>\n<h1 id=\"为什么会有TypeScript？\"><a href=\"#为什么会有TypeScript？\" class=\"headerlink\" title=\"为什么会有TypeScript？\"></a>为什么会有TypeScript？</h1><p>JavaScript 只是一个脚本语言，并非设计用于开发大型 Web 应用，JavaScript 没有提供类和模块的概念，而 TypeScript 扩展了 JavaScript 实现了这些特性。TypeScript 主要特点包括：</p>\n<ul>\n<li>TypeScript 是微软推出的开源语言，使用 Apache 授权协议</li>\n<li>TypeScript 是 JavaScript 的超集.</li>\n<li>TypeScript 增加了可选类型、类和模块</li>\n<li>TypeScript 可编译成可读的、标准的 JavaScript</li>\n<li>TypeScript 支持开发大规模 JavaScript 应用</li>\n<li>TypeScript 设计用于开发大型应用，并保证编译后的 JavaScript 代码兼容性</li>\n<li>TypeScript 扩展了 JavaScript 的语法，因此已有的 JavaScript 代码可直接与 TypeScript 一起运行无需更改</li>\n<li>TypeScript 文件扩展名是 ts，而 TypeScript 编译器会编译成 js 文件</li>\n<li>TypeScript 语法与 JScript .NET 相同</li>\n<li>TypeScript 易学易于理解</li>\n</ul>\n<h1 id=\"JavaScript-与-TypeScript-的区别\"><a href=\"#JavaScript-与-TypeScript-的区别\" class=\"headerlink\" title=\"JavaScript 与 TypeScript 的区别\"></a>JavaScript 与 TypeScript 的区别</h1><p>TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改，TypeScript 通过类型注解提供编译时的静态类型检查。TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译。</p>\n<h1 id=\"TypeScript优势\"><a href=\"#TypeScript优势\" class=\"headerlink\" title=\"TypeScript优势\"></a>TypeScript优势</h1><p>解决痛点<br>TypeScript的设计解决了JavaScript的“痛点”：弱类型和没有命名空间；这导致程序很难模块化，不适合开发大型程序。</p>\n<p>语法提示<br>编写程序时，编辑器将提供精准的语法提示，以帮助大家更方便地实践面向对象的编程。</p>\n<p>容易上手<br>TypeScript的一个设计亮点，是它并没有抛弃JavaScript的语法另起炉灶，而是做成了JavaScript的超集，任何合法的JavaScript的语句在TypeScript下都是合法的，且沿用了JavaScript的使用习惯和惯例，可以说学习成本很低。</p>\n<h1 id=\"一、TypeScript安装、编译\"><a href=\"#一、TypeScript安装、编译\" class=\"headerlink\" title=\"一、TypeScript安装、编译\"></a>一、TypeScript安装、编译</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br></pre></td></tr></tbody></table></figure>\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g typescript </span><br></pre></td></tr></tbody></table></figure>\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarm global add typescript</span><br></pre></td></tr></tbody></table></figure>\n<p>查看版本：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc -v</span><br></pre></td></tr></tbody></table></figure>\n<p>运行：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc helloworld.ts</span><br></pre></td></tr></tbody></table></figure>\n<p>注意：如果电脑上没有安装过yarn,请记得先安装</p>\n<h1 id=\"二、配置TS开发工具-Vscode自动编译-ts文件\"><a href=\"#二、配置TS开发工具-Vscode自动编译-ts文件\" class=\"headerlink\" title=\"二、配置TS开发工具 Vscode自动编译 .ts文件\"></a>二、配置TS开发工具 Vscode自动编译 .ts文件</h1><ol>\n<li>在目录所在位置打开终端cmd<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc --init</span><br></pre></td></tr></tbody></table></figure>\n生成配置文件</li>\n<li> 然后取消生成的 <code>tsconfig.json</code> 中的  “outDir”，改为如下：<br><img src=\"https://img-blog.csdnimg.cn/7dc0af0fd25c44eca7a2fac0da69a343.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></li>\n<li>点击终端，选择typescript.选择监视选项<br><img src=\"https://img-blog.csdnimg.cn/f818b0fee1794e97925f02dbaf391948.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></li>\n<li>可以开始正常敲代码</li>\n</ol>\n<h1 id=\"三、TypeScript数据类型及理解\"><a href=\"#三、TypeScript数据类型及理解\" class=\"headerlink\" title=\"三、TypeScript数据类型及理解\"></a>三、TypeScript数据类型及理解</h1><ol>\n<li>布尔类型（boolean）</li>\n<li>数字类型（number）</li>\n<li>字符串类型（string）</li>\n<li>数组类型（array）</li>\n<li>元组类型（tuple）</li>\n<li>枚举类型（enum）</li>\n<li>任意类型（any）</li>\n<li>null 和 undefined（是never 数据类型的子类型）</li>\n<li>void 类型</li>\n<li>never 类型：<br>a. 表示的是那些永不存在的值的类型，never类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是never的子类型或可以赋值给never 类型（除了never本身之外）。 即使 any也不可以赋值给never。<br>b. 是其他类型（包括 null 和 undefined）的子类型，代表从不会出现的值。<br>c. 返回never的函数必须存在无法达到的终点 </li>\n</ol>\n<h1 id=\"四、函数\"><a href=\"#四、函数\" class=\"headerlink\" title=\"四、函数\"></a>四、函数</h1><h2 id=\"函数声明法\"><a href=\"#函数声明法\" class=\"headerlink\" title=\"函数声明法\"></a>函数声明法</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function run():string{</span><br><span class=\"line\">  return 'run'</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"匿名函数法\"><a href=\"#匿名函数法\" class=\"headerlink\" title=\"匿名函数法\"></a>匿名函数法</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fun2=function():number{</span><br><span class=\"line\">  return 2;</span><br><span class=\"line\">}</span><br><span class=\"line\">alert(fun2());</span><br><span class=\"line\"></span><br><span class=\"line\">let getInfo1=function (name:string,age:number):string {</span><br><span class=\"line\">    return `${name}--${age}`</span><br><span class=\"line\">}</span><br><span class=\"line\">alert(getInfo1('zhangdan',3434))</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"没有返回值\"><a href=\"#没有返回值\" class=\"headerlink\" title=\"没有返回值\"></a>没有返回值</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getInfo3(name:string,age:number):void {</span><br><span class=\"line\">    console.log(`${name}--${age}`) </span><br><span class=\"line\">}</span><br><span class=\"line\">getInfo3('lixiaolong',3434)</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"方法传参—可选参数\"><a href=\"#方法传参—可选参数\" class=\"headerlink\" title=\"方法传参—可选参数\"></a>方法传参—可选参数</h2><p><strong>注意：可选参数必须放在必须参数的后面</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// es5中的实参和形参可以不一样，但是ts中必须一样，否则就需要配置可选参数</span><br><span class=\"line\">function getInfo4(name?:string,age?:number):string {</span><br><span class=\"line\">    return `${name}--${age}`</span><br><span class=\"line\">}</span><br><span class=\"line\">alert(getInfo4('3453'))</span><br><span class=\"line\">alert(getInfo4('',34))</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"方法传参—设置默认参数\"><a href=\"#方法传参—设置默认参数\" class=\"headerlink\" title=\"方法传参—设置默认参数\"></a>方法传参—设置默认参数</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户可以不传递这个参数或传递的值是undefined</span><br><span class=\"line\">注意：与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined值来获得默认值</span><br><span class=\"line\">function getInfo5(name?:string,age:number=20):string {</span><br><span class=\"line\">    return `${name}--${age}`</span><br><span class=\"line\">}</span><br><span class=\"line\">alert(getInfo5('3453453',))</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"剩余传参—即-es6-中的-…-语法\"><a href=\"#剩余传参—即-es6-中的-…-语法\" class=\"headerlink\" title=\"剩余传参—即 es6 中的 … 语法\"></a>剩余传参—即 es6 中的 … 语法</h2><h2 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Java中的重载是指两个或两个以上同名函数，但是他们的参数不一样，这时会出现函数重载的情况</span><br><span class=\"line\">// ts为了兼容es5 es6,重载方法和Java有区别</span><br><span class=\"line\"></span><br><span class=\"line\">// 在es5中，如果出现同名函数，则下面的会替换上面的方法</span><br><span class=\"line\">// function name(params:any):any {</span><br><span class=\"line\"></span><br><span class=\"line\">// }</span><br><span class=\"line\">// function name(params:any,config:any) {</span><br><span class=\"line\"></span><br><span class=\"line\">// }</span><br><span class=\"line\"></span><br><span class=\"line\">// ts中</span><br><span class=\"line\">function getInfo6(names:string):string;</span><br><span class=\"line\">function getInfo6(age:number):string;</span><br><span class=\"line\">function getInfo6(str:any):any{</span><br><span class=\"line\">    if (typeof str==='string') {</span><br><span class=\"line\">        return names</span><br><span class=\"line\">    }else{</span><br><span class=\"line\">        return str</span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\">alert(getInfo6(20))</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"箭头函数—和-es6-一样\"><a href=\"#箭头函数—和-es6-一样\" class=\"headerlink\" title=\"箭头函数—和 es6 一样\"></a>箭头函数—和 es6 一样</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; {</span><br><span class=\"line\">    alert(3333)</span><br><span class=\"line\">}, 1000);</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"五、类\"><a href=\"#五、类\" class=\"headerlink\" title=\"五、类\"></a>五、类</h1><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 通过class创建类</span><br><span class=\"line\">class Animal {</span><br><span class=\"line\">    // 类的属性</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    // 类的构造器</span><br><span class=\"line\">    constructor(name: string) {</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    // 类的方法</span><br><span class=\"line\">    sayHello():void{</span><br><span class=\"line\">        alert(\"hello animal:\"+this.name);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">// 实例化类</span><br><span class=\"line\">var tom = new Animal(\"tom\");</span><br><span class=\"line\">tom.sayHello();</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 通过class创建类</span><br><span class=\"line\">class Animal {</span><br><span class=\"line\">    // 类的属性</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 类的构造器</span><br><span class=\"line\">    constructor(name: string) {</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    // 类的方法</span><br><span class=\"line\">    sayHello(): void {</span><br><span class=\"line\">        alert(\"hello animal:\" + this.name);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 继承Animal</span><br><span class=\"line\">class Cat extends Animal {</span><br><span class=\"line\">    // 重写方法</span><br><span class=\"line\">    sayHello(): void {</span><br><span class=\"line\">        alert(\"hello cat:\" + this.name);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">class Dog extends Animal {</span><br><span class=\"line\">    sayHello(): void {</span><br><span class=\"line\">        alert(\"hello dog:\" + this.name);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Animal {</span><br><span class=\"line\">    private name: string; // 这里把name修饰符改为private</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(name: string) {</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    sayHello(): void {</span><br><span class=\"line\">        alert(\"hello animal:\" + this.name);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">class Cat extends Animal {</span><br><span class=\"line\">    sayHello(): void {</span><br><span class=\"line\">        alert(\"hello cat:\" + this.name); //这里会报错，因为无法引用父类private修饰的属性</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">class Dog extends Animal {</span><br><span class=\"line\">    sayHello(): void {</span><br><span class=\"line\">        alert(\"hello dog:\" + this.name); //这里会报错，因为无法引用父类private修饰的属性</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"Get-Set访问器\"><a href=\"#Get-Set访问器\" class=\"headerlink\" title=\"Get/Set访问器\"></a>Get/Set访问器</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Animal {</span><br><span class=\"line\">    private name: string;</span><br><span class=\"line\"></span><br><span class=\"line\">    get name(): string { //通过get和set解决子类不能引用父类private修饰的属性的问题</span><br><span class=\"line\">        return this.name;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    set name(name: string) {</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(name: string) {</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    sayHello(): void {</span><br><span class=\"line\">        alert(\"hello animal:\" + this.name);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">class Cat extends Animal {</span><br><span class=\"line\">    sayHello(): void {</span><br><span class=\"line\">        alert(\"hello cat:\" + this.name); </span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">class Dog extends Animal {</span><br><span class=\"line\">    sayHello(): void {</span><br><span class=\"line\">        alert(\"hello dog:\" + this.name); </span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Table {</span><br><span class=\"line\">    static width: Number = 100;</span><br><span class=\"line\">    static height: Number = 50</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">var width: Number = Table.width;</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"六、接口\"><a href=\"#六、接口\" class=\"headerlink\" title=\"六、接口\"></a>六、接口</h1><h2 id=\"基本语法-1\"><a href=\"#基本语法-1\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Graphic {</span><br><span class=\"line\">    width: Number;</span><br><span class=\"line\">    height: Number;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">class Square implements Graphic {</span><br><span class=\"line\">    width: Number;</span><br><span class=\"line\">    height: Number;</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor() {</span><br><span class=\"line\">        this.width = 100;</span><br><span class=\"line\">        this.height = 100;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(width: Number, height: Number) {</span><br><span class=\"line\">        this.height = height;</span><br><span class=\"line\">        this.width = width;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"继承接口\"><a href=\"#继承接口\" class=\"headerlink\" title=\"继承接口\"></a>继承接口</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Graphic {</span><br><span class=\"line\">    width: Number;</span><br><span class=\"line\">    height: Number;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">interface PenStroke {</span><br><span class=\"line\">    penWidth: Number;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">interface Square extends Graphic, PenStroke {</span><br><span class=\"line\">    sideLength: number;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"七、泛型\"><a href=\"#七、泛型\" class=\"headerlink\" title=\"七、泛型\"></a>七、泛型</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。<br>在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。<br>通俗理解：泛型就是解决类、接口、方法的复用性以及对不特定数据类型的支持</p>\n<h2 id=\"泛型函数\"><a href=\"#泛型函数\" class=\"headerlink\" title=\"泛型函数\"></a>泛型函数</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getDate&lt;T&gt;(value: T): T {</span><br><span class=\"line\">    console.log('3453453453');</span><br><span class=\"line\">    return value;</span><br><span class=\"line\">}</span><br><span class=\"line\">getDate&lt;number&gt;(345345);   // 3453453453</span><br><span class=\"line\">getDate&lt;string&gt;('String')  // 3453453453</span><br><span class=\"line\"></span><br><span class=\"line\">function getDate1&lt;T&gt;(value: T): any {</span><br><span class=\"line\">    console.log(value);  // 345345</span><br><span class=\"line\">    return value + '345345345';</span><br><span class=\"line\">}</span><br><span class=\"line\">alert(getDate1&lt;number&gt;(345345));   // 345345345345345</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Minclass&lt;T&gt;{</span><br><span class=\"line\">    public list: T[] = []</span><br><span class=\"line\"></span><br><span class=\"line\">    add(value: T) {</span><br><span class=\"line\">        this.list.push(value)</span><br><span class=\"line\">    }</span><br><span class=\"line\">    min(): T {</span><br><span class=\"line\">        let minest = this.list[0];</span><br><span class=\"line\">        for (let i = 0; i &lt; this.list.length; i++) {</span><br><span class=\"line\">            if (minest &gt; this.list[i]) {</span><br><span class=\"line\">                minest = this.list[i]</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        return minest</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">let ert = new Minclass&lt;number&gt;()</span><br><span class=\"line\">ert.add(34)</span><br><span class=\"line\">ert.add(89)</span><br><span class=\"line\">ert.add(56)</span><br><span class=\"line\">ert.add(67)</span><br><span class=\"line\">ert.add(23)</span><br><span class=\"line\">ert.add(16)</span><br><span class=\"line\">ert.add(79)</span><br><span class=\"line\">alert(ert.min())</span><br><span class=\"line\"></span><br><span class=\"line\">let strs = new Minclass&lt;string&gt;()</span><br><span class=\"line\">strs.add('bc')</span><br><span class=\"line\">strs.add('dfgd')</span><br><span class=\"line\">strs.add('erf')</span><br><span class=\"line\">strs.add('zdf')</span><br><span class=\"line\">strs.add('abcd')</span><br><span class=\"line\">alert(strs.min())</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 写法一</span><br><span class=\"line\">interface configFn {</span><br><span class=\"line\">    &lt;T&gt;(confg: T): T</span><br><span class=\"line\">}</span><br><span class=\"line\">let getData: configFn = function &lt;T&gt;(value: T): T {</span><br><span class=\"line\">    return value;</span><br><span class=\"line\">}</span><br><span class=\"line\">getData&lt;number&gt;(34)</span><br><span class=\"line\"></span><br><span class=\"line\">// 写法二</span><br><span class=\"line\">interface config4&lt;T&gt; {</span><br><span class=\"line\">    (config: T): T</span><br><span class=\"line\">}</span><br><span class=\"line\">function getData2&lt;T&gt;(value: T): T {</span><br><span class=\"line\">    return value;</span><br><span class=\"line\">}</span><br><span class=\"line\">let test: config4&lt;string&gt; = getData2</span><br><span class=\"line\">test('sdfsdf')</span><br></pre></td></tr></tbody></table></figure>\n\n",
            "tags": [
                "前端",
                "typescript"
            ]
        }
    ]
}