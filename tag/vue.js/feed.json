{
    "version": "https://jsonfeed.org/version/1",
    "title": "独白 • All posts by \"vue.js\" tag",
    "description": "博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/09/19/vant-uploader-tu-pian-shang-chuan-gen-ju-hou-duan-url-hui-xian-wen-ti/",
            "url": "http://example.com/2022/09/19/vant-uploader-tu-pian-shang-chuan-gen-ju-hou-duan-url-hui-xian-wen-ti/",
            "title": "Vant Uploader 图片上传，根据后端url回显问题",
            "date_published": "2022-09-19T13:00:45.000Z",
            "content_html": "<p>今天在开发中，用到van-uploader上传。在修改用户信息的时候，需要用到图片回显。</p>\n<p>当图片信息，后端返回的是一个url地址。如何在组件中进行回显呢。</p>\n<p>在官方文档中有提到，可以有自定义上传样式。那我们是不是可以把button换成img，src就用后端返回的url，就可以进行回显了呢。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/4f0089fee79b468b9e1dd12c9ee8cd46.png\"><br>把 van-button换成van-image</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;van-uploader</span><br><span class=\"line\">    :max-count=\"1\"</span><br><span class=\"line\">    :after-read=\"handleUpload\"</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">        &lt;van-image  width=\"60\" height=\"60\" </span><br><span class=\"line\">             :src=\"formTenant.merchantHead?formTenant.merchantHead:require('@/assets/morentu.png')\" /&gt;</span><br><span class=\"line\">&lt;/van-uploader&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p> formTenant.merchantHead就是后端返回的url，以上用了三元表达式，如果后端有返回值，就渲染返回值，如果没有则渲染默认图片。</p>\n<p>以上就是Vant Uploader 图片回显，特此记录。</p>\n",
            "tags": [
                "javascript",
                "vue.js"
            ]
        },
        {
            "id": "http://example.com/2022/09/19/qian-hou-duan-fen-chi-kai-fa-zhi-quan-xian-pian-ji-vue-lu-you-shou-wei-next-next-to-replace-true-next-shuo-ming/",
            "url": "http://example.com/2022/09/19/qian-hou-duan-fen-chi-kai-fa-zhi-quan-xian-pian-ji-vue-lu-you-shou-wei-next-next-to-replace-true-next-shuo-ming/",
            "title": "前后端分离开发之权限篇及VUE路由守卫",
            "date_published": "2022-09-19T12:59:28.000Z",
            "content_html": "<p>写项目过程中在权限部分遇到了不少有关<code>next()</code>的问题，解决完之后发现对于权限篇的整体逻辑清晰不少，在这里记录一下。<br>首先是路由守卫，是不是感觉简简单单</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach((to, from, next) =&gt; {</span><br><span class=\"line\">\tto // 要去的路由</span><br><span class=\"line\">\tfrom // 当前路由</span><br><span class=\"line\">\tnext() // 放行的意思</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>但是在看别的项目时常常能看到<code>next('/logon')</code>、<code>next(to)</code> 或者 <code>next({ ...to, replace: true })</code> 这又是啥意思呢</p>\n<p>其实在路由守卫中，只有<code>next()</code>是放行，其他的诸如：<code>next('/logon')</code>、<code>next(to) </code>或者 <code>next({ ...to, replace: true })</code>都不是放行，而是：中断当前导航，执行新的导航</p>\n<h3 id=\"可以这么理解：\"><a href=\"#可以这么理解：\" class=\"headerlink\" title=\"可以这么理解：\"></a><strong>可以这么理解：</strong></h3><p><code>next()</code>是放行，但是如果<code>next()</code>里有参数的话，<code>next()</code>就像被重载一样，就有了不同的功能。</p>\n<p>而对于上面说的中断当前导航，执行新的导航打个比方：</p>\n<p>现在我有一个守卫，在守卫中我使用<code>next('/logon')</code>，肯定有同学认为是会直接跳转到<code>/logon</code>路由：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach((to, from, next) =&gt; {</span><br><span class=\"line\">  next('/logon')</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>然而年轻人不讲武德，执行时需要这么看：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach((to, from, next) =&gt; {</span><br><span class=\"line\">  beforeEach(('/logon', from, next) =&gt; {</span><br><span class=\"line\">  \t beforeEach(('/logon', from, next) =&gt; {</span><br><span class=\"line\">  \t \t beforeEach(('/logon', from, next) =&gt; {</span><br><span class=\"line\">  \t \t \tbeforeEac...  // 一直循环下去...... , 因为我们没有使用 next() 放行</span><br><span class=\"line\"> \t\t}</span><br><span class=\"line\"> \t }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>如果把这个守卫改一下，当我在地址栏输入<code>/home</code>时</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach((to, from, next) =&gt; {</span><br><span class=\"line\">   if(to.path === '/home') {</span><br><span class=\"line\">   \tnext('/logon')</span><br><span class=\"line\">   } else {</span><br><span class=\"line\">    // 如果要去的地方不是 /home ， 就放行</span><br><span class=\"line\">   \tnext()</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>我本来要去<code>/home</code>路由，因此执行了第一次 <code>beforeEach((to, from, next)</code></p>\n<p>但是这个路由守卫中判断了如果要去的地方是<code>'/home'</code>，就执行<code>next('/logon')</code>，</p>\n<p>所以想要访问<code>/home</code>可以这么看</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach((to, from, next) =&gt; {</span><br><span class=\"line\">   beforeEach(('/logon', from, next) =&gt; {</span><br><span class=\"line\">     next()  // 现在要去的地方不是 /home ， 因此放行</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"正以为如此很多人在使用动态添加路由addRoutes-会遇到下面的情况：\"><a href=\"#正以为如此很多人在使用动态添加路由addRoutes-会遇到下面的情况：\" class=\"headerlink\" title=\"正以为如此很多人在使用动态添加路由addRoutes()会遇到下面的情况：\"></a>正以为如此很多人在使用动态添加路由addRoutes()会遇到下面的情况：</h4><p>在addRoutes()之后第一次访问被添加的路由会白屏，这是因为刚刚addRoutes()就立刻访问被添加的路由，然而此时addRoutes()没有执行结束，因而找不到刚刚被添加的路由导致白屏。因此需要从新访问一次路由才行。</p>\n<p>该如何解决这个问题 ?<br>此时就要使用<code>next({ ...to, replace: true })</code>来确保<code>addRoutes()</code>时动态添加的路由已经被完全加载上去。</p>\n<p><code>next({ ...to, replace: true })</code>中的<code>replace: true</code>只是一个设置信息，告诉VUE本次操作后，不能通过浏览器后退按钮，返回前一个路由。</p>\n<p>因此<code>next({ ...to, replace: true })</code>可以写成<code>next({ ...to })</code>，不过你应该不希望用户在<code>addRoutes()</code>还没有完成的时候，可以点击浏览器回退按钮搞事情吧。</p>\n<p>其实<code>next({ ...to })</code>的执行很简单，它会判断：</p>\n<p>如果参数to不能找到对应的路由的话，就再执行一次<code>beforeEach((to, from, next)</code>直到其中的<code>next({ ...to})</code>能找到对应的路由为止。</p>\n<p>也就是说此时<code>addRoutes()</code>已经完成啦，找到对应的路由之后，接下来将执行前往对应路由的<code>beforeEach((to, from, next)</code> ，因此需要用代码来判断这一次是否就是前往对应路由的<code>beforeEach((to, from, next)</code>，如果是，就执行<code>next()</code>放行。</p>\n<p>如果守卫中没有正确的放行出口的话，会一直<code>next({ ...to}</code>)进入死循环 !!!</p>\n<p>因此你还需要确保在当<code>addRoutes()</code>已经完成时，所执行到的这一次<code>beforeEach((to, from, next)</code>中有一个正确的<code>next()</code>方向出口。</p>\n<h4 id=\"因此想实现动态添加路由的操作的话，代码应该是这样的：\"><a href=\"#因此想实现动态添加路由的操作的话，代码应该是这样的：\" class=\"headerlink\" title=\"因此想实现动态添加路由的操作的话，代码应该是这样的：\"></a>因此想实现动态添加路由的操作的话，代码应该是这样的：</h4><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach((to, from, next) =&gt; {</span><br><span class=\"line\"> const token = sessionStorage.getItem('access_token')</span><br><span class=\"line\"> // 存在 token 说明已经登录</span><br><span class=\"line\"> if (token) {</span><br><span class=\"line\">   // 登录过就不能访问登录界面，需要中断这一次路由守卫，执行下一次路由守卫，并且下一次守卫的to是主页'</span><br><span class=\"line\">   if (to.path === '/login') {</span><br><span class=\"line\">     next({ path: '/' })</span><br><span class=\"line\">   }</span><br><span class=\"line\">   // 保存在store中路由不为空则放行 (如果执行了刷新操作，则 store 里的路由为空，此时需要重新添加路由)</span><br><span class=\"line\">   if (store.getters.getRoutes.length || to.name != null) {</span><br><span class=\"line\">     //放行</span><br><span class=\"line\">     next()</span><br><span class=\"line\">   } else {</span><br><span class=\"line\">     // 将路由添加到 store 中，用来标记已添加动态路由</span><br><span class=\"line\">     store.commit('ADD_ROUTER', '需要添加的路由')</span><br><span class=\"line\">     router.addRoutes('需要添加的路由')</span><br><span class=\"line\">     // 如果 addRoutes 并未完成，路由守卫会一层一层的执行执行，直到 addRoutes 完成，找到对应的路由</span><br><span class=\"line\">     next({ ...to, replace: true })</span><br><span class=\"line\">   }</span><br><span class=\"line\"> } else {</span><br><span class=\"line\">   // 未登录时，注意 ：在这里也许你的项目不只有 logon 不需要登录 ，register 等其他不需要登录的页面也需要处理</span><br><span class=\"line\">   if (to.path !== '/logon') {</span><br><span class=\"line\">     next({ path: '/logon' })</span><br><span class=\"line\">   } else {</span><br><span class=\"line\">     next()</span><br><span class=\"line\">   }</span><br><span class=\"line\"> }</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>核心的权限判断方法到这里就基本已经实现了。逻辑大致如此，至于源码，贴到下面~</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import router from './routers';</span><br><span class=\"line\">import store from '@/store';</span><br><span class=\"line\">import NProgress from 'nprogress'; // progress bar</span><br><span class=\"line\">import 'nprogress/nprogress.css';// progress bar style</span><br><span class=\"line\">import { getToken } from '@/utils/auth'; // getToken from cookie</span><br><span class=\"line\">import { buildMenus } from '@api/menu';</span><br><span class=\"line\">import { filterAsyncRouter } from '@/store/modules/permission';</span><br><span class=\"line\"></span><br><span class=\"line\">NProgress.configure({ showSpinner: false });// NProgress Configuration</span><br><span class=\"line\"></span><br><span class=\"line\">const whiteList = ['/login', '/register', '/about', '/page/home'];      // no redirect whitelist</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach((to, from, next) =&gt; {</span><br><span class=\"line\">    NProgress.start();</span><br><span class=\"line\">    if (getToken()) {</span><br><span class=\"line\">    // 已登录且要跳转的页面是登录页</span><br><span class=\"line\">        if (to.path === '/login') {</span><br><span class=\"line\">            next({ path: '/' });</span><br><span class=\"line\">            NProgress.done();</span><br><span class=\"line\">        } else {</span><br><span class=\"line\">            if (judgeObj(store.getters.user)) { // 判断当前用户是否已拉取完user_info信息</span><br><span class=\"line\">                store.dispatch('user/GetInfo').then(res =&gt; { // 拉取user_info</span><br><span class=\"line\">                    // 动态路由，拉取菜单</span><br><span class=\"line\">                    loadMenus(next, to);</span><br><span class=\"line\">                }).catch((err) =&gt; {</span><br><span class=\"line\">                    console.log(err);</span><br><span class=\"line\">                    store.dispatch('user/LogOut').then(() =&gt; {</span><br><span class=\"line\">                        location.reload(); // 为了重新实例化vue-router对象 避免bug</span><br><span class=\"line\">                    });</span><br><span class=\"line\">                });</span><br><span class=\"line\">                // 登录时未拉取 菜单，在此处拉取</span><br><span class=\"line\">            } else if (store.getters.loadMenus) {</span><br><span class=\"line\">                // 修改成false，防止死循环</span><br><span class=\"line\">                store.dispatch('user/updateLoadMenus').then(res =&gt; {});</span><br><span class=\"line\">                loadMenus(next, to);</span><br><span class=\"line\">            } else {</span><br><span class=\"line\">                next();</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    } else {</span><br><span class=\"line\">    /* has no token*/</span><br><span class=\"line\">        console.log('no token', to.path);</span><br><span class=\"line\">        if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        } else {</span><br><span class=\"line\">            next(`/page/home?redirect=${to.fullPath}`); // 否则全部重定向到首页</span><br><span class=\"line\">            NProgress.done();</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 判断是否为空对象</span><br><span class=\"line\"> * @param {*} obj</span><br><span class=\"line\"> * @returns</span><br><span class=\"line\"> */</span><br><span class=\"line\">function judgeObj(obj) {</span><br><span class=\"line\">    if (obj &amp;&amp; Object.keys(obj).length === 0) return true;</span><br><span class=\"line\">    else return false;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">export const loadMenus = (next, to) =&gt; {</span><br><span class=\"line\">    // 通过接口动态获取数据库保存的路由表</span><br><span class=\"line\">    buildMenus().then(res =&gt; {</span><br><span class=\"line\">        if (res.data) {</span><br><span class=\"line\">        //filterAsyncRouter()  根据需求自己写的方法，遍历后台传来的路由字符串，转换为组件对象</span><br><span class=\"line\">            const asyncRouter = filterAsyncRouter(res.data);</span><br><span class=\"line\">            asyncRouter.push({ path: '*', redirect: '/404', hidden: true });</span><br><span class=\"line\">            store.dispatch('permission/GenerateRoutes', asyncRouter).then(() =&gt; { // 存储路由</span><br><span class=\"line\">                router.addRoutes(asyncRouter); // 动态添加可访问路由表</span><br><span class=\"line\">                next({ ...to, replace: true });</span><br><span class=\"line\">            });</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">router.afterEach(() =&gt; {</span><br><span class=\"line\">    NProgress.done(); // finish progress bar</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\">export default router;</span><br></pre></td></tr></tbody></table></figure>",
            "tags": [
                "javascript",
                "前端",
                "vue.js"
            ]
        },
        {
            "id": "http://example.com/2022/09/19/vue3-zheng-he-mock-js-2022/",
            "url": "http://example.com/2022/09/19/vue3-zheng-he-mock-js-2022/",
            "title": "vue3 整合 mock.js（2022）",
            "date_published": "2022-09-19T12:59:16.000Z",
            "content_html": "<h2 id=\"第一步：安装\"><a href=\"#第一步：安装\" class=\"headerlink\" title=\"第一步：安装\"></a>第一步：安装</h2><h3 id=\"1-安装mockjs\"><a href=\"#1-安装mockjs\" class=\"headerlink\" title=\"1. 安装mockjs\"></a>1. 安装mockjs</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将mockjs 安装在 devDependencies 中，只能在生产环境中起作用</span><br><span class=\"line\">npm install mockjs -D</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"2-安装axios\"><a href=\"#2-安装axios\" class=\"headerlink\" title=\"2. 安装axios\"></a>2. 安装axios</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i axios --save</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"第二步：编写请求文件user-ts\"><a href=\"#第二步：编写请求文件user-ts\" class=\"headerlink\" title=\"第二步：编写请求文件user.ts\"></a>第二步：编写请求文件user.ts</h2><h3 id=\"1-在src下面新建mock文件夹，然后在其中创建-index-ts-文件\"><a href=\"#1-在src下面新建mock文件夹，然后在其中创建-index-ts-文件\" class=\"headerlink\" title=\"1.在src下面新建mock文件夹，然后在其中创建 index.ts 文件\"></a>1.在src下面新建mock文件夹，然后在其中创建 <code>index.ts</code> 文件</h3><p>将所需的mock请求文件<code>home.ts</code>引入，并在该页面做相关mock配置，具体配置可查看官网。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首先引入Mock</span><br><span class=\"line\">const Mock = require('mockjs')</span><br><span class=\"line\"></span><br><span class=\"line\">// 引入所有的mock文件</span><br><span class=\"line\">require('@/mock/api/home')</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置拦截ajax请求的相应时间</span><br><span class=\"line\">// Mock.setup({</span><br><span class=\"line\">//     timeout: '200-600'</span><br><span class=\"line\">// });</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"2-在mock文件夹下建立api文件夹，mock请求文件在该页面写入。\"><a href=\"#2-在mock文件夹下建立api文件夹，mock请求文件在该页面写入。\" class=\"headerlink\" title=\"2. 在mock文件夹下建立api文件夹，mock请求文件在该页面写入。\"></a>2. 在mock文件夹下建立api文件夹，mock请求文件在该页面写入。</h3><p>以下示例文件为<code>home.ts</code> 文件,包含增删改查操作，供大家参考。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Mocks = require(\"mockjs\")</span><br><span class=\"line\"></span><br><span class=\"line\">const tipList = [</span><br><span class=\"line\">    {</span><br><span class=\"line\">        id: 0,</span><br><span class=\"line\">        title: \"冬\",</span><br><span class=\"line\">        content: \"农历正月初五,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">        id: 1,</span><br><span class=\"line\">        title: \"每日计划\",</span><br><span class=\"line\">        content: \"每日计划\"</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">        id: 2,</span><br><span class=\"line\">        title: \"明日安排\",</span><br><span class=\"line\">        content: \"明日安排\"</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">        id: 3,</span><br><span class=\"line\">        title: \"会议总结\",</span><br><span class=\"line\">        content: \"会议议题。出现了什么问题;信息分享\"</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">        id: 4,</span><br><span class=\"line\">        title: \"电影清单\",</span><br><span class=\"line\">        content: \"电影\"</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">        id: 5,</span><br><span class=\"line\">        title: \"歌曲收藏\",</span><br><span class=\"line\">        content: \"无感\"</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">        id: 6,</span><br><span class=\"line\">        title: \"路程\",</span><br><span class=\"line\">        content: \"路程\"</span><br><span class=\"line\">    }, {</span><br><span class=\"line\">        id: 7,</span><br><span class=\"line\">        title: \"联系电话\",</span><br><span class=\"line\">        content: \"2343242342342343\"</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">        id: 8,</span><br><span class=\"line\">        title: \"邮箱\",</span><br><span class=\"line\">        content: \"24534534534@qq.com\"</span><br><span class=\"line\">    },</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取所有便签</span><br><span class=\"line\">const article = Mocks.mock(\"/home/article\", () =&gt; {</span><br><span class=\"line\">    return tipList</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">// 搜索便签</span><br><span class=\"line\">const selectA = Mocks.mock(\"/home/selectArticle\", (ops: any) =&gt; {</span><br><span class=\"line\">    const obj = eval(\"(\" + ops.body + \")\")</span><br><span class=\"line\">    const list: any[] = []</span><br><span class=\"line\">    tipList.filter((item) =&gt; {</span><br><span class=\"line\">        if (item.title.indexOf(obj.val) &gt;= 0) {</span><br><span class=\"line\">            list.push(item)</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br><span class=\"line\">    return list;</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取便签详情s</span><br><span class=\"line\">const details = Mocks.mock(\"/getDetail\", (ops: any) =&gt; {</span><br><span class=\"line\">    const obj = eval(\"(\" + ops.body + \")\")</span><br><span class=\"line\">    for (let i = 0; i &lt; tipList.length; i++) {</span><br><span class=\"line\">        if (tipList[i].id == obj.id) {</span><br><span class=\"line\">            return tipList[i]</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">})</span><br><span class=\"line\">// 修改便签内容</span><br><span class=\"line\">const fex = Mocks.mock(\"/api/updateTip\", (ops: any) =&gt; {</span><br><span class=\"line\">    const obj = eval(\"(\" + ops.body + \")\")</span><br><span class=\"line\">    tipList[obj.data.id].title = obj.data.title</span><br><span class=\"line\">    tipList[obj.data.id].content = obj.data.content</span><br><span class=\"line\">})</span><br><span class=\"line\">// 删除便签</span><br><span class=\"line\">const del = Mocks.mock(\"/api/deleteTip\", (ops: any) =&gt; {</span><br><span class=\"line\">    const obj = eval(\"(\" + ops.body + \")\")</span><br><span class=\"line\">    for (let i = 0; i &lt; tipList.length; i++) {</span><br><span class=\"line\">        if (tipList[i].id == obj.id) {</span><br><span class=\"line\">            tipList.splice(i, 1)</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">})</span><br><span class=\"line\">// 新增便签</span><br><span class=\"line\">const add = Mocks.mock(\"/api/addTip\", (ops: any) =&gt; {</span><br><span class=\"line\">    const obj = eval(\"(\" + ops.body + \")\")</span><br><span class=\"line\">    obj.data.id=tipList.length</span><br><span class=\"line\">    tipList.push(obj.data)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 返回模拟的数据及接口：</span><br><span class=\"line\">module.exports = (router) =&gt; {</span><br><span class=\"line\">    return [</span><br><span class=\"line\">        router.get('/api/article', article),</span><br><span class=\"line\">        router.get('/home/selectArticle', selectA),</span><br><span class=\"line\">        router.get('/api/getDetail', details),</span><br><span class=\"line\">        router.post('/api/updateTip', fex),</span><br><span class=\"line\">        router.delete('/api/deleteTip', del),</span><br><span class=\"line\">        router.put('/api/addTip', add),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-写接口文件\"><a href=\"#3-写接口文件\" class=\"headerlink\" title=\"3.写接口文件\"></a>3.写接口文件</h3><p>在src 文件夹下新建 <code>api文件夹</code> ，在文件夹下新建<code>home.ts 文件</code></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from 'axios'</span><br><span class=\"line\"></span><br><span class=\"line\">export function getArticles() {</span><br><span class=\"line\">    return axios.get('/home/article')  // mockjs返回的接口</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 搜索便签</span><br><span class=\"line\">export function selectA(val) {</span><br><span class=\"line\">    return axios.get('/home/selectArticle', { data: val })</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 详情</span><br><span class=\"line\">export function getDetail(id) {</span><br><span class=\"line\">    return axios.get('/getDetail', { data: id })</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改便签</span><br><span class=\"line\">export function fex(data) {</span><br><span class=\"line\">    return axios.post('/api/updateTip', { data: data })</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除便签</span><br><span class=\"line\">export function del(id) {</span><br><span class=\"line\">    return axios.delete('/api/deleteTip', { data: id })</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 新增便签</span><br><span class=\"line\">export function add(data) {</span><br><span class=\"line\">    return axios.put('/api/addTip', { data: data })</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-在页面中引入\"><a href=\"#4-在页面中引入\" class=\"headerlink\" title=\"4.在页面中引入\"></a>4.在页面中引入</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import { getDetail } from \"../../api/home\";</span><br><span class=\"line\">...</span><br><span class=\"line\">setup(){</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tgetDetail(data).then((e) =&gt; {</span><br><span class=\"line\">        if (e != null) {</span><br><span class=\"line\">          datas.title = e.data.title;</span><br><span class=\"line\">          datas.content = e.data.content;</span><br><span class=\"line\">        } else {</span><br><span class=\"line\">          datas.title = \"\";</span><br><span class=\"line\">          datas.content = \"\";</span><br><span class=\"line\">        }</span><br><span class=\"line\">      });</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h3><p><img src=\"https://img-blog.csdnimg.cn/35db179f75fa46e1a042fa8923ff8fbb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16\"></p>\n",
            "tags": [
                "前端",
                "开发语言",
                "vue.js"
            ]
        },
        {
            "id": "http://example.com/2022/09/19/vue-de-kuo-zhan-yun-suan-fu/",
            "url": "http://example.com/2022/09/19/vue-de-kuo-zhan-yun-suan-fu/",
            "title": "VUE的扩展运算符",
            "date_published": "2022-09-19T12:58:24.000Z",
            "content_html": "<p>含义：<br>扩展运算符（ spread ）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。<br>操作数组：</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//里面放自己定义的方法</span></span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 把数组中的元素孤立起来</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">iClick</span>() {</span><br><span class=\"line\">        let iArray = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>];</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(...iArray);</span><br><span class=\"line\">        <span class=\"comment\">// 打印结果  1 2 3</span></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 在数组中添加元素</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">iClick3</span>() {</span><br><span class=\"line\">        let iArray = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>];</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>([<span class=\"string\">'0'</span>, ...iArray, <span class=\"string\">'4'</span>]);</span><br><span class=\"line\">        <span class=\"comment\">// 打印结果  [\"0\", \"1\", \"2\", \"3\", \"4\"]</span></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 在数组中删除元素（取出一个元素）</span></span><br><span class=\"line\"><span class=\"comment\">       * 与结构赋值的结合</span></span><br><span class=\"line\"><span class=\"comment\">       * 如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">iClick8</span>() {</span><br><span class=\"line\">        <span class=\"type\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(first);</span><br><span class=\"line\">        <span class=\"comment\">// 打印结果 1</span></span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>([...rest]);</span><br><span class=\"line\">        <span class=\"comment\">// 打印结果 [2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">const</span> [one, ...last] = [<span class=\"string\">\"foo\"</span>];</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(one);</span><br><span class=\"line\">        <span class=\"comment\">//打印结果 foo</span></span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>([...last]);</span><br><span class=\"line\">        <span class=\"comment\">//打印结果 []</span></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 数组的合并</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">iClick6</span>() {</span><br><span class=\"line\">        <span class=\"comment\">// ES6 的写法</span></span><br><span class=\"line\">        var arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">        var arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">        arr1.<span class=\"built_in\">push</span>(...arr2);</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(arr1);</span><br><span class=\"line\">        <span class=\"comment\">//  打印结果 [0, 1, 2, 3, 4, 5]</span></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 数组的合并（推荐使用）</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">iClick7</span>() {</span><br><span class=\"line\">        var arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">        var arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>([...arr1, ...arr2]);</span><br><span class=\"line\">        <span class=\"comment\">//  打印结果 [0, 1, 2, 3, 4, 5]</span></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 将字符串转成数组</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">iClick9</span>() {</span><br><span class=\"line\">        let iString = <span class=\"string\">'woshizhongguoren'</span>;</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>([...iString]);</span><br><span class=\"line\">        <span class=\"comment\">//  打印结果 [\"w\", \"o\", \"s\", \"h\", \"i\", \"z\", \"h\", \"o\", \"n\", \"g\", \"g\", \"u\", \"o\", \"r\", \"e\", \"n\"]</span></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * Map 和 Set 结构， Generator 函数</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">iClick10</span>() {</span><br><span class=\"line\">        let map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">          [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">          [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">          [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        let arr = [...map.<span class=\"built_in\">keys</span>()];</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(arr);</span><br><span class=\"line\">        <span class=\"comment\">//  打印结果 [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 当做参数传递</span></span><br><span class=\"line\"><span class=\"comment\">       * 和直接传数组的区别</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">iClick4</span>() {</span><br><span class=\"line\">        let iArray = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>];</span><br><span class=\"line\">        <span class=\"comment\">//注意传的时候，就要三个点</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"built_in\">hanshu</span>(...iArray);</span><br><span class=\"line\">      },</span><br><span class=\"line\">      <span class=\"built_in\">hanshu</span>(...iArray) {</span><br><span class=\"line\">        let ooo = <span class=\"number\">1</span>;</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(...iArray);</span><br><span class=\"line\">        <span class=\"comment\">//  打印结果 1 2 3</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 求出最大值</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">iClick5</span>() {</span><br><span class=\"line\">        let iArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">99</span>, <span class=\"number\">44</span>, <span class=\"number\">66</span>, <span class=\"number\">21</span>, <span class=\"number\">85</span>, <span class=\"number\">77</span>];</span><br><span class=\"line\">        let ooo = Math.<span class=\"built_in\">max</span>(...iArray);</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(ooo);</span><br><span class=\"line\">        <span class=\"comment\">//  打印结果 99</span></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 如果对没有iterator接口的对象，使用扩展运算符，将会报错。</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">iClick11</span>() {</span><br><span class=\"line\">        let obj = {</span><br><span class=\"line\">          name: <span class=\"string\">'zhh'</span>,</span><br><span class=\"line\">          age: <span class=\"string\">'20'</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>([...obj]);</span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">操作对象：</span><br><span class=\"line\"> methods: {</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 添加一个属性</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">method3</span>() {</span><br><span class=\"line\">        let a = {age: <span class=\"number\">18</span>, id: <span class=\"number\">10</span>};</span><br><span class=\"line\">        <span class=\"comment\">// 把 name 属性，放到对象中</span></span><br><span class=\"line\">        let c = {name: <span class=\"string\">'zhh'</span>, ...a};</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(c);</span><br><span class=\"line\">        <span class=\"comment\">//  打印结果  {name: \"zhh\", age: 18, id: 10}</span></span><br><span class=\"line\"></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 修改一个属性</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">method2</span>() {</span><br><span class=\"line\">        let a = {name: <span class=\"string\">'zhh'</span>, age: <span class=\"number\">18</span>, id: <span class=\"number\">10</span>};</span><br><span class=\"line\">        <span class=\"comment\">//先拿到a, 后面的name:zhh1,把 a 中name 的值替换掉了</span></span><br><span class=\"line\">        let c = {...a, name: <span class=\"string\">'zhh1'</span>};</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(c);</span><br><span class=\"line\">        <span class=\"comment\">// 打印结果  {name: \"zhh1\", age: 18, id: 10}</span></span><br><span class=\"line\"></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 删除一个属性（拿出属性或者对象）</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">method1</span>() {</span><br><span class=\"line\">        let a = {name: <span class=\"string\">'zhh'</span>, age: <span class=\"number\">18</span>, id: <span class=\"number\">10</span>};</span><br><span class=\"line\">        let {name, ...c} = a;</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(name, c);</span><br><span class=\"line\">        <span class=\"comment\">//  打印结果 zhh {age: 18, id: 10}</span></span><br><span class=\"line\">      },</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n",
            "tags": [
                "javascript",
                "前端",
                "vue.js"
            ]
        },
        {
            "id": "http://example.com/2022/09/19/vue-qing-chu-form-biao-dan-er-ci-dan-chu-biao-dan-shi-shang-ci-de-ti-shi-xin-xi/",
            "url": "http://example.com/2022/09/19/vue-qing-chu-form-biao-dan-er-ci-dan-chu-biao-dan-shi-shang-ci-de-ti-shi-xin-xi/",
            "title": "Vue 清除Form 表单二次弹出表单时上次的提示信息",
            "date_published": "2022-09-19T12:57:49.000Z",
            "content_html": "<p>二次打开表单，验证提示信息还在，如何解决呢？<br><img src=\"https://img-blog.csdnimg.cn/912b4eb3c3954c43a43d49cdcc2d8ba6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_14,color_FFFFFF,t_70,g_se,x_16\"><br>话不多说，直接上代码<br>在弹出表单方法内加入下面代码即可<br><strong>①清除表单内容和清除表单验证消息</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$nextTick(()=&gt;{</span><br><span class=\"line\">\tthis.$refs.form.resetFields();</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>②只清除表单验证消息、不清楚表单内容</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$nextTick(()=&gt;{</span><br><span class=\"line\">  this.$refs['form'].clearValidate() // 只清除清除验证</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>",
            "tags": [
                "前端",
                "vue.js"
            ]
        },
        {
            "id": "http://example.com/2022/09/19/elementui-zhi-cascader-ji-lian-xuan-ze-qi-zhi-ding-value-label/",
            "url": "http://example.com/2022/09/19/elementui-zhi-cascader-ji-lian-xuan-ze-qi-zhi-ding-value-label/",
            "title": "ElementUI 之 Cascader 级联选择器指定 value label",
            "date_published": "2022-09-19T12:57:25.000Z",
            "content_html": "<p>ElementUI 的 Cascader 级联选择器对 :options=”options” 里的数据格式是有特定要求的：input 框显示的值是 options 里的 label 值。如果 options 的键值对不是 value label ，就需要 props 来配置。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-cascader</span><br><span class=\"line\"> ref=\"cascader\"</span><br><span class=\"line\">    v-model=\"companyForm.industry\"</span><br><span class=\"line\">    style=\"width: 500px; \"</span><br><span class=\"line\">    :options=\"belongIndustry\"</span><br><span class=\"line\">    :props=\"{ multiple: true, emitPath:false }\"</span><br><span class=\"line\">    :clearable=\"true\"</span><br><span class=\"line\">    @change=\"nodeValue\"</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">export default { </span><br><span class=\"line\">　　data() {</span><br><span class=\"line\">　　　　belongIndustry:[</span><br><span class=\"line\">　　　　　　{ id: 1, name: '第一层', children: [ id: 11, name: '水果']},</span><br><span class=\"line\">　　　　　　{ id: 2, name: '第二层', children: [ id: 22, name: '蔬菜'] },</span><br><span class=\"line\">　　　　]</span><br><span class=\"line\">　　}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/bbb2df70a4a2492e9fa2f83901c8405a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16\"></p>\n",
            "tags": [
                "javascript",
                "elementui",
                "vue.js"
            ]
        },
        {
            "id": "http://example.com/2022/09/19/qu-xiao-el-upload-zi-dai-dong-hua-xiao-guo-ji-tu-pian-bu-cai-jian-gong-neng/",
            "url": "http://example.com/2022/09/19/qu-xiao-el-upload-zi-dai-dong-hua-xiao-guo-ji-tu-pian-bu-cai-jian-gong-neng/",
            "title": "取消el-upload自带动画效果及图片不裁剪功能",
            "date_published": "2022-09-19T12:51:55.000Z",
            "content_html": "<p>在应用el-upload所在页面加上如下代码，可以取消过渡效果，并且更改图片显示方式</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*去除upload组件过渡效果*/</span></span><br><span class=\"line\">.<span class=\"property\">el</span>-upload-list__item {</span><br><span class=\"line\">  <span class=\"attr\">transition</span>: none !important;</span><br><span class=\"line\">}</span><br><span class=\"line\"> .<span class=\"property\">el</span>-upload-list__item-thumbnail {</span><br><span class=\"line\">    <span class=\"comment\">/* 图片在方框内显示长边 */</span></span><br><span class=\"line\">    object-<span class=\"attr\">fit</span>: scale-down !important;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果加上后仍然没有效果，可以加上::v-deep深度选择器</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*去除upload组件过渡效果*/</span></span><br><span class=\"line\">::v-deep .<span class=\"property\">el</span>-upload-list__item {</span><br><span class=\"line\">  <span class=\"attr\">transition</span>: none !important;</span><br><span class=\"line\">}</span><br><span class=\"line\">::v-deep .<span class=\"property\">el</span>-upload-list__item-thumbnail {</span><br><span class=\"line\">    <span class=\"comment\">/* 图片在方框内显示长边 */</span></span><br><span class=\"line\">    object-<span class=\"attr\">fit</span>: scale-down !important;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>一起试试吧！！</p>\n",
            "tags": [
                "vue.js",
                "动画",
                "css3"
            ]
        }
    ]
}