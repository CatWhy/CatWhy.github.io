<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>独白 • Posts by &#34;javascript&#34; tag</title>
        <link>http://example.com</link>
        <description>博客</description>
        <language>zh-CN</language>
        <pubDate>Mon, 19 Sep 2022 21:00:45 +0800</pubDate>
        <lastBuildDate>Mon, 19 Sep 2022 21:00:45 +0800</lastBuildDate>
        <category>elementui</category>
        <category>vue.js</category>
        <category>javascript</category>
        <category>前端</category>
        <category>开发语言</category>
        <category>原型模式</category>
        <category>react.js</category>
        <category>typescript</category>
        <category>Vue</category>
        <category>npm</category>
        <category>node.js</category>
        <category>git</category>
        <category>动画</category>
        <category>css3</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/09/19/vant-uploader-tu-pian-shang-chuan-gen-ju-hou-duan-url-hui-xian-wen-ti/</guid>
            <title>Vant Uploader 图片上传，根据后端url回显问题</title>
            <link>http://example.com/2022/09/19/vant-uploader-tu-pian-shang-chuan-gen-ju-hou-duan-url-hui-xian-wen-ti/</link>
            <category>vue.js</category>
            <category>javascript</category>
            <pubDate>Mon, 19 Sep 2022 21:00:45 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;今天在开发中，用到van-uploader上传。在修改用户信息的时候，需要用到图片回显。&lt;/p&gt;
&lt;p&gt;当图片信息，后端返回的是一个url地址。如何在组件中进行回显呢。&lt;/p&gt;
&lt;p&gt;在官方文档中有提到，可以有自定义上传样式。那我们是不是可以把button换成img，src就用后端返回的url，就可以进行回显了呢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/4f0089fee79b468b9e1dd12c9ee8cd46.png&#34;&gt;&lt;br&gt;把 van-button换成van-image&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;van-uploader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :max-count=&#34;1&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :after-read=&#34;handleUpload&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;van-image  width=&#34;60&#34; height=&#34;60&#34; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             :src=&#34;formTenant.merchantHead?formTenant.merchantHead:require(&#39;@/assets/morentu.png&#39;)&#34; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/van-uploader&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; formTenant.merchantHead就是后端返回的url，以上用了三元表达式，如果后端有返回值，就渲染返回值，如果没有则渲染默认图片。&lt;/p&gt;
&lt;p&gt;以上就是Vant Uploader 图片回显，特此记录。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/09/19/zheng-que-li-jie-bi-bao-ji-bi-bao-shi-yong-chang-jing/</guid>
            <title>正确理解闭包及闭包使用场景</title>
            <link>http://example.com/2022/09/19/zheng-que-li-jie-bi-bao-ji-bi-bao-shi-yong-chang-jing/</link>
            <category>javascript</category>
            <category>前端</category>
            <pubDate>Mon, 19 Sep 2022 20:59:44 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/00d7a66689c0458fbee6649a256abf82.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34; alt=&#34;请添加图片描述&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;一、闭包的特性&#34;&gt;&lt;a href=&#34;#一、闭包的特性&#34; class=&#34;headerlink&#34; title=&#34;一、闭包的特性&#34;&gt;&lt;/a&gt;一、闭包的特性&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;函数嵌套函数 &lt;/li&gt;
&lt;li&gt;函数内部可以引用外部的参数和变量 &lt;/li&gt;
&lt;li&gt;参数和变量不会被垃圾回收机制回收&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;二、闭包的定义及其优缺点&#34;&gt;&lt;a href=&#34;#二、闭包的定义及其优缺点&#34; class=&#34;headerlink&#34; title=&#34;二、闭包的定义及其优缺点&#34;&gt;&lt;/a&gt;二、闭包的定义及其优缺点&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;br&gt;闭包 是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;br&gt;闭包的缺点就是常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;存在闭包的原因：&lt;/strong&gt;&lt;br&gt;内部的函数存在外部作用域的引用就会导致闭包。&lt;/p&gt;
&lt;p&gt;闭包是javascript语言的一大特点，主要应用闭包场合主要是为了：设计私有的方法和变量。&lt;br&gt;一般函数执行完毕后，局部活动对象就被销毁，内存中仅仅保存全局作用域。但闭包的情况不同！&lt;/p&gt;
&lt;h1 id=&#34;三、嵌套函数的闭包&#34;&gt;&lt;a href=&#34;#三、嵌套函数的闭包&#34; class=&#34;headerlink&#34; title=&#34;三、嵌套函数的闭包&#34;&gt;&lt;/a&gt;三、嵌套函数的闭包&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function aaa() {  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var a = 1;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   alert(a++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  };  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}         &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var fun = aaa();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fun();// 1 执行后 a++，，然后a还在~  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fun();// 2   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fun = null;//a被回收！！ &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;闭包&lt;/strong&gt;会使变量始终保存在内存中，如果不当使用会增大内存消耗。&lt;/p&gt;
&lt;h1 id=&#34;四、javascript的垃圾回收原理&#34;&gt;&lt;a href=&#34;#四、javascript的垃圾回收原理&#34; class=&#34;headerlink&#34; title=&#34;四、javascript的垃圾回收原理&#34;&gt;&lt;/a&gt;四、javascript的垃圾回收原理&lt;/h1&gt;&lt;p&gt; 不同的编程语言管理内存的方式各不相同。一些高级编程语言的解释器或运行时嵌入了“垃圾回收器”，通过算法可自动的进行内存的分配与释放管理（比如 JavaScript、Java、C# 等）。另一些则寄希望于开发者自己手动地进行内存的分配与释放管理（比如 C/C++ 等）。&lt;br&gt;而JavaScript 是通过垃圾回收器来进行内存管理，其实现是基于标记-清除算法。而这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。其假定设置一个叫做根（root）的对象（在Javascript里，根是全局对象）。在标记过程，垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。标记完成后就进行清除过程。（可达内存被标记，其余的被当作垃圾回收。）&lt;/p&gt;
&lt;p&gt;（1）、在javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收；&lt;br&gt;（2）、如果两个对象互相引用，而不再被第3者所引用，那么这两个互相引用的对象也会被回收。&lt;/p&gt;
&lt;h1 id=&#34;五、使用闭包的好处&#34;&gt;&lt;a href=&#34;#五、使用闭包的好处&#34; class=&#34;headerlink&#34; title=&#34;五、使用闭包的好处&#34;&gt;&lt;/a&gt;五、使用闭包的好处&lt;/h1&gt;&lt;p&gt;那么使用闭包有什么好处呢？使用闭包的好处是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;希望一个变量长期驻扎在内存中 &lt;/li&gt;
&lt;li&gt;避免全局变量的污染 &lt;/li&gt;
&lt;li&gt;私有成员的存在&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;六、使用闭包的情况&#34;&gt;&lt;a href=&#34;#六、使用闭包的情况&#34; class=&#34;headerlink&#34; title=&#34;六、使用闭包的情况&#34;&gt;&lt;/a&gt;六、使用闭包的情况&lt;/h1&gt;&lt;p&gt;你只需要知道应用的两种情况即可——函数作为返回值，函数作为参数传递。&lt;/p&gt;
&lt;h2 id=&#34;6-1-return-函数作为返回值&#34;&gt;&lt;a href=&#34;#6-1-return-函数作为返回值&#34; class=&#34;headerlink&#34; title=&#34;6.1 return 函数作为返回值&#34;&gt;&lt;/a&gt;6.1 return 函数作为返回值&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function fn(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var max=10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return function bar(x) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(x&amp;gt; max){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.log(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var f1=fn();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f1(15);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上代码，bar函数作为返回值，赋值给f1变量。执行f1(15)时，用到了fn作用域下的max变量的值。至于如何跨作用域取值，可以参考上一节。&lt;/p&gt;
&lt;h2 id=&#34;6-2-函数作为参数被传递&#34;&gt;&lt;a href=&#34;#6-2-函数作为参数被传递&#34; class=&#34;headerlink&#34; title=&#34;6.2 函数作为参数被传递&#34;&gt;&lt;/a&gt;6.2 函数作为参数被传递&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var max =10,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fn = function(x){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	if(x &amp;gt; max){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(function (f) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var max =100;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  f(15);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})(fn);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上代码中，fn函数作为一个参数被传递进入另一个函数，赋值给f参数。执行f(15)时，max变量的取值是10，而不是100。&lt;/p&gt;
&lt;p&gt;讲自由变量跨作用域取值时，曾经强调过：要去创建这个函数的作用域取值，而不是“父作用域”。理解了这一点，以上两端代码中，自由变量如何取值应该比较简单。&lt;/p&gt;
&lt;h2 id=&#34;6-3-IIFE（自执行函数）&#34;&gt;&lt;a href=&#34;#6-3-IIFE（自执行函数）&#34; class=&#34;headerlink&#34; title=&#34;6.3 IIFE（自执行函数）&#34;&gt;&lt;/a&gt;6.3 IIFE（自执行函数）&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var n = &#39;林一一&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(function p(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* 输出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*   林一一&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;6-4-循环赋值&#34;&gt;&lt;a href=&#34;#6-4-循环赋值&#34; class=&#34;headerlink&#34; title=&#34;6.4 循环赋值&#34;&gt;&lt;/a&gt;6.4 循环赋值&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for(var i = 0; i&amp;lt;10; i++){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (function(j){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       setTimeout(function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(j)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }, 1000) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  })(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为存在闭包的原因上面能依次输出1~10，闭包形成了10个互不干扰的私有作用域。将外层的自执行函数去掉后就不存在外部作用域的引用了，输出的结果就是连续的 10。为什么会连续输出10，因为 JS 是单线程的遇到异步的代码不会先执行(会入栈)，等到同步的代码执行完 i++ 到 10时，异步代码才开始执行此时的 i=10 输出的都是 10。&lt;/p&gt;
&lt;h2 id=&#34;6-5-使用回调函数&#34;&gt;&lt;a href=&#34;#6-5-使用回调函数&#34; class=&#34;headerlink&#34; title=&#34;6.5 使用回调函数&#34;&gt;&lt;/a&gt;6.5 使用回调函数&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;window.name = &#39;林一一&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setTimeout(function timeHandler(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(window.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}, 100)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;七、内存泄露问题&#34;&gt;&lt;a href=&#34;#七、内存泄露问题&#34; class=&#34;headerlink&#34; title=&#34;七、内存泄露问题&#34;&gt;&lt;/a&gt;七、内存泄露问题&lt;/h1&gt;&lt;p&gt;什么是内存泄漏？&lt;br&gt;应用程序不再用到的内存，由于某些原因，没有及时释放，就叫做内存泄漏。&lt;/p&gt;
&lt;p&gt;由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁驻留在内存中的元素&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function closure(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var oDiv = document.getElementById(&#39;oDiv&#39;);//oDiv用完之后一直驻留在内存中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    oDiv.onclick = function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(&#39;oDiv.innerHTML&#39;);//这里用oDiv导致内存泄露&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;closure();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//最后应将oDiv解除引用来避免内存泄露&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function closure(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var oDiv = document.getElementById(&#39;oDiv&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var test = oDiv.innerHTML;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    oDiv.onclick = function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        alert(test);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    oDiv = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;八、闭包的销毁&#34;&gt;&lt;a href=&#34;#八、闭包的销毁&#34; class=&#34;headerlink&#34; title=&#34;八、闭包的销毁&#34;&gt;&lt;/a&gt;八、闭包的销毁&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;const outerFn = () =&amp;gt; {
    let count = 0;
    const innerFn = () =&amp;gt; {
        console.log(&#39;count&#39;, ++count);
    }
    return innerFn;
}

let closure = outerFn(); // 创建第一个闭包
 closure();
closure();
closure = outerFn(); // 销毁第一个闭包，创建第二个闭包
closure();
closure();
closure = null; // 销毁闭包
// 输出结果：
// count 1
// count 2
// count 1
// count 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由上面的例子可以看出来，当第二次为closure赋值后，再次执行2次closure()时，count的结果并不会变成3，4，而是又变回了1，2。&lt;br&gt;这表示着，当第二次赋值的时候，第一个闭包就会被垃圾回收销毁掉，而第三次赋值为null时，则是把第二次的闭包也销毁了。&lt;/p&gt;
&lt;p&gt;简单的总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于闭包的销毁&lt;ul&gt;
&lt;li&gt;可在模块或应用结束后来进行空赋值处理，进行销毁，比如上面的：closure = null&lt;/li&gt;
&lt;li&gt;等待页面被关闭，才会被销毁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;至于为什么会要这么处理才会被销毁呢？具体的话可以网上找一下 javascript 回收机制，有兴趣的童鞋可以去了解了解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;九、新增&#34;&gt;&lt;a href=&#34;#九、新增&#34; class=&#34;headerlink&#34; title=&#34;九、新增&#34;&gt;&lt;/a&gt;九、新增&lt;/h1&gt;&lt;p&gt;很多初学者学了闭包后，可能也不懂到底在哪里才有用到，甚至不懂闭包到底有啥用。&lt;br&gt;其实你写的每一个js函数都是闭包，一个js函数的顶层作用域就是window对象，js的执行环境本身就是一个scope（浏览器的window/node的global），我们通常称之为全局作用域。每个函数，不论多深，都可以认为是全局scope的子作用域，可以理解为闭包。&lt;/p&gt;
&lt;h1 id=&#34;十、必刷题&#34;&gt;&lt;a href=&#34;#十、必刷题&#34; class=&#34;headerlink&#34; title=&#34;十、必刷题&#34;&gt;&lt;/a&gt;十、必刷题&lt;/h1&gt;&lt;p&gt;一、for 循环和闭包(号称必刷题)&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var data = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (var i = 0; i &amp;lt; 3; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  data[i] = function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[0]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[1]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[2]()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* 输出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 i 是全局下的 i，共用一个作用域，当函数被执行的时候这时的 i=3，导致输出的结构都是3。&lt;/p&gt;
&lt;p&gt;● 写法1：自执行函数和闭包(使用闭包改善上面的写法达到预期效果)&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var data = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (var i = 0; i &amp;lt; 3; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (function(j){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      setTimeout( data[j] = function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      }, 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    })(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[0]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[1]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[2]()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;● 写法2：使用 let&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var data = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (let i = 0; i &amp;lt; 3; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  data[i] = function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[0]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[1]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data[2]()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/09/19/qian-hou-duan-fen-chi-kai-fa-zhi-quan-xian-pian-ji-vue-lu-you-shou-wei-next-next-to-replace-true-next-shuo-ming/</guid>
            <title>前后端分离开发之权限篇及VUE路由守卫</title>
            <link>http://example.com/2022/09/19/qian-hou-duan-fen-chi-kai-fa-zhi-quan-xian-pian-ji-vue-lu-you-shou-wei-next-next-to-replace-true-next-shuo-ming/</link>
            <category>vue.js</category>
            <category>javascript</category>
            <category>前端</category>
            <pubDate>Mon, 19 Sep 2022 20:59:28 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;写项目过程中在权限部分遇到了不少有关&lt;code&gt;next()&lt;/code&gt;的问题，解决完之后发现对于权限篇的整体逻辑清晰不少，在这里记录一下。&lt;br&gt;首先是路由守卫，是不是感觉简简单单&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	to // 要去的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	from // 当前路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	next() // 放行的意思&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是在看别的项目时常常能看到&lt;code&gt;next(&#39;/logon&#39;)&lt;/code&gt;、&lt;code&gt;next(to)&lt;/code&gt; 或者 &lt;code&gt;next({ ...to, replace: true })&lt;/code&gt; 这又是啥意思呢&lt;/p&gt;
&lt;p&gt;其实在路由守卫中，只有&lt;code&gt;next()&lt;/code&gt;是放行，其他的诸如：&lt;code&gt;next(&#39;/logon&#39;)&lt;/code&gt;、&lt;code&gt;next(to) &lt;/code&gt;或者 &lt;code&gt;next({ ...to, replace: true })&lt;/code&gt;都不是放行，而是：中断当前导航，执行新的导航&lt;/p&gt;
&lt;h3 id=&#34;可以这么理解：&#34;&gt;&lt;a href=&#34;#可以这么理解：&#34; class=&#34;headerlink&#34; title=&#34;可以这么理解：&#34;&gt;&lt;/a&gt;&lt;strong&gt;可以这么理解：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;next()&lt;/code&gt;是放行，但是如果&lt;code&gt;next()&lt;/code&gt;里有参数的话，&lt;code&gt;next()&lt;/code&gt;就像被重载一样，就有了不同的功能。&lt;/p&gt;
&lt;p&gt;而对于上面说的中断当前导航，执行新的导航打个比方：&lt;/p&gt;
&lt;p&gt;现在我有一个守卫，在守卫中我使用&lt;code&gt;next(&#39;/logon&#39;)&lt;/code&gt;，肯定有同学认为是会直接跳转到&lt;code&gt;/logon&lt;/code&gt;路由：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  next(&#39;/logon&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而年轻人不讲武德，执行时需要这么看：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  beforeEach((&#39;/logon&#39;, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	 beforeEach((&#39;/logon&#39;, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	 	 beforeEach((&#39;/logon&#39;, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	 	 	beforeEac...  // 一直循环下去...... , 因为我们没有使用 next() 放行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	 }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果把这个守卫改一下，当我在地址栏输入&lt;code&gt;/home&lt;/code&gt;时&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if(to.path === &#39;/home&#39;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	next(&#39;/logon&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 如果要去的地方不是 /home ， 就放行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我本来要去&lt;code&gt;/home&lt;/code&gt;路由，因此执行了第一次 &lt;code&gt;beforeEach((to, from, next)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是这个路由守卫中判断了如果要去的地方是&lt;code&gt;&#39;/home&#39;&lt;/code&gt;，就执行&lt;code&gt;next(&#39;/logon&#39;)&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;所以想要访问&lt;code&gt;/home&lt;/code&gt;可以这么看&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   beforeEach((&#39;/logon&#39;, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next()  // 现在要去的地方不是 /home ， 因此放行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;正以为如此很多人在使用动态添加路由addRoutes-会遇到下面的情况：&#34;&gt;&lt;a href=&#34;#正以为如此很多人在使用动态添加路由addRoutes-会遇到下面的情况：&#34; class=&#34;headerlink&#34; title=&#34;正以为如此很多人在使用动态添加路由addRoutes()会遇到下面的情况：&#34;&gt;&lt;/a&gt;正以为如此很多人在使用动态添加路由addRoutes()会遇到下面的情况：&lt;/h4&gt;&lt;p&gt;在addRoutes()之后第一次访问被添加的路由会白屏，这是因为刚刚addRoutes()就立刻访问被添加的路由，然而此时addRoutes()没有执行结束，因而找不到刚刚被添加的路由导致白屏。因此需要从新访问一次路由才行。&lt;/p&gt;
&lt;p&gt;该如何解决这个问题 ?&lt;br&gt;此时就要使用&lt;code&gt;next({ ...to, replace: true })&lt;/code&gt;来确保&lt;code&gt;addRoutes()&lt;/code&gt;时动态添加的路由已经被完全加载上去。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;next({ ...to, replace: true })&lt;/code&gt;中的&lt;code&gt;replace: true&lt;/code&gt;只是一个设置信息，告诉VUE本次操作后，不能通过浏览器后退按钮，返回前一个路由。&lt;/p&gt;
&lt;p&gt;因此&lt;code&gt;next({ ...to, replace: true })&lt;/code&gt;可以写成&lt;code&gt;next({ ...to })&lt;/code&gt;，不过你应该不希望用户在&lt;code&gt;addRoutes()&lt;/code&gt;还没有完成的时候，可以点击浏览器回退按钮搞事情吧。&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;next({ ...to })&lt;/code&gt;的执行很简单，它会判断：&lt;/p&gt;
&lt;p&gt;如果参数to不能找到对应的路由的话，就再执行一次&lt;code&gt;beforeEach((to, from, next)&lt;/code&gt;直到其中的&lt;code&gt;next({ ...to})&lt;/code&gt;能找到对应的路由为止。&lt;/p&gt;
&lt;p&gt;也就是说此时&lt;code&gt;addRoutes()&lt;/code&gt;已经完成啦，找到对应的路由之后，接下来将执行前往对应路由的&lt;code&gt;beforeEach((to, from, next)&lt;/code&gt; ，因此需要用代码来判断这一次是否就是前往对应路由的&lt;code&gt;beforeEach((to, from, next)&lt;/code&gt;，如果是，就执行&lt;code&gt;next()&lt;/code&gt;放行。&lt;/p&gt;
&lt;p&gt;如果守卫中没有正确的放行出口的话，会一直&lt;code&gt;next({ ...to}&lt;/code&gt;)进入死循环 !!!&lt;/p&gt;
&lt;p&gt;因此你还需要确保在当&lt;code&gt;addRoutes()&lt;/code&gt;已经完成时，所执行到的这一次&lt;code&gt;beforeEach((to, from, next)&lt;/code&gt;中有一个正确的&lt;code&gt;next()&lt;/code&gt;方向出口。&lt;/p&gt;
&lt;h4 id=&#34;因此想实现动态添加路由的操作的话，代码应该是这样的：&#34;&gt;&lt;a href=&#34;#因此想实现动态添加路由的操作的话，代码应该是这样的：&#34; class=&#34;headerlink&#34; title=&#34;因此想实现动态添加路由的操作的话，代码应该是这样的：&#34;&gt;&lt;/a&gt;因此想实现动态添加路由的操作的话，代码应该是这样的：&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;router.beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; const token = sessionStorage.getItem(&#39;access_token&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; // 存在 token 说明已经登录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; if (token) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 登录过就不能访问登录界面，需要中断这一次路由守卫，执行下一次路由守卫，并且下一次守卫的to是主页&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if (to.path === &#39;/login&#39;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next({ path: &#39;/&#39; })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 保存在store中路由不为空则放行 (如果执行了刷新操作，则 store 里的路由为空，此时需要重新添加路由)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if (store.getters.getRoutes.length || to.name != null) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     //放行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     // 将路由添加到 store 中，用来标记已添加动态路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     store.commit(&#39;ADD_ROUTER&#39;, &#39;需要添加的路由&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     router.addRoutes(&#39;需要添加的路由&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     // 如果 addRoutes 并未完成，路由守卫会一层一层的执行执行，直到 addRoutes 完成，找到对应的路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next({ ...to, replace: true })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 未登录时，注意 ：在这里也许你的项目不只有 logon 不需要登录 ，register 等其他不需要登录的页面也需要处理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if (to.path !== &#39;/logon&#39;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next({ path: &#39;/logon&#39; })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     next()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; }&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;核心的权限判断方法到这里就基本已经实现了。逻辑大致如此，至于源码，贴到下面~&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import router from &#39;./routers&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import store from &#39;@/store&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import NProgress from &#39;nprogress&#39;; // progress bar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &#39;nprogress/nprogress.css&#39;;// progress bar style&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import { getToken } from &#39;@/utils/auth&#39;; // getToken from cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import { buildMenus } from &#39;@api/menu&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import { filterAsyncRouter } from &#39;@/store/modules/permission&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NProgress.configure({ showSpinner: false });// NProgress Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const whiteList = [&#39;/login&#39;, &#39;/register&#39;, &#39;/about&#39;, &#39;/page/home&#39;];      // no redirect whitelist&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;router.beforeEach((to, from, next) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    NProgress.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (getToken()) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 已登录且要跳转的页面是登录页&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (to.path === &#39;/login&#39;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next({ path: &#39;/&#39; });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            NProgress.done();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (judgeObj(store.getters.user)) { // 判断当前用户是否已拉取完user_info信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                store.dispatch(&#39;user/GetInfo&#39;).then(res =&amp;gt; { // 拉取user_info&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    // 动态路由，拉取菜单&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    loadMenus(next, to);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }).catch((err) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    console.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    store.dispatch(&#39;user/LogOut&#39;).then(() =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        location.reload(); // 为了重新实例化vue-router对象 避免bug&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                // 登录时未拉取 菜单，在此处拉取&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            } else if (store.getters.loadMenus) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                // 修改成false，防止死循环&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                store.dispatch(&#39;user/updateLoadMenus&#39;).then(res =&amp;gt; {});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                loadMenus(next, to);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                next();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /* has no token*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#39;no token&#39;, to.path);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        } else {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next(`/page/home?redirect=${to.fullPath}`); // 否则全部重定向到首页&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            NProgress.done();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 判断是否为空对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * @param {*} obj&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * @returns&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function judgeObj(obj) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (obj &amp;amp;&amp;amp; Object.keys(obj).length === 0) return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export const loadMenus = (next, to) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 通过接口动态获取数据库保存的路由表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    buildMenus().then(res =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (res.data) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //filterAsyncRouter()  根据需求自己写的方法，遍历后台传来的路由字符串，转换为组件对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            const asyncRouter = filterAsyncRouter(res.data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            asyncRouter.push({ path: &#39;*&#39;, redirect: &#39;/404&#39;, hidden: true });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            store.dispatch(&#39;permission/GenerateRoutes&#39;, asyncRouter).then(() =&amp;gt; { // 存储路由&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                router.addRoutes(asyncRouter); // 动态添加可访问路由表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                next({ ...to, replace: true });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;router.afterEach(() =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    NProgress.done(); // finish progress bar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default router;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/09/19/javascript-chang-yong-ba-chong-ji-cheng-fang-shi/</guid>
            <title>JavaScript常用八种继承方式</title>
            <link>http://example.com/2022/09/19/javascript-chang-yong-ba-chong-ji-cheng-fang-shi/</link>
            <category>javascript</category>
            <category>前端</category>
            <category>原型模式</category>
            <pubDate>Mon, 19 Sep 2022 20:58:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;原型链继承&#34;&gt;&lt;a href=&#34;#原型链继承&#34; class=&#34;headerlink&#34; title=&#34;原型链继承&#34;&gt;&lt;/a&gt;原型链继承&lt;/h1&gt;&lt;p&gt;构造函数、原型和实例之间的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个原型对象的指针。&lt;br&gt;继承的本质就是复制，即重写原型对象，代之以一个新类型的实例。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function SuperType() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.property = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SuperType.prototype.getSuperValue = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.property;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.subproperty = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 这里是关键，创建SuperType的实例，并将该实例赋值给SubType.prototype&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype = new SuperType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.getSubValue = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.subproperty;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(instance.getSuperValue()); // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型链方案存在的缺点：多个实例对引用类型的操作会被篡改。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function SuperType(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.colors = [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType(){}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype = new SuperType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.colors.push(&#34;black&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance1.colors); //&#34;red,blue,green,black&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance2.colors); //&#34;red,blue,green,black&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;借用构造函数继承-借调）&#34;&gt;&lt;a href=&#34;#借用构造函数继承-借调）&#34; class=&#34;headerlink&#34; title=&#34;借用构造函数继承(借调）&#34;&gt;&lt;/a&gt;借用构造函数继承(借调）&lt;/h1&gt;&lt;p&gt;借调：借用构造函数调用冒充继承，借调实现的继承，不是真正的继承，只是借用构造函数中的属性或方法。&lt;br&gt;即：使用父类的构造函数来增强子类实例，等同于复制父类的实例给子类（不使用原型）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function  SuperType(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.color=[&#34;red&#34;,&#34;green&#34;,&#34;blue&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function  SubType(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //继承自SuperType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SuperType.call(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.color.push(&#34;black&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance1.color);//&#34;red,green,blue,black&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance2.color);//&#34;red,green,blue&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;核心代码是&lt;code&gt;SuperType.call(this)&lt;/code&gt;，创建子类实例时调用&lt;code&gt;SuperType&lt;/code&gt;构造函数，于是&lt;code&gt;SubType&lt;/code&gt;的每个实例都会将SuperType中的属性复制一份。&lt;br&gt;缺点：&lt;br&gt;● 只能继承父类的实例属性和方法，不能继承原型属性/方法&lt;br&gt;● 无法实现复用，每个子类都有父类实例函数的副本，影响性能&lt;/p&gt;
&lt;h1 id=&#34;组合继承&#34;&gt;&lt;a href=&#34;#组合继承&#34; class=&#34;headerlink&#34; title=&#34;组合继承&#34;&gt;&lt;/a&gt;组合继承&lt;/h1&gt;&lt;p&gt;组合上述两种方法就是组合继承。用原型链实现对原型属性和方法的继承，用借用构造函数技术来实现实例属性的继承。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function SuperType(name){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.colors = [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SuperType.prototype.sayName = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType(name, age){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 继承属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 第二次调用SuperType()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  SuperType.call(this, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 继承方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 构建原型链&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 第一次调用SuperType()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype = new SuperType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 重写SubType.prototype的constructor属性，指向自己的构造函数SubType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.constructor = SubType; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.sayAge = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    alert(this.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType(&#34;Nicholas&#34;, 29);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.colors.push(&#34;black&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance1.colors); //&#34;red,blue,green,black&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.sayName(); //&#34;Nicholas&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.sayAge(); //29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType(&#34;Greg&#34;, 27);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(instance2.colors); //&#34;red,blue,green&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance2.sayName(); //&#34;Greg&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance2.sayAge(); //27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;缺点：&lt;br&gt;● 第一次调用&lt;code&gt;SuperType()&lt;/code&gt;：给&lt;code&gt;SubType.prototype&lt;/code&gt;写入两个属性name，color。&lt;br&gt;● 第二次调用&lt;code&gt;SuperType()&lt;/code&gt;：给&lt;code&gt;instance1&lt;/code&gt;写入两个属性name，color。&lt;br&gt;实例对象&lt;code&gt;instance1&lt;/code&gt;上的两个属性就屏蔽了其原型对象SubType.prototype的两个同名属性。所以，组合模式的缺点就是在使用子类创建实例对象时，其原型中会存在两份相同的属性/方法。&lt;/p&gt;
&lt;h1 id=&#34;原型式继承&#34;&gt;&lt;a href=&#34;#原型式继承&#34; class=&#34;headerlink&#34; title=&#34;原型式继承&#34;&gt;&lt;/a&gt;原型式继承&lt;/h1&gt;&lt;p&gt;原理：类似Object.create，用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象，结果是将子对象的__proto__指向父对象&lt;br&gt;1.利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function object(obj){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  function F(){}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  F.prototype = obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return new F();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;object()对传入其中的对象执行了一次&lt;code&gt;浅复制&lt;/code&gt;，将构造函数F的原型直接指向传入的对象。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var person = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#34;Nicholas&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  friends: [&#34;Shelby&#34;, &#34;Court&#34;, &#34;Van&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var anotherPerson = object(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.name = &#34;Greg&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.friends.push(&#34;Rob&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var yetAnotherPerson = object(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.name = &#34;Linda&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.friends.push(&#34;Barbie&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(person.friends);   //&#34;Shelby,Court,Van,Rob,Barbie&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.或者直接利用Object.create():&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let person = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#34;Nicholas&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  friends: [&#34;Shelby&#34;, &#34;Court&#34;, &#34;Van&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let anotherPerson = Object.create(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.name = &#34;Greg&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.friends.push(&#34;Rob&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let yetAnotherPerson = Object.create(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.name = &#34;Linda&#34;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yetAnotherPerson.friends.push(&#34;Barbie&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alert(person.friends);   //&#34;Shelby,Court,Van,Rob,Barbie&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;优点：&lt;br&gt;● 父类方法可以复用&lt;br&gt;缺点：&lt;br&gt;● 原型链继承多个实例的引用类型属性指向相同，存在篡改的可能&lt;br&gt;● 子类构建实例时不能向父类传递参数&lt;/p&gt;
&lt;h1 id=&#34;寄生式继承&#34;&gt;&lt;a href=&#34;#寄生式继承&#34; class=&#34;headerlink&#34; title=&#34;寄生式继承&#34;&gt;&lt;/a&gt;寄生式继承&lt;/h1&gt;&lt;p&gt;核心：在原型式继承的基础上，增强对象，返回构造函数&lt;br&gt;即：使用原型式继承获得一份目标对象的浅拷贝，然后增强了这个浅拷贝的能力。&lt;br&gt;优缺点其实和原型式继承一样，寄生式继承说白了就是能在拷贝来的对象上加点方法，也就是所谓增强能力。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function object(obj) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  function F() { }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  F.prototype = obj&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return new F()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function createAnother(original){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var clone = object(original); // 通过调用 object() 函数创建一个新对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  clone.sayHi = function(){  // 以某种方式来增强对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    alert(&#34;hi&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return clone; // 返回这个对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数的主要作用是为构造函数新增属性和方法，以增强函数&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var person = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &#34;Nicholas&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  friends: [&#34;Shelby&#34;, &#34;Court&#34;, &#34;Van&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var anotherPerson = createAnother(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherPerson.sayHi(); //&#34;hi&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;缺点（同原型式继承）：&lt;br&gt;● 原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。&lt;br&gt;● 无法传递参数&lt;/p&gt;
&lt;h1 id=&#34;寄生组合式继承&#34;&gt;&lt;a href=&#34;#寄生组合式继承&#34; class=&#34;headerlink&#34; title=&#34;寄生组合式继承&#34;&gt;&lt;/a&gt;寄生组合式继承&lt;/h1&gt;&lt;p&gt;结合借用构造函数传递参数和寄生模式实现继承&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function inheritPrototype(subType, superType){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 创建对象，创建父类原型的一个副本&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  var prototype = Object.create(superType.prototype); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 增强对象，弥补因重写原型而失去的默认的constructor 属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  prototype.constructor = subType;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 指定对象，将新创建的对象赋值给子类的原型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  subType.prototype = prototype;                      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 父类初始化实例属性和原型属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SuperType(name){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.colors = [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SuperType.prototype.sayName = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 借用构造函数传递增强子类实例属性（支持传参和避免篡改）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function SubType(name, age){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  SuperType.call(this, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 将父类原型指向子类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;inheritPrototype(SubType, SuperType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 新增子类原型属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SubType.prototype.sayAge = function(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  alert(this.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new SubType(&#34;xyc&#34;, 23);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new SubType(&#34;lxy&#34;, 23);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.colors.push(&#34;2&#34;); // [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;, &#34;2&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance2.colors.push(&#34;3&#34;); // [&#34;red&#34;, &#34;blue&#34;, &#34;green&#34;, &#34;3&#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子的高效率体现在它只调用了一次&lt;code&gt;SuperType&lt;/code&gt; 构造函数，并且因此避免了在&lt;code&gt;SubType.prototype&lt;/code&gt; 上创建不必要的、多余的属性。于此同时，原型链还能保持不变；因此，还能够正常使用&lt;code&gt;instanceof &lt;/code&gt;和&lt;code&gt;isPrototypeOf()&lt;/code&gt;&lt;br&gt;这是最成熟的方法，也是现在库实现的方法&lt;/p&gt;
&lt;h1 id=&#34;混入方式继承多个对象&#34;&gt;&lt;a href=&#34;#混入方式继承多个对象&#34; class=&#34;headerlink&#34; title=&#34;混入方式继承多个对象&#34;&gt;&lt;/a&gt;混入方式继承多个对象&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function MyClass() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     SuperClass.call(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     OtherSuperClass.call(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 继承一个类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyClass.prototype = Object.create(SuperClass.prototype);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 混合其它&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Object.assign(MyClass.prototype, OtherSuperClass.prototype);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 重新指定constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyClass.prototype.constructor = MyClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyClass.prototype.myMethod = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     // do something&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Object.assign&lt;/code&gt;会把 &lt;code&gt;OtherSuperClass&lt;/code&gt;原型上的函数拷贝到 &lt;code&gt;MyClass&lt;/code&gt;原型上，使 MyClass 的所有实例都可用 OtherSuperClass 的方法。&lt;/p&gt;
&lt;h1 id=&#34;ES6类继承extends&#34;&gt;&lt;a href=&#34;#ES6类继承extends&#34; class=&#34;headerlink&#34; title=&#34;ES6类继承extends&#34;&gt;&lt;/a&gt;ES6类继承extends&lt;/h1&gt;&lt;p&gt;&lt;code&gt;extends&lt;/code&gt;关键字主要用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。其中&lt;code&gt;constructor&lt;/code&gt;表示构造函数，一个类中只能有一个构造函数，有多个会报出&lt;code&gt;SyntaxError&lt;/code&gt;错误,如果没有显式指定构造方法，则会添加默认的&lt;br&gt;&lt;code&gt;constructor&lt;/code&gt;方法，使用例子如下。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Rectangle {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(height, width) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.height = height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.width = width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // Getter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    get area() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return this.calcArea()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // Method&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    calcArea() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return this.height * this.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const rectangle = new Rectangle(10, 20);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(rectangle.area);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 输出 200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-----------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 继承&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Square extends Rectangle {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  constructor(length) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    super(length, length);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 如果子类中存在构造函数，则需要在使用“this”之前首先调用 super()。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.name = &#39;Square&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  get area() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.height * this.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const square = new Square(10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(square.area);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 输出 100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;extends&lt;/code&gt;继承的核心代码如下，其实现和上述的寄生组合式继承方式一样&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function _inherits(subType, superType) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 创建对象，创建父类原型的一个副本&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 增强对象，弥补因重写原型而失去的默认的constructor 属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 指定对象，将新创建的对象赋值给子类的原型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    subType.prototype = Object.create(superType &amp;amp;&amp;amp; superType.prototype, {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        constructor: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            value: subType,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            enumerable: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            writable: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            configurable: true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (superType) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Object.setPrototypeOf &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ? Object.setPrototypeOf(subType, superType) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            : subType.__proto__ = superType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/09/19/javascript-yuan-xing-yuan-xing-lian-ji-cheng/</guid>
            <title>javaScript 原型、原型链、继承</title>
            <link>http://example.com/2022/09/19/javascript-yuan-xing-yuan-xing-lian-ji-cheng/</link>
            <category>javascript</category>
            <category>前端</category>
            <pubDate>Mon, 19 Sep 2022 20:58:36 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一、prototype&#34;&gt;&lt;a href=&#34;#一、prototype&#34; class=&#34;headerlink&#34; title=&#34;一、prototype&#34;&gt;&lt;/a&gt;一、prototype&lt;/h1&gt;&lt;p&gt;在JavaScript中，每一个函数都有一个prototype属性，这个属性指向函数的原型对象。&lt;br&gt;例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person(age){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.age=age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Person.prototype.name=&#39;张三&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;val per1= new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;val per2= new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(per1.name); //张三&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(per2.name); //张三&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述例子中，函数Person的prototype指向了一个对象，而这个对象正是调用构造函数时创建的原型实例，即per1和 per2的原型。&lt;/p&gt;
&lt;p&gt;原型的概念：每一个JavaScript对象（除null外）在创建的时候，就会与之关联另一个对象，这个对象就是我们所说的原型。每一个对象都会从原型中”继承”属性。&lt;/p&gt;
&lt;p&gt;用一张图来表示构造函数与实例原型之间的关系：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/42579455dc1d4a6d95f43c2222ad7393.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;二、proto&#34;&gt;&lt;a href=&#34;#二、proto&#34; class=&#34;headerlink&#34; title=&#34;二、proto&#34;&gt;&lt;/a&gt;二、&lt;em&gt;proto&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;这是每个对象（除null外）都会有的属性。这个属性指向该对象的原型。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;val per=new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(per._proto_ === Person.prototype); //true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/d63129ac691e455b9c2776dc1f463c49.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;三、constructor&#34;&gt;&lt;a href=&#34;#三、constructor&#34; class=&#34;headerlink&#34; title=&#34;三、constructor&#34;&gt;&lt;/a&gt;三、constructor&lt;/h1&gt;&lt;p&gt;每个原型都有一个constructor属性，指向该关联的构造函数。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(Person===Person.prototype.constructor)  //true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/68d6c22595e645269f2a4cce95ccde12.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var person = new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(person.__proto__ == Person.prototype) // true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(Person.prototype.constructor == Person) // true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 顺便学习一个ES5的方法,可以获得对象的原型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(Object.getPrototypeOf(person) === Person.prototype) // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var person = new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;person.constructor=Person;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解释：当获取person.constructor时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;person.constructor=Person.prototype.constructor;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;四：实例与原型&#34;&gt;&lt;a href=&#34;#四：实例与原型&#34; class=&#34;headerlink&#34; title=&#34;四：实例与原型&#34;&gt;&lt;/a&gt;四：实例与原型&lt;/h1&gt;&lt;p&gt;当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Person() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Person.prototype.name = &#39;Kevin&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var person = new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;person.name = &#39;Daisy&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(person.name) // Daisy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;delete person.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(person.name) // Kevin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。&lt;br&gt;但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person.&lt;strong&gt;proto&lt;/strong&gt; ，也就是 Person.prototype中查找，幸运的是我们找到了 name 属性，结果为 Kevin。&lt;/p&gt;
&lt;p&gt;但是万一还没有找到呢？原型的原型又是什么呢？&lt;/p&gt;
&lt;h1 id=&#34;五、原型的原型&#34;&gt;&lt;a href=&#34;#五、原型的原型&#34; class=&#34;headerlink&#34; title=&#34;五、原型的原型&#34;&gt;&lt;/a&gt;五、原型的原型&lt;/h1&gt;&lt;p&gt;在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var obj = new Object();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;obj.name = &#39;Kevin&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(obj.name) // Kevin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 &lt;strong&gt;proto&lt;/strong&gt; 指向构造函数的 prototype ，所以我们再更新下关系图：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/b962c76a68984903b6e87fc4572ee115.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;六、原型链&#34;&gt;&lt;a href=&#34;#六、原型链&#34; class=&#34;headerlink&#34; title=&#34;六、原型链&#34;&gt;&lt;/a&gt;六、原型链&lt;/h1&gt;&lt;p&gt; 简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》&lt;/p&gt;
&lt;p&gt;其实简单来说，就是上述四-五的过程。&lt;br&gt;继上述五中所说，那 Object.prototype 的原型呢？&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;console.log(Object.prototype.__proto__ === null) // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;引用阮一峰老师的 《undefined与null的区别》 就是：&lt;br&gt;null 表示“没有对象”，即该处不应该有值。&lt;br&gt;所以 Object.prototype.&lt;strong&gt;proto&lt;/strong&gt; 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。&lt;br&gt;所以查找属性的时候查到 Object.prototype 就可以停止查找了。&lt;/p&gt;
&lt;p&gt;最后一张关系图也可以更新为：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/701fac7dbea84c6880515236c4af4c64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;br&gt;图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原型链继承方案有以下缺点：&lt;/strong&gt;&lt;br&gt;● 1、多个实例对引用类型的操作会被篡改&lt;br&gt;● 2、子类型的原型上的 constructor 属性被重写了&lt;br&gt;● 3、给子类型原型添加属性和方法必须在替换原型之后&lt;br&gt;● 4、创建子类型实例时无法向父类型的构造函数传参&lt;/p&gt;
&lt;p&gt;问题1：&lt;br&gt;原型链继承方案中，原型实际上会变成另一个类型的实例，如下代码，&lt;code&gt;Cat.prototype&lt;/code&gt; 变成了 &lt;code&gt;Animal &lt;/code&gt;的一个实例，所以 &lt;code&gt;Animal&lt;/code&gt; 的实例属性 names 就变成了 &lt;code&gt;Cat.prototype&lt;/code&gt; 的属性。&lt;br&gt;而原型属性上的引用类型值会被所有实例共享，所以多个实例对引用类型的操作会被篡改。如下代码，改变了 &lt;code&gt;instance1.names&lt;/code&gt; 后影响了 &lt;code&gt;instance2&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 木易杨&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Animal(){&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.names = [&#34;cat&#34;, &#34;dog&#34;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Cat(){}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype = new Animal();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance1 = new Cat();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance1.names.push(&#34;tiger&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(instance1.names); // [&#34;cat&#34;, &#34;dog&#34;, &#34;tiger&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance2 = new Cat(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(instance2.names); // [&#34;cat&#34;, &#34;dog&#34;, &#34;tiger&#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;问题2：&lt;br&gt;子类型原型上的 &lt;code&gt;constructor &lt;/code&gt;属性被重写了，执行&lt;code&gt; Cat.prototype = new Animal()&lt;/code&gt; 后原型被覆盖，&lt;code&gt;Cat.prototype&lt;/code&gt; 上丢失了 &lt;code&gt;constructor&lt;/code&gt; 属性， &lt;code&gt;Cat.prototype&lt;/code&gt; 指向了 &lt;code&gt;Animal.prototype&lt;/code&gt;，而 &lt;code&gt;Animal.prototype.constructor&lt;/code&gt; 指向了&lt;code&gt; Animal&lt;/code&gt;，所以 &lt;code&gt;Cat.prototype.constructor&lt;/code&gt; 指向了 &lt;code&gt;Animal&lt;/code&gt;。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/b9cbc47af0c743499dc6980ddb37580e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_9,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;br&gt;解决办法就是重写 Cat.prototype.constructor 属性，指向自己的构造函数 Cat。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 木易杨&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Animal() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.value = &#39;animal&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Animal.prototype.run = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.value + &#39; is runing&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Cat() {}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype = new Animal(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 新增，重写 Cat.prototype 的 constructor 属性，指向自己的构造函数 Cat&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype.constructor = Cat; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/58bb808425c74db6b9c9a13ae5a83dae.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;br&gt;问题3：&lt;br&gt;给子类型原型添加属性和方法必须在替换原型之后，原因在第二点已经解释过了，因为子类型的原型会被覆盖。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 木易杨&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Animal() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.value = &#39;animal&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Animal.prototype.run = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.value + &#39; is runing&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Cat() {}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype = new Animal(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype.constructor = Cat; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 新增&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype.getValue = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return this.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance = new Cat();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.value = &#39;cat&#39;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(instance.getValue()); // cat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;七、属性遮蔽&#34;&gt;&lt;a href=&#34;#七、属性遮蔽&#34; class=&#34;headerlink&#34; title=&#34;七、属性遮蔽&#34;&gt;&lt;/a&gt;七、属性遮蔽&lt;/h1&gt;&lt;p&gt;改造上面的代码，在 &lt;code&gt;Cat.prototype&lt;/code&gt; 上添加&lt;code&gt;run&lt;/code&gt; 方法，但是 &lt;code&gt;Animal.prototype&lt;/code&gt; 上也有一个 &lt;code&gt;run&lt;/code&gt; 方法，不过它不会被访问到，这种情况称为属性遮蔽 (property shadowing)。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 木易杨&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Animal() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.value = &#39;animal&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Animal.prototype.run = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return this.value + &#39; is runing&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Cat() {}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype = new Animal(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype.constructor = Cat; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 新增&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat.prototype.run = function() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return &#39;cat cat cat&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var instance = new Cat();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.value = &#39;cat&#39;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(instance.run()); // cat cat cat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那如何访问被遮蔽的属性呢？通过&lt;code&gt; __proto__&lt;/code&gt; 调用原型链上的属性即可。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;conlole.log(instance.__proto__.__proto__.run()); // undefined is runing&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/e810ed71d3b6417092fa50b3fc37562b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_13,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;八、JS常用八种继承方式&#34;&gt;&lt;a href=&#34;#八、JS常用八种继承方式&#34; class=&#34;headerlink&#34; title=&#34;八、JS常用八种继承方式&#34;&gt;&lt;/a&gt;八、JS常用八种继承方式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;原型链继承&lt;/li&gt;
&lt;li&gt;借用构造函数继承&lt;/li&gt;
&lt;li&gt;组合继承&lt;/li&gt;
&lt;li&gt;原型式继承&lt;/li&gt;
&lt;li&gt;寄生式继承&lt;/li&gt;
&lt;li&gt;寄生组合式继承&lt;/li&gt;
&lt;li&gt;混入方式继承多个对象&lt;/li&gt;
&lt;li&gt;ES6类继承extends&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 具体有关分析请看下章。如果写得不够清晰或者不够全面还望理解哈！随着不断学习，会将文章补充的更好哒。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/09/19/vue-de-kuo-zhan-yun-suan-fu/</guid>
            <title>VUE的扩展运算符</title>
            <link>http://example.com/2022/09/19/vue-de-kuo-zhan-yun-suan-fu/</link>
            <category>vue.js</category>
            <category>javascript</category>
            <category>前端</category>
            <pubDate>Mon, 19 Sep 2022 20:58:24 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;含义：&lt;br&gt;扩展运算符（ spread ）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。&lt;br&gt;操作数组：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//里面放自己定义的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    methods: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 把数组中的元素孤立起来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let iArray = [&lt;span class=&#34;string&#34;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;3&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(...iArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印结果  1 2 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 在数组中添加元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick3&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let iArray = [&lt;span class=&#34;string&#34;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;3&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&#39;0&#39;&lt;/span&gt;, ...iArray, &lt;span class=&#34;string&#34;&gt;&#39;4&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印结果  [&#34;0&#34;, &#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 在数组中删除元素（取出一个元素）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 与结构赋值的结合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick8&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; [first, ...rest] = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(first);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印结果 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([...rest]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印结果 [2, 3, 4, 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; [one, ...last] = [&lt;span class=&#34;string&#34;&gt;&#34;foo&#34;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(one);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//打印结果 foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([...last]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//打印结果 []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 数组的合并&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick6&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ES6 的写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        var arr1 = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        var arr2 = [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        arr1.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(...arr2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(arr1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 [0, 1, 2, 3, 4, 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 数组的合并（推荐使用）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick7&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        var arr1 = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        var arr2 = [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([...arr1, ...arr2]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 [0, 1, 2, 3, 4, 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 将字符串转成数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick9&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let iString = &lt;span class=&#34;string&#34;&gt;&#39;woshizhongguoren&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([...iString]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 [&#34;w&#34;, &#34;o&#34;, &#34;s&#34;, &#34;h&#34;, &#34;i&#34;, &#34;z&#34;, &#34;h&#34;, &#34;o&#34;, &#34;n&#34;, &#34;g&#34;, &#34;g&#34;, &#34;u&#34;, &#34;o&#34;, &#34;r&#34;, &#34;e&#34;, &#34;n&#34;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * Map 和 Set 结构， Generator 函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick10&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let map = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt;([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;one&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;two&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;three&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let arr = [...map.&lt;span class=&#34;built_in&#34;&gt;keys&lt;/span&gt;()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 [1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 当做参数传递&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 和直接传数组的区别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick4&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let iArray = [&lt;span class=&#34;string&#34;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#39;3&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//注意传的时候，就要三个点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;hanshu&lt;/span&gt;(...iArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;hanshu&lt;/span&gt;(...iArray) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let ooo = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(...iArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 1 2 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 求出最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick5&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let iArray = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;99&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;66&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;85&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;77&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let ooo = Math.&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(...iArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(ooo);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 99&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 如果对没有iterator接口的对象，使用扩展运算符，将会报错。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;iClick11&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let obj = {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          name: &lt;span class=&#34;string&#34;&gt;&#39;zhh&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          age: &lt;span class=&#34;string&#34;&gt;&#39;20&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;([...obj]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;操作对象：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; methods: {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 添加一个属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;method3&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let a = {age: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, id: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 把 name 属性，放到对象中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let c = {name: &lt;span class=&#34;string&#34;&gt;&#39;zhh&#39;&lt;/span&gt;, ...a};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果  {name: &#34;zhh&#34;, age: 18, id: 10}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 修改一个属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;method2&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let a = {name: &lt;span class=&#34;string&#34;&gt;&#39;zhh&#39;&lt;/span&gt;, age: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, id: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//先拿到a, 后面的name:zhh1,把 a 中name 的值替换掉了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let c = {...a, name: &lt;span class=&#34;string&#34;&gt;&#39;zhh1&#39;&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印结果  {name: &#34;zhh1&#34;, age: 18, id: 10}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       * 删除一个属性（拿出属性或者对象）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;       */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;method1&lt;/span&gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let a = {name: &lt;span class=&#34;string&#34;&gt;&#39;zhh&#39;&lt;/span&gt;, age: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, id: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let {name, ...c} = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(name, c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//  打印结果 zhh {age: 18, id: 10}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/09/19/javascript-zhong-de-nei-cun-yi-chu-he-nei-cun-xie-lu/</guid>
            <title>JavaScript中的内存溢出和内存泄露</title>
            <link>http://example.com/2022/09/19/javascript-zhong-de-nei-cun-yi-chu-he-nei-cun-xie-lu/</link>
            <category>javascript</category>
            <category>前端</category>
            <category>开发语言</category>
            <pubDate>Mon, 19 Sep 2022 20:58:07 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;内存溢出&#34;&gt;&lt;a href=&#34;#内存溢出&#34; class=&#34;headerlink&#34; title=&#34;内存溢出&#34;&gt;&lt;/a&gt;内存溢出&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;概念：一种程序运行出现的错误，当程序运行需要的内存超过了剩余的内存时，就出抛出内存溢出的错误。&lt;/li&gt;
&lt;li&gt;举例：&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var obj = {}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (var i = 0; i &amp;lt; 10000; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	obj[i] = new Array(1000000000)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;https://img-blog.csdnimg.cn/2a7712a5634d4d2e9a9380eef6f28115.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内存泄露&#34;&gt;&lt;a href=&#34;#内存泄露&#34; class=&#34;headerlink&#34; title=&#34;内存泄露&#34;&gt;&lt;/a&gt;内存泄露&lt;/h2&gt;&lt;p&gt;概念：占用的内存没有及时释放，内存泄露积累多了就容易导致内存溢出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见的内存泄露:&lt;br&gt;（1）意外的全局变量&lt;br&gt;（2）没有及时清理的计时器或回调函数*闭包&lt;/li&gt;
&lt;li&gt;举例：&lt;br&gt;（1）意外的全局变量&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function fn() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	a= 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	console.log(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fn()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// fn() = null&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
（2）启动循环定时器后不清理&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var intervalId = setInterval(function () {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	console.log( &#39;----&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}, 1000)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// cLearInterval(intervaLId)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
（3）闭包，不及时释放&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function fn1() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	var a = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	function fn2() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		console.log(++a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return fn2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var f = fn1()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// f = nulL&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/09/19/elementui-zhi-cascader-ji-lian-xuan-ze-qi-zhi-ding-value-label/</guid>
            <title>ElementUI 之 Cascader 级联选择器指定 value label</title>
            <link>http://example.com/2022/09/19/elementui-zhi-cascader-ji-lian-xuan-ze-qi-zhi-ding-value-label/</link>
            <category>elementui</category>
            <category>vue.js</category>
            <category>javascript</category>
            <pubDate>Mon, 19 Sep 2022 20:57:25 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;ElementUI 的 Cascader 级联选择器对 :options=”options” 里的数据格式是有特定要求的：input 框显示的值是 options 里的 label 值。如果 options 的键值对不是 value label ，就需要 props 来配置。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;el-cascader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ref=&#34;cascader&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v-model=&#34;companyForm.industry&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    style=&#34;width: 500px; &#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :options=&#34;belongIndustry&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :props=&#34;{ multiple: true, emitPath:false }&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :clearable=&#34;true&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @change=&#34;nodeValue&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default { &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　data() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　belongIndustry:[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　　　{ id: 1, name: &#39;第一层&#39;, children: [ id: 11, name: &#39;水果&#39;]},&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　　　{ id: 2, name: &#39;第二层&#39;, children: [ id: 22, name: &#39;蔬菜&#39;] },&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/bbb2df70a4a2492e9fa2f83901c8405a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2VyZW5kaXBpdHlN,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
