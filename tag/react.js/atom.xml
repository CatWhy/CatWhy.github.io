<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>独白 • Posts by &#34;react.js&#34; tag</title>
    <link href="http://example.com" />
    <updated>2022-09-19T13:00:31.000Z</updated>
    <category term="elementui" />
    <category term="vue.js" />
    <category term="javascript" />
    <category term="前端" />
    <category term="开发语言" />
    <category term="原型模式" />
    <category term="react.js" />
    <category term="typescript" />
    <category term="Vue" />
    <category term="git" />
    <category term="npm" />
    <category term="node.js" />
    <category term="动画" />
    <category term="css3" />
    <entry>
        <id>http://example.com/2022/09/19/react-sheng-ming-zhou-qi/</id>
        <title>React生命周期</title>
        <link rel="alternate" href="http://example.com/2022/09/19/react-sheng-ming-zhou-qi/"/>
        <content type="html">&lt;h1 id=&#34;组件的挂载：&#34;&gt;&lt;a href=&#34;#组件的挂载：&#34; class=&#34;headerlink&#34; title=&#34;组件的挂载：&#34;&gt;&lt;/a&gt;组件的挂载：&lt;/h1&gt;&lt;p&gt;组件在首次创建后，进行第一次的渲染为挂载期。挂载期有的一些方法会被依次触发，列举如下：&lt;/p&gt;
&lt;p&gt;constructor(构造函数，初始化状态值)&lt;br&gt;getInitialState(设置状态机)&lt;br&gt;getDefaultProps(获取默认的props)&lt;br&gt;UNSAFE_componentWillMount(首次渲染前执行)&lt;br&gt;render(渲染组件)&lt;br&gt;componentDidMount(render渲染之后执行的操作)&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//组件挂载&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import React from &#39;react&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import ReactDOM from &#39;react-dom&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class HelloWorld extends React.Component{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(props) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;1,构造函数&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.state={};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;2,设置状态机&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    static defaultProps={&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        name:&#34;React&#34;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillMount(nextProps, nextState, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;3,完成首次渲染前调用&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    render() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;4,组件进行渲染&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;div&amp;gt;{this.props.name}&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentDidMount() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;5,componentDidMount render渲染后的操作&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ReactDOM.render(&amp;lt;HelloWorld /&amp;gt;, document.getElementById(&#39;root&#39;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/92c5df910cf6453698049a57fb6fd65c.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;组件的更新：&#34;&gt;&lt;a href=&#34;#组件的更新：&#34; class=&#34;headerlink&#34; title=&#34;组件的更新：&#34;&gt;&lt;/a&gt;组件的更新：&lt;/h1&gt;&lt;p&gt;组件更新，指的是在组件初次渲染后，进行了组件状态的改变。React在生命周期中的更新过程包括以下几个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNSAFE_componentWillReceiveProps :当父组件更新子组件state时，该方法会被调用。&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate ： 该方法决定组件state或props的改变是否需要重新渲染组件。&lt;/li&gt;
&lt;li&gt;UNSAFE_componentWillUpdate : 在组件接受新的state或者props时，即将进行重新渲染前调用该方法，和UNSAFE_componentWillMount方法类似。&lt;/li&gt;
&lt;li&gt;componentDidUpdate : 在组件重新渲染后调用该方法，和componentDidMount方法类似。&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; //组件更新&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class HelloWorldFather extends React.Component{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(props) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.updateChildProps=this.updateChildProps.bind(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.state={  //初始化父组件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name:&#34;React&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    updateChildProps(){  //更新父组件state&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.setState({&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name:&#34;Vue&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    render() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;HelloWorld name={this.state.name} /&amp;gt;  {/*父组件的state传递给子组件*/}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;button onClick={this.updateChildProps}&amp;gt;更新子组件props&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class HelloWorld extends React.Component{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(props) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;1,构造函数&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;2,设置状态机&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillMount() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;3,完成首次渲染前调用&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;6,父组件更新子组件时调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    shouldComponentUpdate(nextProps, nextState, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;7,决定组件props或者state的改变是否需要重新进行渲染&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;8,当接收到新的props或state时，调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    render() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;4,组件进行渲染&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;div&amp;gt;{this.props.name}&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentDidMount() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;5,componentDidMount render后的操作&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentDidUpdate(prevProps, prevState, snapshot) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;9,组件被重新选然后调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ReactDOM.render(&amp;lt;HelloWorldFather /&amp;gt;,document.getElementById(&#34;root&#34;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;https://img-blog.csdnimg.cn/1c84a48c41e94a228bfbac654801eb56.png&#34;&gt;&lt;br&gt;点击“更新子组件props”后：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/d9b73c3667b9415faffbe0df833139f2.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;组件的卸载：&#34;&gt;&lt;a href=&#34;#组件的卸载：&#34; class=&#34;headerlink&#34; title=&#34;组件的卸载：&#34;&gt;&lt;/a&gt;组件的卸载：&lt;/h1&gt;&lt;p&gt;生命周期的最后一个过程为组件卸载期，也称为组件销毁期。该过程主要涉及一个 方法，即componentWillUnmount，当组件从DOM树删除的时候调用该方法。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//组件卸载&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class HelloWorldFather extends React.Component{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(props) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.updateChildProps=this.updateChildProps.bind(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.state={  //初始化父组件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name:&#34;React&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    updateChildProps(){  //更新父组件state&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this.setState({&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name:&#34;Vue&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        })&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    render() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;HelloWorld name={this.state.name} /&amp;gt;  {/*父组件的state传递给子组件*/}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;button onClick={this.updateChildProps}&amp;gt;更新子组件props&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class HelloWorld extends React.Component{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    constructor(props) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;1,构造函数&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;2,设置状态机&#34;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillMount() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;3,完成首次渲染前调用&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;6,父组件更新子组件时调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    shouldComponentUpdate(nextProps, nextState, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;7,决定组件props或者state的改变是否需要重新进行渲染&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;8,当接收到新的props或state时，调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    delComponent(){  //添加卸载方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ReactDOM.unmountComponentAtNode(document.getElementById(&#34;root&#34;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    render() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;4,组件进行渲染&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;div&amp;gt;{this.props.name}&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;lt;button onClick={this.delComponent}&amp;gt;卸载组件&amp;lt;/button&amp;gt;  {/*声明卸载按钮*/}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentDidMount() {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;5,componentDidMount render后的操作&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentDidUpdate(prevProps, prevState, snapshot) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;9,组件被重新选然后调用该方法&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    componentWillUnmount() {  //组件卸载后执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.log(&#34;10,组件已被卸载&#34;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ReactDOM.render(&amp;lt;HelloWorldFather /&amp;gt;,document.getElementById(&#34;root&#34;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/3fc8a13384eb4a1eb5b6df0e6dd72c10.png&#34; alt=&#34;**加粗样式**&#34;&gt;&lt;br&gt;点击卸载按钮后：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2bd64f70a8e0438bb1f9e01ccb89e5e1.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;总览组件生命周期：&#34;&gt;&lt;a href=&#34;#总览组件生命周期：&#34; class=&#34;headerlink&#34; title=&#34;总览组件生命周期：&#34;&gt;&lt;/a&gt;总览组件生命周期：&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/7cd812539c5e4f6083bec0e3150d5dc6.png#pic_center&#34;&gt;&lt;/p&gt;
</content>
        <category term="前端" />
        <category term="react.js" />
        <updated>2022-09-19T13:00:31.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/09/19/shi-yong-nvm-an-zhuang-nodejs-bing-jie-jue-npm-xia-zai-yi-lai-shi-xiao-wen-ti-zui-quan-liu-cheng/</id>
        <title>使用NVM安装NodeJS并解决npm下载依赖失效问题（最全流程）</title>
        <link rel="alternate" href="http://example.com/2022/09/19/shi-yong-nvm-an-zhuang-nodejs-bing-jie-jue-npm-xia-zai-yi-lai-shi-xiao-wen-ti-zui-quan-liu-cheng/"/>
        <content type="html">&lt;p&gt;本人因为刚学习react，需要创建项目。下载过react依赖后才发现黑窗口提示我因node版本过低无法创建项目，怎么办呢？我去网上看了很多node升级的文章，大多数说的是重新去官网下载更高版本，我就跟着他们一步步走，但是很快问题就出现了。先是文章中说应该更改node缓存地址，防止给C盘造成过大压力。这就涉及到更改环境变量，我一顿操作后忽然发现我新安装的node版本查不到。emmmmmm 这是为什么呢？我去看了我的文件夹，发现之前的NodeJs版本是由nvm管理的。哦~~~原来是这样。我立马改道又去搜了nvm管理nodejs怎么下载更高级别的node版本。就这样，我又按照nvm的方式一步步输入命令。OK！nodejs版本下载好了。npm版本也能查到。我终于可以开始我的react之旅了。  但是！！老话说得好，人不能高兴的太早。我发现我的npm失效了，没办法下载任何依赖。我又能怎么办呢，只能改道重新去查询npm失效的解决办法，我看了很多文章，各种方法全试了，最起码在我这他们都不行。具体报错及尝试我就不在这里一一记录了。&lt;br&gt;我说说我的解决办法吧。我最终是决定卸载Nodejs以及nvm，重新走一遍流程。&lt;br&gt;因记录了自己整个解决问题的过程，废话有点多。&lt;strong&gt;大家可直接跳跃至标题（一：NVM介绍）阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：本文编写的NVM+NodeJS安装步骤指引，是基于Windows10、64位操作系统进行的编写说明。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;一、NVM介绍&#34;&gt;&lt;a href=&#34;#一、NVM介绍&#34; class=&#34;headerlink&#34; title=&#34;一、NVM介绍&#34;&gt;&lt;/a&gt;一、NVM介绍&lt;/h1&gt;&lt;p&gt;NVM：Node Version Manage，即Node的版本管理工具。使用NVM，可以很方便地在多个NodeJS版本之间进行切换。&lt;/p&gt;
&lt;p&gt;由于项目开发当中，&lt;strong&gt;不同的项目可能依赖不同版本的NodeJS&lt;/strong&gt;，这种情况下，&lt;strong&gt;NodeJS版本的切换将会是一件非常麻烦的事情&lt;/strong&gt;。因此，&lt;strong&gt;使用NVM管理NodeJS版本就显得尤为重要&lt;/strong&gt;。 &lt;/p&gt;
&lt;h1 id=&#34;二、卸载电脑上现有的NodeJS-及nvm&#34;&gt;&lt;a href=&#34;#二、卸载电脑上现有的NodeJS-及nvm&#34; class=&#34;headerlink&#34; title=&#34;二、卸载电脑上现有的NodeJS 及nvm&#34;&gt;&lt;/a&gt;二、卸载电脑上现有的NodeJS 及nvm&lt;/h1&gt;&lt;h2 id=&#34;卸载nvm&#34;&gt;&lt;a href=&#34;#卸载nvm&#34; class=&#34;headerlink&#34; title=&#34;卸载nvm&#34;&gt;&lt;/a&gt;卸载nvm&lt;/h2&gt;&lt;p&gt;直接删除nvM所在文件夹就可以了。&lt;/p&gt;
&lt;h2 id=&#34;卸载NodeJS&#34;&gt;&lt;a href=&#34;#卸载NodeJS&#34; class=&#34;headerlink&#34; title=&#34;卸载NodeJS&#34;&gt;&lt;/a&gt;卸载NodeJS&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从卸载程序卸载程序和功能&lt;br&gt; a. 打开控制面板&lt;br&gt; b. 选择程序和功能&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/7b1d3cff85394f328fc1c685a0b559dd.png&#34;&gt;&lt;br&gt; c. 找到Node.js并卸载&lt;br&gt; &lt;img src=&#34;https://img-blog.csdnimg.cn/fac98ee374b84df2a749d43a9005c274.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查环境变量&lt;br&gt;将用户变量和系统变量中所有与node有关的全部删除。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：不要忘记检查path&lt;/strong&gt;&lt;br&gt;3. 检查系统盘，寻找这些文件并删除它们（根据您安装的版本，UAC设置和CPU架构，这些可能或可能不存在）：&lt;br&gt;C:\Users{User}\AppData\Roaming\npm（或%appdata%\npm）&lt;br&gt;C:\Users{User}\AppData\Roaming\npm-cache（或%appdata%\npm-cache）&lt;br&gt;4. 重启电脑&lt;br&gt;5. 黑窗口输入以下代码检查是否正确删除&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nvm -v&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;node -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;三、安装NVM和NodeJs&#34;&gt;&lt;a href=&#34;#三、安装NVM和NodeJs&#34; class=&#34;headerlink&#34; title=&#34;三、安装NVM和NodeJs&#34;&gt;&lt;/a&gt;三、安装NVM和NodeJs&lt;/h1&gt;&lt;h2 id=&#34;3-1-下载NVM安装包&#34;&gt;&lt;a href=&#34;#3-1-下载NVM安装包&#34; class=&#34;headerlink&#34; title=&#34;3.1 下载NVM安装包&#34;&gt;&lt;/a&gt;3.1 下载NVM安装包&lt;/h2&gt;&lt;p&gt;在GitHub上下载NVM的安装包。下载地址：&lt;a href=&#34;https://github.com/coreybutler/nvm-windows/releases%EF%BC%8C%E9%80%89%E6%8B%A9%E4%B8%8B%E8%BD%BDnvm-setup.zip%E3%80%82&#34;&gt;https://github.com/coreybutler/nvm-windows/releases，选择下载nvm-setup.zip。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注：本例中选用的是截至2022年4月12日最新版本的NVM安装包，版本号为1.1.9。 &lt;/p&gt;
&lt;h2 id=&#34;3-2-安装NVM&#34;&gt;&lt;a href=&#34;#3-2-安装NVM&#34; class=&#34;headerlink&#34; title=&#34;3.2 安装NVM&#34;&gt;&lt;/a&gt;3.2 安装NVM&lt;/h2&gt;&lt;p&gt;双击nvm-setup.exe文件，进行NVM的安装。&lt;br&gt;(1) 接受协议，下一步。&lt;br&gt;(2) 选择NVM的安装路径。可以按照个人习惯，自行选择安装路径。本例中，按照本人习惯，选择安装在D:\nvm\nvm下。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/40f0692c725e482ab9c1da5485a6671a.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;(3) 选择NodeJS的Symlink (符号链接)文件夹的位置，用于生成NodeJS的映射目录。本例中，按照本人习惯，选择D:\nodejs。&lt;/p&gt;
&lt;p&gt;注：&lt;strong&gt;安装前，需确保Symlink文件夹所在的路径不存在&lt;/strong&gt;，否则可能安装失败。&lt;/p&gt;
&lt;p&gt;(4) 点击安装，等待安装完成。&lt;/p&gt;
&lt;p&gt;(5) 配置环境变量。&lt;/p&gt;
&lt;p&gt;打开高级系统设置-&amp;gt;环境变量，可以发现，安装成功后，NVM已经自动帮我们配置了环境变量NVM_HOME和NVM_SYMLINK，并且配置了Path的值。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/183d4ee9c4ae4c07bb9bcac6b0cbe44a.png&#34;&gt;&lt;br&gt;因此，对于1.1.9版本的NVM，环境变量一般情况下无需手动配置。&lt;/p&gt;
&lt;p&gt;注：若使用的是免安装版的NVM，可以按照如下方式手动配置环境变量。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在用户变量(或系统变量)中，添加变量名NVM_HOME，变量的值为NVM所在的根路径(以本例为例，路径为：D:\Program Files\nvm)； 2. 在用户变量(或系统变量)中，添加变量名NVM_SYMLINK，变量的值为NodeJS的Symlink 文件夹的位置(以本例为例，路径为：D:\Program Files\nodejs)； 3. 在用户变量(或系统变量)的path当中添加两个值：%NVM_HOME%和%NVM_SYMLINK%。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(6) 配置NodeJS下载代理镜像（可选）&lt;/p&gt;
&lt;p&gt;安装完成后，可以在NVM安装根目录下的setting.txt文件中，配置NodeJS下载代理镜像，解决在线安装NodeJS时速度慢的问题。&lt;/p&gt;
&lt;p&gt;注：由于下载速度一般正常，并且可以使用离线安装的方式安装NodeJS，因此配置NodeJS下载镜像地址并不是必须的。由于篇幅有限，这里不再展开介绍。&lt;/p&gt;
&lt;p&gt;2.3 验证NVM是否安装成功&lt;/p&gt;
&lt;p&gt;安装完成后，打开命令行窗口，输入nvm -v，出现版本号即表示安装成功。&lt;/p&gt;
&lt;h2 id=&#34;3-3在NVM中安装NodeJS&#34;&gt;&lt;a href=&#34;#3-3在NVM中安装NodeJS&#34; class=&#34;headerlink&#34; title=&#34;3.3在NVM中安装NodeJS&#34;&gt;&lt;/a&gt;3.3在NVM中安装NodeJS&lt;/h2&gt;&lt;h3 id=&#34;3-3-1-nvm安装&#34;&gt;&lt;a href=&#34;#3-3-1-nvm安装&#34; class=&#34;headerlink&#34; title=&#34;3.3.1 nvm安装&#34;&gt;&lt;/a&gt;3.3.1 nvm安装&lt;/h3&gt;&lt;p&gt;首先，&lt;strong&gt;在使用NVM安装NodeJS前，需要以管理员身份打开命令行窗口。否则，将无法使用nvm use命令切换NPM版本&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(1) 首先，使用NVM命令 nvm list available，查看可安装的NodeJS版本。建议选择LTS中的版本进行安装（LTS，即Long Term Support，长期支持版本）&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/5328c8e473fb4d1e8aabf8dda996e2f7.png&#34;&gt;&lt;br&gt;注：若要查看完整的可安装版本列表，可访问官网：&lt;a href=&#34;https://nodejs.org/en/download/releases/&#34;&gt;https://nodejs.org/en/download/releases/&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;(2) 使用NVM命令nvm install，进行对应版本NodeJS的在线安装。&lt;/p&gt;
&lt;p&gt;示例 ：如需在线安装16.14.2版本的NodeJS，直接在命令行窗口输入：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nvm install 16.15.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;3-3-2离线安装NodeJs&#34;&gt;&lt;a href=&#34;#3-3-2离线安装NodeJs&#34; class=&#34;headerlink&#34; title=&#34;3.3.2离线安装NodeJs&#34;&gt;&lt;/a&gt;3.3.2离线安装NodeJs&lt;/h3&gt;&lt;p&gt;(1) 从官网下载指定版本NodeJS的免安装版离线安装包，下载地址：&lt;a href=&#34;https://nodejs.org/en/download/releases/&#34;&gt;https://nodejs.org/en/download/releases/&lt;/a&gt;。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/8b320edcd4704b52b69c44601d888c9b.png&#34;&gt;&lt;br&gt;上图中是Windows 10 64位操作系统，因此选择的是node-v17.6.0-win-x64.zip。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/07158792266645a7a36a6369e53a862c.png&#34;&gt;&lt;br&gt;(2) 将指定版本的NodeJS免安装版离线安装包，解压后放入到NVM安装路径的根目录下，即可完成离线安装。&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/33c890bc335f4d729061879f8d380606.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-3-3-版本切换&#34;&gt;&lt;a href=&#34;#3-3-3-版本切换&#34; class=&#34;headerlink&#34; title=&#34;3.3.3 版本切换&#34;&gt;&lt;/a&gt;3.3.3 版本切换&lt;/h3&gt;&lt;p&gt;若已经成功安装了指定版本的NodeJS，只需要在命令行窗口执行npm use命令，切换对应版本的NodeJS即可。本例中，由于已经安装了16.14.2版本，因此可以执行以下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nvm use 17.6.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果执行之后是一串乱码，你需要用管理员身份打开窗口，重新输入上面的话。&lt;br&gt;若操作成功，将出现提示：Now using node v16.15.0 (64-bit)&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/9208dc58cda34afeba9e0daf03959913.png&#34;&gt;&lt;br&gt;如果能够以管理员身份，在命令行窗口成功执行以上命令，那么恭喜你，NVM+NodeJS已经成功安装完成！！！&lt;/p&gt;
&lt;h3 id=&#34;3-3-4-NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。&#34;&gt;&lt;a href=&#34;#3-3-4-NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。&#34; class=&#34;headerlink&#34; title=&#34;3.3.4 NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。&#34;&gt;&lt;/a&gt;3.3.4 NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。&lt;/h3&gt;&lt;h1 id=&#34;四、解决npm失效问题&#34;&gt;&lt;a href=&#34;#四、解决npm失效问题&#34; class=&#34;headerlink&#34; title=&#34;四、解决npm失效问题&#34;&gt;&lt;/a&gt;四、解决npm失效问题&lt;/h1&gt;&lt;p&gt;有的人可能到上一步为止问题就解决了。但是也会有一部分人像我一样，运行&lt;code&gt;npm -v&lt;/code&gt;报错&lt;code&gt;&#39;npm&#39; 不是内部或外部命令，也不是可运行的程序&lt;/code&gt;&lt;br&gt;我打开nvm文件夹去看了下，16.15.0里面这些都没有，node_modules文件夹也是空的。。。&lt;br&gt;正常应该是下图所示：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/0b378115b8b74c5998003b4e97a54bd5.png&#34;&gt;&lt;br&gt;&lt;strong&gt;解决办法是：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;从node官网找对应版本的zip压缩包下来，替换掉这个目录里的东西&lt;/strong&gt;，然后就完美解决了，node、npm都没问题，也可以自由切换版本。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;本文没有详写nodejs 如何指定全局安装路径和缓存路径。各位如果有需要，可自行查找。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;借阅大佬文章：&lt;a href=&#34;https://www.bilibili.com/read/cv16108420&#34;&gt;使用NVM安装NodeJS(原创 最全笔记)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="react.js" />
        <category term="npm" />
        <category term="node.js" />
        <updated>2022-09-19T12:59:57.000Z</updated>
    </entry>
</feed>
