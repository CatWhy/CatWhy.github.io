{
    "version": "https://jsonfeed.org/version/1",
    "title": "独白 • All posts by \"react.js\" tag",
    "description": "博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/09/19/react-sheng-ming-zhou-qi/",
            "url": "http://example.com/2022/09/19/react-sheng-ming-zhou-qi/",
            "title": "React生命周期",
            "date_published": "2022-09-19T13:00:31.000Z",
            "content_html": "<h1 id=\"组件的挂载：\"><a href=\"#组件的挂载：\" class=\"headerlink\" title=\"组件的挂载：\"></a>组件的挂载：</h1><p>组件在首次创建后，进行第一次的渲染为挂载期。挂载期有的一些方法会被依次触发，列举如下：</p>\n<p>constructor(构造函数，初始化状态值)<br>getInitialState(设置状态机)<br>getDefaultProps(获取默认的props)<br>UNSAFE_componentWillMount(首次渲染前执行)<br>render(渲染组件)<br>componentDidMount(render渲染之后执行的操作)</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//组件挂载</span><br><span class=\"line\">import React from 'react';</span><br><span class=\"line\">import ReactDOM from 'react-dom';</span><br><span class=\"line\">class HelloWorld extends React.Component{</span><br><span class=\"line\">    constructor(props) {</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        console.log(\"1,构造函数\");</span><br><span class=\"line\">        this.state={};</span><br><span class=\"line\">        console.log(\"2,设置状态机\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">    static defaultProps={</span><br><span class=\"line\">        name:\"React\",</span><br><span class=\"line\">    }</span><br><span class=\"line\">    UNSAFE_componentWillMount(nextProps, nextState, nextContext) {</span><br><span class=\"line\">        console.log(\"3,完成首次渲染前调用\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">    render() {</span><br><span class=\"line\">        console.log(\"4,组件进行渲染\");</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;div&gt;{this.props.name}&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    }</span><br><span class=\"line\">    componentDidMount() {</span><br><span class=\"line\">        console.log(\"5,componentDidMount render渲染后的操作\")</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">ReactDOM.render(&lt;HelloWorld /&gt;, document.getElementById('root'));</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/92c5df910cf6453698049a57fb6fd65c.png\"></p>\n<h1 id=\"组件的更新：\"><a href=\"#组件的更新：\" class=\"headerlink\" title=\"组件的更新：\"></a>组件的更新：</h1><p>组件更新，指的是在组件初次渲染后，进行了组件状态的改变。React在生命周期中的更新过程包括以下几个方法：</p>\n<ul>\n<li>UNSAFE_componentWillReceiveProps :当父组件更新子组件state时，该方法会被调用。</li>\n<li>shouldComponentUpdate ： 该方法决定组件state或props的改变是否需要重新渲染组件。</li>\n<li>UNSAFE_componentWillUpdate : 在组件接受新的state或者props时，即将进行重新渲染前调用该方法，和UNSAFE_componentWillMount方法类似。</li>\n<li>componentDidUpdate : 在组件重新渲染后调用该方法，和componentDidMount方法类似。<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //组件更新</span><br><span class=\"line\">class HelloWorldFather extends React.Component{</span><br><span class=\"line\">    constructor(props) {</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        this.updateChildProps=this.updateChildProps.bind(this);</span><br><span class=\"line\">        this.state={  //初始化父组件</span><br><span class=\"line\">            name:\"React\"</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    updateChildProps(){  //更新父组件state</span><br><span class=\"line\">        this.setState({</span><br><span class=\"line\">            name:\"Vue\"</span><br><span class=\"line\">        })</span><br><span class=\"line\">    }</span><br><span class=\"line\">    render() {</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;HelloWorld name={this.state.name} /&gt;  {/*父组件的state传递给子组件*/}</span><br><span class=\"line\">                &lt;button onClick={this.updateChildProps}&gt;更新子组件props&lt;/button&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">class HelloWorld extends React.Component{</span><br><span class=\"line\">    constructor(props) {</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        console.log(\"1,构造函数\");</span><br><span class=\"line\">        console.log(\"2,设置状态机\")</span><br><span class=\"line\">    }</span><br><span class=\"line\">    UNSAFE_componentWillMount() {</span><br><span class=\"line\">        console.log(\"3,完成首次渲染前调用\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {</span><br><span class=\"line\">        console.log(\"6,父组件更新子组件时调用该方法\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">    shouldComponentUpdate(nextProps, nextState, nextContext) {</span><br><span class=\"line\">        console.log(\"7,决定组件props或者state的改变是否需要重新进行渲染\");</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {</span><br><span class=\"line\">        console.log(\"8,当接收到新的props或state时，调用该方法\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">    render() {</span><br><span class=\"line\">        console.log(\"4,组件进行渲染\");</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;div&gt;{this.props.name}&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    }</span><br><span class=\"line\">    componentDidMount() {</span><br><span class=\"line\">        console.log(\"5,componentDidMount render后的操作\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">    componentDidUpdate(prevProps, prevState, snapshot) {</span><br><span class=\"line\">        console.log(\"9,组件被重新选然后调用该方法\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">ReactDOM.render(&lt;HelloWorldFather /&gt;,document.getElementById(\"root\"));</span><br></pre></td></tr></tbody></table></figure>\n<img src=\"https://img-blog.csdnimg.cn/1c84a48c41e94a228bfbac654801eb56.png\"><br>点击“更新子组件props”后：<br><img src=\"https://img-blog.csdnimg.cn/d9b73c3667b9415faffbe0df833139f2.png\"></li>\n</ul>\n<h1 id=\"组件的卸载：\"><a href=\"#组件的卸载：\" class=\"headerlink\" title=\"组件的卸载：\"></a>组件的卸载：</h1><p>生命周期的最后一个过程为组件卸载期，也称为组件销毁期。该过程主要涉及一个 方法，即componentWillUnmount，当组件从DOM树删除的时候调用该方法。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//组件卸载</span><br><span class=\"line\">class HelloWorldFather extends React.Component{</span><br><span class=\"line\">    constructor(props) {</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        this.updateChildProps=this.updateChildProps.bind(this);</span><br><span class=\"line\">        this.state={  //初始化父组件</span><br><span class=\"line\">            name:\"React\"</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    updateChildProps(){  //更新父组件state</span><br><span class=\"line\">        this.setState({</span><br><span class=\"line\">            name:\"Vue\"</span><br><span class=\"line\">        })</span><br><span class=\"line\">    }</span><br><span class=\"line\">    render() {</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;HelloWorld name={this.state.name} /&gt;  {/*父组件的state传递给子组件*/}</span><br><span class=\"line\">                &lt;button onClick={this.updateChildProps}&gt;更新子组件props&lt;/button&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">class HelloWorld extends React.Component{</span><br><span class=\"line\">    constructor(props) {</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        console.log(\"1,构造函数\");</span><br><span class=\"line\">        console.log(\"2,设置状态机\")</span><br><span class=\"line\">    }</span><br><span class=\"line\">    UNSAFE_componentWillMount() {</span><br><span class=\"line\">        console.log(\"3,完成首次渲染前调用\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {</span><br><span class=\"line\">        console.log(\"6,父组件更新子组件时调用该方法\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">    shouldComponentUpdate(nextProps, nextState, nextContext) {</span><br><span class=\"line\">        console.log(\"7,决定组件props或者state的改变是否需要重新进行渲染\");</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {</span><br><span class=\"line\">        console.log(\"8,当接收到新的props或state时，调用该方法\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">    delComponent(){  //添加卸载方法</span><br><span class=\"line\">        ReactDOM.unmountComponentAtNode(document.getElementById(\"root\"));</span><br><span class=\"line\">    }</span><br><span class=\"line\">    render() {</span><br><span class=\"line\">        console.log(\"4,组件进行渲染\");</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;div&gt;{this.props.name}&lt;/div&gt;</span><br><span class=\"line\">                &lt;button onClick={this.delComponent}&gt;卸载组件&lt;/button&gt;  {/*声明卸载按钮*/}</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    }</span><br><span class=\"line\">    componentDidMount() {</span><br><span class=\"line\">        console.log(\"5,componentDidMount render后的操作\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">    componentDidUpdate(prevProps, prevState, snapshot) {</span><br><span class=\"line\">        console.log(\"9,组件被重新选然后调用该方法\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">    componentWillUnmount() {  //组件卸载后执行</span><br><span class=\"line\">        console.log(\"10,组件已被卸载\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">ReactDOM.render(&lt;HelloWorldFather /&gt;,document.getElementById(\"root\"));</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/3fc8a13384eb4a1eb5b6df0e6dd72c10.png\" alt=\"**加粗样式**\"><br>点击卸载按钮后：<br><img src=\"https://img-blog.csdnimg.cn/2bd64f70a8e0438bb1f9e01ccb89e5e1.png\"></p>\n<h1 id=\"总览组件生命周期：\"><a href=\"#总览组件生命周期：\" class=\"headerlink\" title=\"总览组件生命周期：\"></a>总览组件生命周期：</h1><p><img src=\"https://img-blog.csdnimg.cn/7cd812539c5e4f6083bec0e3150d5dc6.png#pic_center\"></p>\n",
            "tags": [
                "前端",
                "react.js"
            ]
        },
        {
            "id": "http://example.com/2022/09/19/shi-yong-nvm-an-zhuang-nodejs-bing-jie-jue-npm-xia-zai-yi-lai-shi-xiao-wen-ti-zui-quan-liu-cheng/",
            "url": "http://example.com/2022/09/19/shi-yong-nvm-an-zhuang-nodejs-bing-jie-jue-npm-xia-zai-yi-lai-shi-xiao-wen-ti-zui-quan-liu-cheng/",
            "title": "使用NVM安装NodeJS并解决npm下载依赖失效问题（最全流程）",
            "date_published": "2022-09-19T12:59:57.000Z",
            "content_html": "<p>本人因为刚学习react，需要创建项目。下载过react依赖后才发现黑窗口提示我因node版本过低无法创建项目，怎么办呢？我去网上看了很多node升级的文章，大多数说的是重新去官网下载更高版本，我就跟着他们一步步走，但是很快问题就出现了。先是文章中说应该更改node缓存地址，防止给C盘造成过大压力。这就涉及到更改环境变量，我一顿操作后忽然发现我新安装的node版本查不到。emmmmmm 这是为什么呢？我去看了我的文件夹，发现之前的NodeJs版本是由nvm管理的。哦~~~原来是这样。我立马改道又去搜了nvm管理nodejs怎么下载更高级别的node版本。就这样，我又按照nvm的方式一步步输入命令。OK！nodejs版本下载好了。npm版本也能查到。我终于可以开始我的react之旅了。  但是！！老话说得好，人不能高兴的太早。我发现我的npm失效了，没办法下载任何依赖。我又能怎么办呢，只能改道重新去查询npm失效的解决办法，我看了很多文章，各种方法全试了，最起码在我这他们都不行。具体报错及尝试我就不在这里一一记录了。<br>我说说我的解决办法吧。我最终是决定卸载Nodejs以及nvm，重新走一遍流程。<br>因记录了自己整个解决问题的过程，废话有点多。<strong>大家可直接跳跃至标题（一：NVM介绍）阅读</strong></p>\n<p><strong>注：本文编写的NVM+NodeJS安装步骤指引，是基于Windows10、64位操作系统进行的编写说明。</strong></p>\n<h1 id=\"一、NVM介绍\"><a href=\"#一、NVM介绍\" class=\"headerlink\" title=\"一、NVM介绍\"></a>一、NVM介绍</h1><p>NVM：Node Version Manage，即Node的版本管理工具。使用NVM，可以很方便地在多个NodeJS版本之间进行切换。</p>\n<p>由于项目开发当中，<strong>不同的项目可能依赖不同版本的NodeJS</strong>，这种情况下，<strong>NodeJS版本的切换将会是一件非常麻烦的事情</strong>。因此，<strong>使用NVM管理NodeJS版本就显得尤为重要</strong>。 </p>\n<h1 id=\"二、卸载电脑上现有的NodeJS-及nvm\"><a href=\"#二、卸载电脑上现有的NodeJS-及nvm\" class=\"headerlink\" title=\"二、卸载电脑上现有的NodeJS 及nvm\"></a>二、卸载电脑上现有的NodeJS 及nvm</h1><h2 id=\"卸载nvm\"><a href=\"#卸载nvm\" class=\"headerlink\" title=\"卸载nvm\"></a>卸载nvm</h2><p>直接删除nvM所在文件夹就可以了。</p>\n<h2 id=\"卸载NodeJS\"><a href=\"#卸载NodeJS\" class=\"headerlink\" title=\"卸载NodeJS\"></a>卸载NodeJS</h2><ol>\n<li><p>从卸载程序卸载程序和功能<br> a. 打开控制面板<br> b. 选择程序和功能<br><img src=\"https://img-blog.csdnimg.cn/7b1d3cff85394f328fc1c685a0b559dd.png\"><br> c. 找到Node.js并卸载<br> <img src=\"https://img-blog.csdnimg.cn/fac98ee374b84df2a749d43a9005c274.png\"></p>\n</li>\n<li><p>检查环境变量<br>将用户变量和系统变量中所有与node有关的全部删除。</p>\n</li>\n</ol>\n<p><strong>注意：不要忘记检查path</strong><br>3. 检查系统盘，寻找这些文件并删除它们（根据您安装的版本，UAC设置和CPU架构，这些可能或可能不存在）：<br>C:\\Users{User}\\AppData\\Roaming\\npm（或%appdata%\\npm）<br>C:\\Users{User}\\AppData\\Roaming\\npm-cache（或%appdata%\\npm-cache）<br>4. 重启电脑<br>5. 黑窗口输入以下代码检查是否正确删除</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm -v</span><br><span class=\"line\">node -v</span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"三、安装NVM和NodeJs\"><a href=\"#三、安装NVM和NodeJs\" class=\"headerlink\" title=\"三、安装NVM和NodeJs\"></a>三、安装NVM和NodeJs</h1><h2 id=\"3-1-下载NVM安装包\"><a href=\"#3-1-下载NVM安装包\" class=\"headerlink\" title=\"3.1 下载NVM安装包\"></a>3.1 下载NVM安装包</h2><p>在GitHub上下载NVM的安装包。下载地址：<a href=\"https://github.com/coreybutler/nvm-windows/releases%EF%BC%8C%E9%80%89%E6%8B%A9%E4%B8%8B%E8%BD%BDnvm-setup.zip%E3%80%82\">https://github.com/coreybutler/nvm-windows/releases，选择下载nvm-setup.zip。</a></p>\n<p>注：本例中选用的是截至2022年4月12日最新版本的NVM安装包，版本号为1.1.9。 </p>\n<h2 id=\"3-2-安装NVM\"><a href=\"#3-2-安装NVM\" class=\"headerlink\" title=\"3.2 安装NVM\"></a>3.2 安装NVM</h2><p>双击nvm-setup.exe文件，进行NVM的安装。<br>(1) 接受协议，下一步。<br>(2) 选择NVM的安装路径。可以按照个人习惯，自行选择安装路径。本例中，按照本人习惯，选择安装在D:\\nvm\\nvm下。<br><img src=\"https://img-blog.csdnimg.cn/40f0692c725e482ab9c1da5485a6671a.png\"></p>\n<p>(3) 选择NodeJS的Symlink (符号链接)文件夹的位置，用于生成NodeJS的映射目录。本例中，按照本人习惯，选择D:\\nodejs。</p>\n<p>注：<strong>安装前，需确保Symlink文件夹所在的路径不存在</strong>，否则可能安装失败。</p>\n<p>(4) 点击安装，等待安装完成。</p>\n<p>(5) 配置环境变量。</p>\n<p>打开高级系统设置-&gt;环境变量，可以发现，安装成功后，NVM已经自动帮我们配置了环境变量NVM_HOME和NVM_SYMLINK，并且配置了Path的值。<br><img src=\"https://img-blog.csdnimg.cn/183d4ee9c4ae4c07bb9bcac6b0cbe44a.png\"><br>因此，对于1.1.9版本的NVM，环境变量一般情况下无需手动配置。</p>\n<p>注：若使用的是免安装版的NVM，可以按照如下方式手动配置环境变量。</p>\n<ol>\n<li>在用户变量(或系统变量)中，添加变量名NVM_HOME，变量的值为NVM所在的根路径(以本例为例，路径为：D:\\Program Files\\nvm)； 2. 在用户变量(或系统变量)中，添加变量名NVM_SYMLINK，变量的值为NodeJS的Symlink 文件夹的位置(以本例为例，路径为：D:\\Program Files\\nodejs)； 3. 在用户变量(或系统变量)的path当中添加两个值：%NVM_HOME%和%NVM_SYMLINK%。</li>\n</ol>\n<p>(6) 配置NodeJS下载代理镜像（可选）</p>\n<p>安装完成后，可以在NVM安装根目录下的setting.txt文件中，配置NodeJS下载代理镜像，解决在线安装NodeJS时速度慢的问题。</p>\n<p>注：由于下载速度一般正常，并且可以使用离线安装的方式安装NodeJS，因此配置NodeJS下载镜像地址并不是必须的。由于篇幅有限，这里不再展开介绍。</p>\n<p>2.3 验证NVM是否安装成功</p>\n<p>安装完成后，打开命令行窗口，输入nvm -v，出现版本号即表示安装成功。</p>\n<h2 id=\"3-3在NVM中安装NodeJS\"><a href=\"#3-3在NVM中安装NodeJS\" class=\"headerlink\" title=\"3.3在NVM中安装NodeJS\"></a>3.3在NVM中安装NodeJS</h2><h3 id=\"3-3-1-nvm安装\"><a href=\"#3-3-1-nvm安装\" class=\"headerlink\" title=\"3.3.1 nvm安装\"></a>3.3.1 nvm安装</h3><p>首先，<strong>在使用NVM安装NodeJS前，需要以管理员身份打开命令行窗口。否则，将无法使用nvm use命令切换NPM版本</strong>。</p>\n<p>(1) 首先，使用NVM命令 nvm list available，查看可安装的NodeJS版本。建议选择LTS中的版本进行安装（LTS，即Long Term Support，长期支持版本）<br><img src=\"https://img-blog.csdnimg.cn/5328c8e473fb4d1e8aabf8dda996e2f7.png\"><br>注：若要查看完整的可安装版本列表，可访问官网：<a href=\"https://nodejs.org/en/download/releases/\">https://nodejs.org/en/download/releases/</a>。</p>\n<p>(2) 使用NVM命令nvm install，进行对应版本NodeJS的在线安装。</p>\n<p>示例 ：如需在线安装16.14.2版本的NodeJS，直接在命令行窗口输入：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 16.15.0</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-3-2离线安装NodeJs\"><a href=\"#3-3-2离线安装NodeJs\" class=\"headerlink\" title=\"3.3.2离线安装NodeJs\"></a>3.3.2离线安装NodeJs</h3><p>(1) 从官网下载指定版本NodeJS的免安装版离线安装包，下载地址：<a href=\"https://nodejs.org/en/download/releases/\">https://nodejs.org/en/download/releases/</a>。<br><img src=\"https://img-blog.csdnimg.cn/8b320edcd4704b52b69c44601d888c9b.png\"><br>上图中是Windows 10 64位操作系统，因此选择的是node-v17.6.0-win-x64.zip。<br><img src=\"https://img-blog.csdnimg.cn/07158792266645a7a36a6369e53a862c.png\"><br>(2) 将指定版本的NodeJS免安装版离线安装包，解压后放入到NVM安装路径的根目录下，即可完成离线安装。<br><img src=\"https://img-blog.csdnimg.cn/33c890bc335f4d729061879f8d380606.png\"></p>\n<h3 id=\"3-3-3-版本切换\"><a href=\"#3-3-3-版本切换\" class=\"headerlink\" title=\"3.3.3 版本切换\"></a>3.3.3 版本切换</h3><p>若已经成功安装了指定版本的NodeJS，只需要在命令行窗口执行npm use命令，切换对应版本的NodeJS即可。本例中，由于已经安装了16.14.2版本，因此可以执行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 17.6.0</span><br></pre></td></tr></tbody></table></figure>\n<p>如果执行之后是一串乱码，你需要用管理员身份打开窗口，重新输入上面的话。<br>若操作成功，将出现提示：Now using node v16.15.0 (64-bit)<br><img src=\"https://img-blog.csdnimg.cn/9208dc58cda34afeba9e0daf03959913.png\"><br>如果能够以管理员身份，在命令行窗口成功执行以上命令，那么恭喜你，NVM+NodeJS已经成功安装完成！！！</p>\n<h3 id=\"3-3-4-NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。\"><a href=\"#3-3-4-NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。\" class=\"headerlink\" title=\"3.3.4 NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。\"></a>3.3.4 NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。</h3><h1 id=\"四、解决npm失效问题\"><a href=\"#四、解决npm失效问题\" class=\"headerlink\" title=\"四、解决npm失效问题\"></a>四、解决npm失效问题</h1><p>有的人可能到上一步为止问题就解决了。但是也会有一部分人像我一样，运行<code>npm -v</code>报错<code>'npm' 不是内部或外部命令，也不是可运行的程序</code><br>我打开nvm文件夹去看了下，16.15.0里面这些都没有，node_modules文件夹也是空的。。。<br>正常应该是下图所示：<br><img src=\"https://img-blog.csdnimg.cn/0b378115b8b74c5998003b4e97a54bd5.png\"><br><strong>解决办法是：</strong><br><strong>从node官网找对应版本的zip压缩包下来，替换掉这个目录里的东西</strong>，然后就完美解决了，node、npm都没问题，也可以自由切换版本。</p>\n<p><code>本文没有详写nodejs 如何指定全局安装路径和缓存路径。各位如果有需要，可自行查找。</code></p>\n<p>借阅大佬文章：<a href=\"https://www.bilibili.com/read/cv16108420\">使用NVM安装NodeJS(原创 最全笔记)</a></p>\n",
            "tags": [
                "react.js",
                "npm",
                "node.js"
            ]
        }
    ]
}