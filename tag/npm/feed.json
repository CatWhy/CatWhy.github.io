{
    "version": "https://jsonfeed.org/version/1",
    "title": "独白 • All posts by \"npm\" tag",
    "description": "博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/09/19/npm-run-eject-bao-cuo-this-git-repository-has-untracked-files-or-uncommitted-changes-jie-jue-fang-an/",
            "url": "http://example.com/2022/09/19/npm-run-eject-bao-cuo-this-git-repository-has-untracked-files-or-uncommitted-changes-jie-jue-fang-an/",
            "title": "npm run eject 报错This git repository has untracked files or uncommitted changes解决方案",
            "date_published": "2022-09-19T13:00:14.000Z",
            "content_html": "<p>在创建 React 项目之后，使用 npm run eject 命令会报错：This git repository has untracked files or uncommitted changes。这个的原因是因为初始化项目之后，该项目并没有本地 git 仓库，而此项目目录下又有 .gitignore 文件，所以此时会向上级寻找未提交的项目。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>1.初始化仓库</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></tbody></table></figure>\n<p>2.添加并提交</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m '初始化项目'</span><br></pre></td></tr></tbody></table></figure>\n<p>3.重新执行</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run eject</span><br></pre></td></tr></tbody></table></figure>",
            "tags": [
                "npm",
                "node.js",
                "git"
            ]
        },
        {
            "id": "http://example.com/2022/09/19/shi-yong-nvm-an-zhuang-nodejs-bing-jie-jue-npm-xia-zai-yi-lai-shi-xiao-wen-ti-zui-quan-liu-cheng/",
            "url": "http://example.com/2022/09/19/shi-yong-nvm-an-zhuang-nodejs-bing-jie-jue-npm-xia-zai-yi-lai-shi-xiao-wen-ti-zui-quan-liu-cheng/",
            "title": "使用NVM安装NodeJS并解决npm下载依赖失效问题（最全流程）",
            "date_published": "2022-09-19T12:59:57.000Z",
            "content_html": "<p>本人因为刚学习react，需要创建项目。下载过react依赖后才发现黑窗口提示我因node版本过低无法创建项目，怎么办呢？我去网上看了很多node升级的文章，大多数说的是重新去官网下载更高版本，我就跟着他们一步步走，但是很快问题就出现了。先是文章中说应该更改node缓存地址，防止给C盘造成过大压力。这就涉及到更改环境变量，我一顿操作后忽然发现我新安装的node版本查不到。emmmmmm 这是为什么呢？我去看了我的文件夹，发现之前的NodeJs版本是由nvm管理的。哦~~~原来是这样。我立马改道又去搜了nvm管理nodejs怎么下载更高级别的node版本。就这样，我又按照nvm的方式一步步输入命令。OK！nodejs版本下载好了。npm版本也能查到。我终于可以开始我的react之旅了。  但是！！老话说得好，人不能高兴的太早。我发现我的npm失效了，没办法下载任何依赖。我又能怎么办呢，只能改道重新去查询npm失效的解决办法，我看了很多文章，各种方法全试了，最起码在我这他们都不行。具体报错及尝试我就不在这里一一记录了。<br>我说说我的解决办法吧。我最终是决定卸载Nodejs以及nvm，重新走一遍流程。<br>因记录了自己整个解决问题的过程，废话有点多。<strong>大家可直接跳跃至标题（一：NVM介绍）阅读</strong></p>\n<p><strong>注：本文编写的NVM+NodeJS安装步骤指引，是基于Windows10、64位操作系统进行的编写说明。</strong></p>\n<h1 id=\"一、NVM介绍\"><a href=\"#一、NVM介绍\" class=\"headerlink\" title=\"一、NVM介绍\"></a>一、NVM介绍</h1><p>NVM：Node Version Manage，即Node的版本管理工具。使用NVM，可以很方便地在多个NodeJS版本之间进行切换。</p>\n<p>由于项目开发当中，<strong>不同的项目可能依赖不同版本的NodeJS</strong>，这种情况下，<strong>NodeJS版本的切换将会是一件非常麻烦的事情</strong>。因此，<strong>使用NVM管理NodeJS版本就显得尤为重要</strong>。 </p>\n<h1 id=\"二、卸载电脑上现有的NodeJS-及nvm\"><a href=\"#二、卸载电脑上现有的NodeJS-及nvm\" class=\"headerlink\" title=\"二、卸载电脑上现有的NodeJS 及nvm\"></a>二、卸载电脑上现有的NodeJS 及nvm</h1><h2 id=\"卸载nvm\"><a href=\"#卸载nvm\" class=\"headerlink\" title=\"卸载nvm\"></a>卸载nvm</h2><p>直接删除nvM所在文件夹就可以了。</p>\n<h2 id=\"卸载NodeJS\"><a href=\"#卸载NodeJS\" class=\"headerlink\" title=\"卸载NodeJS\"></a>卸载NodeJS</h2><ol>\n<li><p>从卸载程序卸载程序和功能<br> a. 打开控制面板<br> b. 选择程序和功能<br><img src=\"https://img-blog.csdnimg.cn/7b1d3cff85394f328fc1c685a0b559dd.png\"><br> c. 找到Node.js并卸载<br> <img src=\"https://img-blog.csdnimg.cn/fac98ee374b84df2a749d43a9005c274.png\"></p>\n</li>\n<li><p>检查环境变量<br>将用户变量和系统变量中所有与node有关的全部删除。</p>\n</li>\n</ol>\n<p><strong>注意：不要忘记检查path</strong><br>3. 检查系统盘，寻找这些文件并删除它们（根据您安装的版本，UAC设置和CPU架构，这些可能或可能不存在）：<br>C:\\Users{User}\\AppData\\Roaming\\npm（或%appdata%\\npm）<br>C:\\Users{User}\\AppData\\Roaming\\npm-cache（或%appdata%\\npm-cache）<br>4. 重启电脑<br>5. 黑窗口输入以下代码检查是否正确删除</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm -v</span><br><span class=\"line\">node -v</span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"三、安装NVM和NodeJs\"><a href=\"#三、安装NVM和NodeJs\" class=\"headerlink\" title=\"三、安装NVM和NodeJs\"></a>三、安装NVM和NodeJs</h1><h2 id=\"3-1-下载NVM安装包\"><a href=\"#3-1-下载NVM安装包\" class=\"headerlink\" title=\"3.1 下载NVM安装包\"></a>3.1 下载NVM安装包</h2><p>在GitHub上下载NVM的安装包。下载地址：<a href=\"https://github.com/coreybutler/nvm-windows/releases%EF%BC%8C%E9%80%89%E6%8B%A9%E4%B8%8B%E8%BD%BDnvm-setup.zip%E3%80%82\">https://github.com/coreybutler/nvm-windows/releases，选择下载nvm-setup.zip。</a></p>\n<p>注：本例中选用的是截至2022年4月12日最新版本的NVM安装包，版本号为1.1.9。 </p>\n<h2 id=\"3-2-安装NVM\"><a href=\"#3-2-安装NVM\" class=\"headerlink\" title=\"3.2 安装NVM\"></a>3.2 安装NVM</h2><p>双击nvm-setup.exe文件，进行NVM的安装。<br>(1) 接受协议，下一步。<br>(2) 选择NVM的安装路径。可以按照个人习惯，自行选择安装路径。本例中，按照本人习惯，选择安装在D:\\nvm\\nvm下。<br><img src=\"https://img-blog.csdnimg.cn/40f0692c725e482ab9c1da5485a6671a.png\"></p>\n<p>(3) 选择NodeJS的Symlink (符号链接)文件夹的位置，用于生成NodeJS的映射目录。本例中，按照本人习惯，选择D:\\nodejs。</p>\n<p>注：<strong>安装前，需确保Symlink文件夹所在的路径不存在</strong>，否则可能安装失败。</p>\n<p>(4) 点击安装，等待安装完成。</p>\n<p>(5) 配置环境变量。</p>\n<p>打开高级系统设置-&gt;环境变量，可以发现，安装成功后，NVM已经自动帮我们配置了环境变量NVM_HOME和NVM_SYMLINK，并且配置了Path的值。<br><img src=\"https://img-blog.csdnimg.cn/183d4ee9c4ae4c07bb9bcac6b0cbe44a.png\"><br>因此，对于1.1.9版本的NVM，环境变量一般情况下无需手动配置。</p>\n<p>注：若使用的是免安装版的NVM，可以按照如下方式手动配置环境变量。</p>\n<ol>\n<li>在用户变量(或系统变量)中，添加变量名NVM_HOME，变量的值为NVM所在的根路径(以本例为例，路径为：D:\\Program Files\\nvm)； 2. 在用户变量(或系统变量)中，添加变量名NVM_SYMLINK，变量的值为NodeJS的Symlink 文件夹的位置(以本例为例，路径为：D:\\Program Files\\nodejs)； 3. 在用户变量(或系统变量)的path当中添加两个值：%NVM_HOME%和%NVM_SYMLINK%。</li>\n</ol>\n<p>(6) 配置NodeJS下载代理镜像（可选）</p>\n<p>安装完成后，可以在NVM安装根目录下的setting.txt文件中，配置NodeJS下载代理镜像，解决在线安装NodeJS时速度慢的问题。</p>\n<p>注：由于下载速度一般正常，并且可以使用离线安装的方式安装NodeJS，因此配置NodeJS下载镜像地址并不是必须的。由于篇幅有限，这里不再展开介绍。</p>\n<p>2.3 验证NVM是否安装成功</p>\n<p>安装完成后，打开命令行窗口，输入nvm -v，出现版本号即表示安装成功。</p>\n<h2 id=\"3-3在NVM中安装NodeJS\"><a href=\"#3-3在NVM中安装NodeJS\" class=\"headerlink\" title=\"3.3在NVM中安装NodeJS\"></a>3.3在NVM中安装NodeJS</h2><h3 id=\"3-3-1-nvm安装\"><a href=\"#3-3-1-nvm安装\" class=\"headerlink\" title=\"3.3.1 nvm安装\"></a>3.3.1 nvm安装</h3><p>首先，<strong>在使用NVM安装NodeJS前，需要以管理员身份打开命令行窗口。否则，将无法使用nvm use命令切换NPM版本</strong>。</p>\n<p>(1) 首先，使用NVM命令 nvm list available，查看可安装的NodeJS版本。建议选择LTS中的版本进行安装（LTS，即Long Term Support，长期支持版本）<br><img src=\"https://img-blog.csdnimg.cn/5328c8e473fb4d1e8aabf8dda996e2f7.png\"><br>注：若要查看完整的可安装版本列表，可访问官网：<a href=\"https://nodejs.org/en/download/releases/\">https://nodejs.org/en/download/releases/</a>。</p>\n<p>(2) 使用NVM命令nvm install，进行对应版本NodeJS的在线安装。</p>\n<p>示例 ：如需在线安装16.14.2版本的NodeJS，直接在命令行窗口输入：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 16.15.0</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-3-2离线安装NodeJs\"><a href=\"#3-3-2离线安装NodeJs\" class=\"headerlink\" title=\"3.3.2离线安装NodeJs\"></a>3.3.2离线安装NodeJs</h3><p>(1) 从官网下载指定版本NodeJS的免安装版离线安装包，下载地址：<a href=\"https://nodejs.org/en/download/releases/\">https://nodejs.org/en/download/releases/</a>。<br><img src=\"https://img-blog.csdnimg.cn/8b320edcd4704b52b69c44601d888c9b.png\"><br>上图中是Windows 10 64位操作系统，因此选择的是node-v17.6.0-win-x64.zip。<br><img src=\"https://img-blog.csdnimg.cn/07158792266645a7a36a6369e53a862c.png\"><br>(2) 将指定版本的NodeJS免安装版离线安装包，解压后放入到NVM安装路径的根目录下，即可完成离线安装。<br><img src=\"https://img-blog.csdnimg.cn/33c890bc335f4d729061879f8d380606.png\"></p>\n<h3 id=\"3-3-3-版本切换\"><a href=\"#3-3-3-版本切换\" class=\"headerlink\" title=\"3.3.3 版本切换\"></a>3.3.3 版本切换</h3><p>若已经成功安装了指定版本的NodeJS，只需要在命令行窗口执行npm use命令，切换对应版本的NodeJS即可。本例中，由于已经安装了16.14.2版本，因此可以执行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 17.6.0</span><br></pre></td></tr></tbody></table></figure>\n<p>如果执行之后是一串乱码，你需要用管理员身份打开窗口，重新输入上面的话。<br>若操作成功，将出现提示：Now using node v16.15.0 (64-bit)<br><img src=\"https://img-blog.csdnimg.cn/9208dc58cda34afeba9e0daf03959913.png\"><br>如果能够以管理员身份，在命令行窗口成功执行以上命令，那么恭喜你，NVM+NodeJS已经成功安装完成！！！</p>\n<h3 id=\"3-3-4-NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。\"><a href=\"#3-3-4-NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。\" class=\"headerlink\" title=\"3.3.4 NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。\"></a>3.3.4 NVM还有很多常用命令，在此不多做赘述，各位可自行搜索。</h3><h1 id=\"四、解决npm失效问题\"><a href=\"#四、解决npm失效问题\" class=\"headerlink\" title=\"四、解决npm失效问题\"></a>四、解决npm失效问题</h1><p>有的人可能到上一步为止问题就解决了。但是也会有一部分人像我一样，运行<code>npm -v</code>报错<code>'npm' 不是内部或外部命令，也不是可运行的程序</code><br>我打开nvm文件夹去看了下，16.15.0里面这些都没有，node_modules文件夹也是空的。。。<br>正常应该是下图所示：<br><img src=\"https://img-blog.csdnimg.cn/0b378115b8b74c5998003b4e97a54bd5.png\"><br><strong>解决办法是：</strong><br><strong>从node官网找对应版本的zip压缩包下来，替换掉这个目录里的东西</strong>，然后就完美解决了，node、npm都没问题，也可以自由切换版本。</p>\n<p><code>本文没有详写nodejs 如何指定全局安装路径和缓存路径。各位如果有需要，可自行查找。</code></p>\n<p>借阅大佬文章：<a href=\"https://www.bilibili.com/read/cv16108420\">使用NVM安装NodeJS(原创 最全笔记)</a></p>\n",
            "tags": [
                "react.js",
                "npm",
                "node.js"
            ]
        }
    ]
}